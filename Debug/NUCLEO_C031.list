
NUCLEO_C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d8c  08004d8c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004d8c  08004d8c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d8c  08004d8c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000068  08004dfc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08004dfc  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f44d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002538  00000000  00000000  0002f520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c73  00000000  00000000  00032a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015600  00000000  00000000  000336bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013361  00000000  00000000  00048cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c178  00000000  00000000  0005c01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b18  00000000  00000000  000e8194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ebcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c9c 	.word	0x08004c9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004c9c 	.word	0x08004c9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__clzsi2>:
 8000220:	211c      	movs	r1, #28
 8000222:	2301      	movs	r3, #1
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	4298      	cmp	r0, r3
 8000228:	d301      	bcc.n	800022e <__clzsi2+0xe>
 800022a:	0c00      	lsrs	r0, r0, #16
 800022c:	3910      	subs	r1, #16
 800022e:	0a1b      	lsrs	r3, r3, #8
 8000230:	4298      	cmp	r0, r3
 8000232:	d301      	bcc.n	8000238 <__clzsi2+0x18>
 8000234:	0a00      	lsrs	r0, r0, #8
 8000236:	3908      	subs	r1, #8
 8000238:	091b      	lsrs	r3, r3, #4
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0x22>
 800023e:	0900      	lsrs	r0, r0, #4
 8000240:	3904      	subs	r1, #4
 8000242:	a202      	add	r2, pc, #8	; (adr r2, 800024c <__clzsi2+0x2c>)
 8000244:	5c10      	ldrb	r0, [r2, r0]
 8000246:	1840      	adds	r0, r0, r1
 8000248:	4770      	bx	lr
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	02020304 	.word	0x02020304
 8000250:	01010101 	.word	0x01010101
	...

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	001f      	movs	r7, r3
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	4681      	mov	r9, r0
 8000270:	4692      	mov	sl, r2
 8000272:	0005      	movs	r5, r0
 8000274:	b085      	sub	sp, #20
 8000276:	0b24      	lsrs	r4, r4, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	0fce      	lsrs	r6, r1, #31
 800027c:	2b00      	cmp	r3, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e152      	b.n	8000528 <__aeabi_ddiv+0x2cc>
 8000282:	4ad2      	ldr	r2, [pc, #840]	; (80005cc <__aeabi_ddiv+0x370>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d100      	bne.n	800028a <__aeabi_ddiv+0x2e>
 8000288:	e16e      	b.n	8000568 <__aeabi_ddiv+0x30c>
 800028a:	0f42      	lsrs	r2, r0, #29
 800028c:	00e4      	lsls	r4, r4, #3
 800028e:	4314      	orrs	r4, r2
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4322      	orrs	r2, r4
 8000296:	4690      	mov	r8, r2
 8000298:	4acd      	ldr	r2, [pc, #820]	; (80005d0 <__aeabi_ddiv+0x374>)
 800029a:	00c5      	lsls	r5, r0, #3
 800029c:	4693      	mov	fp, r2
 800029e:	449b      	add	fp, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	4699      	mov	r9, r3
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4650      	mov	r0, sl
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x5c>
 80002b6:	e11a      	b.n	80004ee <__aeabi_ddiv+0x292>
 80002b8:	4ac4      	ldr	r2, [pc, #784]	; (80005cc <__aeabi_ddiv+0x370>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_ddiv+0x64>
 80002be:	e15e      	b.n	800057e <__aeabi_ddiv+0x322>
 80002c0:	0f42      	lsrs	r2, r0, #29
 80002c2:	00e4      	lsls	r4, r4, #3
 80002c4:	4322      	orrs	r2, r4
 80002c6:	2480      	movs	r4, #128	; 0x80
 80002c8:	0424      	lsls	r4, r4, #16
 80002ca:	4314      	orrs	r4, r2
 80002cc:	4ac0      	ldr	r2, [pc, #768]	; (80005d0 <__aeabi_ddiv+0x374>)
 80002ce:	00c1      	lsls	r1, r0, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	465a      	mov	r2, fp
 80002d4:	4463      	add	r3, ip
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	469b      	mov	fp, r3
 80002da:	2000      	movs	r0, #0
 80002dc:	0033      	movs	r3, r6
 80002de:	407b      	eors	r3, r7
 80002e0:	469a      	mov	sl, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d827      	bhi.n	8000338 <__aeabi_ddiv+0xdc>
 80002e8:	4aba      	ldr	r2, [pc, #744]	; (80005d4 <__aeabi_ddiv+0x378>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	58d3      	ldr	r3, [r2, r3]
 80002ee:	469f      	mov	pc, r3
 80002f0:	46b2      	mov	sl, r6
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d016      	beq.n	8000326 <__aeabi_ddiv+0xca>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xa2>
 80002fc:	e287      	b.n	800080e <__aeabi_ddiv+0x5b2>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xa8>
 8000302:	e0d5      	b.n	80004b0 <__aeabi_ddiv+0x254>
 8000304:	2300      	movs	r3, #0
 8000306:	2200      	movs	r2, #0
 8000308:	2500      	movs	r5, #0
 800030a:	051b      	lsls	r3, r3, #20
 800030c:	4313      	orrs	r3, r2
 800030e:	4652      	mov	r2, sl
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0028      	movs	r0, r5
 8000316:	0019      	movs	r1, r3
 8000318:	b005      	add	sp, #20
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2500      	movs	r5, #0
 800032a:	4ba8      	ldr	r3, [pc, #672]	; (80005cc <__aeabi_ddiv+0x370>)
 800032c:	e7ed      	b.n	800030a <__aeabi_ddiv+0xae>
 800032e:	46ba      	mov	sl, r7
 8000330:	46a0      	mov	r8, r4
 8000332:	000d      	movs	r5, r1
 8000334:	9000      	str	r0, [sp, #0]
 8000336:	e7dc      	b.n	80002f2 <__aeabi_ddiv+0x96>
 8000338:	4544      	cmp	r4, r8
 800033a:	d200      	bcs.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1c4      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0xe6>
 8000340:	e1bf      	b.n	80006c2 <__aeabi_ddiv+0x466>
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	469c      	mov	ip, r3
 8000348:	002e      	movs	r6, r5
 800034a:	4640      	mov	r0, r8
 800034c:	2500      	movs	r5, #0
 800034e:	44e3      	add	fp, ip
 8000350:	0223      	lsls	r3, r4, #8
 8000352:	0e0c      	lsrs	r4, r1, #24
 8000354:	431c      	orrs	r4, r3
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	4699      	mov	r9, r3
 800035a:	0423      	lsls	r3, r4, #16
 800035c:	020a      	lsls	r2, r1, #8
 800035e:	0c1f      	lsrs	r7, r3, #16
 8000360:	4649      	mov	r1, r9
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9701      	str	r7, [sp, #4]
 8000366:	f7ff ff55 	bl	8000214 <__aeabi_uidivmod>
 800036a:	0002      	movs	r2, r0
 800036c:	437a      	muls	r2, r7
 800036e:	040b      	lsls	r3, r1, #16
 8000370:	0c31      	lsrs	r1, r6, #16
 8000372:	4680      	mov	r8, r0
 8000374:	4319      	orrs	r1, r3
 8000376:	428a      	cmp	r2, r1
 8000378:	d907      	bls.n	800038a <__aeabi_ddiv+0x12e>
 800037a:	2301      	movs	r3, #1
 800037c:	425b      	negs	r3, r3
 800037e:	469c      	mov	ip, r3
 8000380:	1909      	adds	r1, r1, r4
 8000382:	44e0      	add	r8, ip
 8000384:	428c      	cmp	r4, r1
 8000386:	d800      	bhi.n	800038a <__aeabi_ddiv+0x12e>
 8000388:	e201      	b.n	800078e <__aeabi_ddiv+0x532>
 800038a:	1a88      	subs	r0, r1, r2
 800038c:	4649      	mov	r1, r9
 800038e:	f7ff ff41 	bl	8000214 <__aeabi_uidivmod>
 8000392:	9a01      	ldr	r2, [sp, #4]
 8000394:	0436      	lsls	r6, r6, #16
 8000396:	4342      	muls	r2, r0
 8000398:	0409      	lsls	r1, r1, #16
 800039a:	0c36      	lsrs	r6, r6, #16
 800039c:	0003      	movs	r3, r0
 800039e:	430e      	orrs	r6, r1
 80003a0:	42b2      	cmp	r2, r6
 80003a2:	d904      	bls.n	80003ae <__aeabi_ddiv+0x152>
 80003a4:	1936      	adds	r6, r6, r4
 80003a6:	3b01      	subs	r3, #1
 80003a8:	42b4      	cmp	r4, r6
 80003aa:	d800      	bhi.n	80003ae <__aeabi_ddiv+0x152>
 80003ac:	e1e9      	b.n	8000782 <__aeabi_ddiv+0x526>
 80003ae:	1ab0      	subs	r0, r6, r2
 80003b0:	4642      	mov	r2, r8
 80003b2:	9e00      	ldr	r6, [sp, #0]
 80003b4:	0412      	lsls	r2, r2, #16
 80003b6:	431a      	orrs	r2, r3
 80003b8:	0c33      	lsrs	r3, r6, #16
 80003ba:	001f      	movs	r7, r3
 80003bc:	0c11      	lsrs	r1, r2, #16
 80003be:	4690      	mov	r8, r2
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	0413      	lsls	r3, r2, #16
 80003c4:	0432      	lsls	r2, r6, #16
 80003c6:	0c16      	lsrs	r6, r2, #16
 80003c8:	0032      	movs	r2, r6
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	435a      	muls	r2, r3
 80003ce:	9603      	str	r6, [sp, #12]
 80003d0:	437b      	muls	r3, r7
 80003d2:	434e      	muls	r6, r1
 80003d4:	4379      	muls	r1, r7
 80003d6:	0c17      	lsrs	r7, r2, #16
 80003d8:	46bc      	mov	ip, r7
 80003da:	199b      	adds	r3, r3, r6
 80003dc:	4463      	add	r3, ip
 80003de:	429e      	cmp	r6, r3
 80003e0:	d903      	bls.n	80003ea <__aeabi_ddiv+0x18e>
 80003e2:	2680      	movs	r6, #128	; 0x80
 80003e4:	0276      	lsls	r6, r6, #9
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4461      	add	r1, ip
 80003ea:	0c1e      	lsrs	r6, r3, #16
 80003ec:	1871      	adds	r1, r6, r1
 80003ee:	0416      	lsls	r6, r2, #16
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	0c36      	lsrs	r6, r6, #16
 80003f4:	199e      	adds	r6, r3, r6
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d302      	bcc.n	8000400 <__aeabi_ddiv+0x1a4>
 80003fa:	d112      	bne.n	8000422 <__aeabi_ddiv+0x1c6>
 80003fc:	42b5      	cmp	r5, r6
 80003fe:	d210      	bcs.n	8000422 <__aeabi_ddiv+0x1c6>
 8000400:	4643      	mov	r3, r8
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	9b00      	ldr	r3, [sp, #0]
 8000406:	469c      	mov	ip, r3
 8000408:	4465      	add	r5, ip
 800040a:	001f      	movs	r7, r3
 800040c:	429d      	cmp	r5, r3
 800040e:	419b      	sbcs	r3, r3
 8000410:	425b      	negs	r3, r3
 8000412:	191b      	adds	r3, r3, r4
 8000414:	18c0      	adds	r0, r0, r3
 8000416:	4284      	cmp	r4, r0
 8000418:	d200      	bcs.n	800041c <__aeabi_ddiv+0x1c0>
 800041a:	e19e      	b.n	800075a <__aeabi_ddiv+0x4fe>
 800041c:	d100      	bne.n	8000420 <__aeabi_ddiv+0x1c4>
 800041e:	e199      	b.n	8000754 <__aeabi_ddiv+0x4f8>
 8000420:	4690      	mov	r8, r2
 8000422:	1bae      	subs	r6, r5, r6
 8000424:	42b5      	cmp	r5, r6
 8000426:	41ad      	sbcs	r5, r5
 8000428:	1a40      	subs	r0, r0, r1
 800042a:	426d      	negs	r5, r5
 800042c:	1b40      	subs	r0, r0, r5
 800042e:	4284      	cmp	r4, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1d8>
 8000432:	e1d2      	b.n	80007da <__aeabi_ddiv+0x57e>
 8000434:	4649      	mov	r1, r9
 8000436:	f7ff feed 	bl	8000214 <__aeabi_uidivmod>
 800043a:	9a01      	ldr	r2, [sp, #4]
 800043c:	040b      	lsls	r3, r1, #16
 800043e:	4342      	muls	r2, r0
 8000440:	0c31      	lsrs	r1, r6, #16
 8000442:	0005      	movs	r5, r0
 8000444:	4319      	orrs	r1, r3
 8000446:	428a      	cmp	r2, r1
 8000448:	d900      	bls.n	800044c <__aeabi_ddiv+0x1f0>
 800044a:	e16c      	b.n	8000726 <__aeabi_ddiv+0x4ca>
 800044c:	1a88      	subs	r0, r1, r2
 800044e:	4649      	mov	r1, r9
 8000450:	f7ff fee0 	bl	8000214 <__aeabi_uidivmod>
 8000454:	9a01      	ldr	r2, [sp, #4]
 8000456:	0436      	lsls	r6, r6, #16
 8000458:	4342      	muls	r2, r0
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	0c36      	lsrs	r6, r6, #16
 800045e:	0003      	movs	r3, r0
 8000460:	430e      	orrs	r6, r1
 8000462:	42b2      	cmp	r2, r6
 8000464:	d900      	bls.n	8000468 <__aeabi_ddiv+0x20c>
 8000466:	e153      	b.n	8000710 <__aeabi_ddiv+0x4b4>
 8000468:	9803      	ldr	r0, [sp, #12]
 800046a:	1ab6      	subs	r6, r6, r2
 800046c:	0002      	movs	r2, r0
 800046e:	042d      	lsls	r5, r5, #16
 8000470:	431d      	orrs	r5, r3
 8000472:	9f02      	ldr	r7, [sp, #8]
 8000474:	042b      	lsls	r3, r5, #16
 8000476:	0c1b      	lsrs	r3, r3, #16
 8000478:	435a      	muls	r2, r3
 800047a:	437b      	muls	r3, r7
 800047c:	469c      	mov	ip, r3
 800047e:	0c29      	lsrs	r1, r5, #16
 8000480:	4348      	muls	r0, r1
 8000482:	0c13      	lsrs	r3, r2, #16
 8000484:	4484      	add	ip, r0
 8000486:	4463      	add	r3, ip
 8000488:	4379      	muls	r1, r7
 800048a:	4298      	cmp	r0, r3
 800048c:	d903      	bls.n	8000496 <__aeabi_ddiv+0x23a>
 800048e:	2080      	movs	r0, #128	; 0x80
 8000490:	0240      	lsls	r0, r0, #9
 8000492:	4684      	mov	ip, r0
 8000494:	4461      	add	r1, ip
 8000496:	0c18      	lsrs	r0, r3, #16
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	0c12      	lsrs	r2, r2, #16
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	189b      	adds	r3, r3, r2
 80004a2:	4286      	cmp	r6, r0
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x24c>
 80004a6:	e100      	b.n	80006aa <__aeabi_ddiv+0x44e>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x250>
 80004aa:	e0fb      	b.n	80006a4 <__aeabi_ddiv+0x448>
 80004ac:	2301      	movs	r3, #1
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4b49      	ldr	r3, [pc, #292]	; (80005d8 <__aeabi_ddiv+0x37c>)
 80004b2:	445b      	add	r3, fp
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_ddiv+0x25e>
 80004b8:	e0aa      	b.n	8000610 <__aeabi_ddiv+0x3b4>
 80004ba:	076a      	lsls	r2, r5, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_ddiv+0x264>
 80004be:	e13d      	b.n	800073c <__aeabi_ddiv+0x4e0>
 80004c0:	08e9      	lsrs	r1, r5, #3
 80004c2:	4642      	mov	r2, r8
 80004c4:	01d2      	lsls	r2, r2, #7
 80004c6:	d506      	bpl.n	80004d6 <__aeabi_ddiv+0x27a>
 80004c8:	4642      	mov	r2, r8
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <__aeabi_ddiv+0x380>)
 80004cc:	401a      	ands	r2, r3
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	4690      	mov	r8, r2
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	445b      	add	r3, fp
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <__aeabi_ddiv+0x384>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	dd00      	ble.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e723      	b.n	8000326 <__aeabi_ddiv+0xca>
 80004de:	4642      	mov	r2, r8
 80004e0:	055b      	lsls	r3, r3, #21
 80004e2:	0755      	lsls	r5, r2, #29
 80004e4:	0252      	lsls	r2, r2, #9
 80004e6:	430d      	orrs	r5, r1
 80004e8:	0b12      	lsrs	r2, r2, #12
 80004ea:	0d5b      	lsrs	r3, r3, #21
 80004ec:	e70d      	b.n	800030a <__aeabi_ddiv+0xae>
 80004ee:	4651      	mov	r1, sl
 80004f0:	4321      	orrs	r1, r4
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0x29a>
 80004f4:	e07c      	b.n	80005f0 <__aeabi_ddiv+0x394>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0x2a0>
 80004fa:	e0fb      	b.n	80006f4 <__aeabi_ddiv+0x498>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f7ff fe8f 	bl	8000220 <__clzsi2>
 8000502:	0002      	movs	r2, r0
 8000504:	3a0b      	subs	r2, #11
 8000506:	231d      	movs	r3, #29
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	4652      	mov	r2, sl
 800050c:	0001      	movs	r1, r0
 800050e:	40da      	lsrs	r2, r3
 8000510:	4653      	mov	r3, sl
 8000512:	3908      	subs	r1, #8
 8000514:	408b      	lsls	r3, r1
 8000516:	408c      	lsls	r4, r1
 8000518:	0019      	movs	r1, r3
 800051a:	4314      	orrs	r4, r2
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <__aeabi_ddiv+0x388>)
 800051e:	4458      	add	r0, fp
 8000520:	469b      	mov	fp, r3
 8000522:	4483      	add	fp, r0
 8000524:	2000      	movs	r0, #0
 8000526:	e6d9      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000528:	0003      	movs	r3, r0
 800052a:	4323      	orrs	r3, r4
 800052c:	4698      	mov	r8, r3
 800052e:	d044      	beq.n	80005ba <__aeabi_ddiv+0x35e>
 8000530:	2c00      	cmp	r4, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0x2da>
 8000534:	e0cf      	b.n	80006d6 <__aeabi_ddiv+0x47a>
 8000536:	0020      	movs	r0, r4
 8000538:	f7ff fe72 	bl	8000220 <__clzsi2>
 800053c:	0001      	movs	r1, r0
 800053e:	0002      	movs	r2, r0
 8000540:	390b      	subs	r1, #11
 8000542:	231d      	movs	r3, #29
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	4649      	mov	r1, r9
 8000548:	0010      	movs	r0, r2
 800054a:	40d9      	lsrs	r1, r3
 800054c:	3808      	subs	r0, #8
 800054e:	4084      	lsls	r4, r0
 8000550:	000b      	movs	r3, r1
 8000552:	464d      	mov	r5, r9
 8000554:	4323      	orrs	r3, r4
 8000556:	4698      	mov	r8, r3
 8000558:	4085      	lsls	r5, r0
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <__aeabi_ddiv+0x38c>)
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	469b      	mov	fp, r3
 8000560:	2300      	movs	r3, #0
 8000562:	4699      	mov	r9, r3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	e69e      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000568:	0002      	movs	r2, r0
 800056a:	4322      	orrs	r2, r4
 800056c:	4690      	mov	r8, r2
 800056e:	d11d      	bne.n	80005ac <__aeabi_ddiv+0x350>
 8000570:	2208      	movs	r2, #8
 8000572:	469b      	mov	fp, r3
 8000574:	2302      	movs	r3, #2
 8000576:	2500      	movs	r5, #0
 8000578:	4691      	mov	r9, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	e693      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 800057e:	4651      	mov	r1, sl
 8000580:	4321      	orrs	r1, r4
 8000582:	d109      	bne.n	8000598 <__aeabi_ddiv+0x33c>
 8000584:	2302      	movs	r3, #2
 8000586:	464a      	mov	r2, r9
 8000588:	431a      	orrs	r2, r3
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <__aeabi_ddiv+0x390>)
 800058c:	4691      	mov	r9, r2
 800058e:	469c      	mov	ip, r3
 8000590:	2400      	movs	r4, #0
 8000592:	2002      	movs	r0, #2
 8000594:	44e3      	add	fp, ip
 8000596:	e6a1      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000598:	2303      	movs	r3, #3
 800059a:	464a      	mov	r2, r9
 800059c:	431a      	orrs	r2, r3
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <__aeabi_ddiv+0x390>)
 80005a0:	4691      	mov	r9, r2
 80005a2:	469c      	mov	ip, r3
 80005a4:	4651      	mov	r1, sl
 80005a6:	2003      	movs	r0, #3
 80005a8:	44e3      	add	fp, ip
 80005aa:	e697      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005ac:	220c      	movs	r2, #12
 80005ae:	469b      	mov	fp, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	46a0      	mov	r8, r4
 80005b4:	4691      	mov	r9, r2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e675      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	e66d      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	fffffc01 	.word	0xfffffc01
 80005d4:	08004cec 	.word	0x08004cec
 80005d8:	000003ff 	.word	0x000003ff
 80005dc:	feffffff 	.word	0xfeffffff
 80005e0:	000007fe 	.word	0x000007fe
 80005e4:	000003f3 	.word	0x000003f3
 80005e8:	fffffc0d 	.word	0xfffffc0d
 80005ec:	fffff801 	.word	0xfffff801
 80005f0:	464a      	mov	r2, r9
 80005f2:	2301      	movs	r3, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	2400      	movs	r4, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	e66e      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005fe:	2300      	movs	r3, #0
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	469a      	mov	sl, r3
 8000604:	2500      	movs	r5, #0
 8000606:	4b88      	ldr	r3, [pc, #544]	; (8000828 <__aeabi_ddiv+0x5cc>)
 8000608:	0312      	lsls	r2, r2, #12
 800060a:	e67e      	b.n	800030a <__aeabi_ddiv+0xae>
 800060c:	2501      	movs	r5, #1
 800060e:	426d      	negs	r5, r5
 8000610:	2201      	movs	r2, #1
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	2a38      	cmp	r2, #56	; 0x38
 8000616:	dd00      	ble.n	800061a <__aeabi_ddiv+0x3be>
 8000618:	e674      	b.n	8000304 <__aeabi_ddiv+0xa8>
 800061a:	2a1f      	cmp	r2, #31
 800061c:	dc00      	bgt.n	8000620 <__aeabi_ddiv+0x3c4>
 800061e:	e0bd      	b.n	800079c <__aeabi_ddiv+0x540>
 8000620:	211f      	movs	r1, #31
 8000622:	4249      	negs	r1, r1
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	4641      	mov	r1, r8
 8000628:	40d9      	lsrs	r1, r3
 800062a:	000b      	movs	r3, r1
 800062c:	2a20      	cmp	r2, #32
 800062e:	d004      	beq.n	800063a <__aeabi_ddiv+0x3de>
 8000630:	4641      	mov	r1, r8
 8000632:	4a7e      	ldr	r2, [pc, #504]	; (800082c <__aeabi_ddiv+0x5d0>)
 8000634:	445a      	add	r2, fp
 8000636:	4091      	lsls	r1, r2
 8000638:	430d      	orrs	r5, r1
 800063a:	0029      	movs	r1, r5
 800063c:	1e4a      	subs	r2, r1, #1
 800063e:	4191      	sbcs	r1, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	2307      	movs	r3, #7
 8000644:	001d      	movs	r5, r3
 8000646:	2200      	movs	r2, #0
 8000648:	400d      	ands	r5, r1
 800064a:	420b      	tst	r3, r1
 800064c:	d100      	bne.n	8000650 <__aeabi_ddiv+0x3f4>
 800064e:	e0d0      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000650:	220f      	movs	r2, #15
 8000652:	2300      	movs	r3, #0
 8000654:	400a      	ands	r2, r1
 8000656:	2a04      	cmp	r2, #4
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x400>
 800065a:	e0c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800065c:	1d0a      	adds	r2, r1, #4
 800065e:	428a      	cmp	r2, r1
 8000660:	4189      	sbcs	r1, r1
 8000662:	4249      	negs	r1, r1
 8000664:	185b      	adds	r3, r3, r1
 8000666:	0011      	movs	r1, r2
 8000668:	021a      	lsls	r2, r3, #8
 800066a:	d400      	bmi.n	800066e <__aeabi_ddiv+0x412>
 800066c:	e0be      	b.n	80007ec <__aeabi_ddiv+0x590>
 800066e:	2301      	movs	r3, #1
 8000670:	2200      	movs	r2, #0
 8000672:	2500      	movs	r5, #0
 8000674:	e649      	b.n	800030a <__aeabi_ddiv+0xae>
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	4643      	mov	r3, r8
 800067a:	0312      	lsls	r2, r2, #12
 800067c:	4213      	tst	r3, r2
 800067e:	d008      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000680:	4214      	tst	r4, r2
 8000682:	d106      	bne.n	8000692 <__aeabi_ddiv+0x436>
 8000684:	4322      	orrs	r2, r4
 8000686:	0312      	lsls	r2, r2, #12
 8000688:	46ba      	mov	sl, r7
 800068a:	000d      	movs	r5, r1
 800068c:	4b66      	ldr	r3, [pc, #408]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800068e:	0b12      	lsrs	r2, r2, #12
 8000690:	e63b      	b.n	800030a <__aeabi_ddiv+0xae>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	4643      	mov	r3, r8
 8000696:	0312      	lsls	r2, r2, #12
 8000698:	431a      	orrs	r2, r3
 800069a:	0312      	lsls	r2, r2, #12
 800069c:	46b2      	mov	sl, r6
 800069e:	4b62      	ldr	r3, [pc, #392]	; (8000828 <__aeabi_ddiv+0x5cc>)
 80006a0:	0b12      	lsrs	r2, r2, #12
 80006a2:	e632      	b.n	800030a <__aeabi_ddiv+0xae>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x44e>
 80006a8:	e702      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80006aa:	19a6      	adds	r6, r4, r6
 80006ac:	1e6a      	subs	r2, r5, #1
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d200      	bcs.n	80006b4 <__aeabi_ddiv+0x458>
 80006b2:	e089      	b.n	80007c8 <__aeabi_ddiv+0x56c>
 80006b4:	4286      	cmp	r6, r0
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x45e>
 80006b8:	e09f      	b.n	80007fa <__aeabi_ddiv+0x59e>
 80006ba:	d100      	bne.n	80006be <__aeabi_ddiv+0x462>
 80006bc:	e0af      	b.n	800081e <__aeabi_ddiv+0x5c2>
 80006be:	0015      	movs	r5, r2
 80006c0:	e6f4      	b.n	80004ac <__aeabi_ddiv+0x250>
 80006c2:	42a9      	cmp	r1, r5
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x46c>
 80006c6:	e63c      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80006c8:	4643      	mov	r3, r8
 80006ca:	07de      	lsls	r6, r3, #31
 80006cc:	0858      	lsrs	r0, r3, #1
 80006ce:	086b      	lsrs	r3, r5, #1
 80006d0:	431e      	orrs	r6, r3
 80006d2:	07ed      	lsls	r5, r5, #31
 80006d4:	e63c      	b.n	8000350 <__aeabi_ddiv+0xf4>
 80006d6:	f7ff fda3 	bl	8000220 <__clzsi2>
 80006da:	0001      	movs	r1, r0
 80006dc:	0002      	movs	r2, r0
 80006de:	3115      	adds	r1, #21
 80006e0:	3220      	adds	r2, #32
 80006e2:	291c      	cmp	r1, #28
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_ddiv+0x48c>
 80006e6:	e72c      	b.n	8000542 <__aeabi_ddiv+0x2e6>
 80006e8:	464b      	mov	r3, r9
 80006ea:	3808      	subs	r0, #8
 80006ec:	4083      	lsls	r3, r0
 80006ee:	2500      	movs	r5, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	e732      	b.n	800055a <__aeabi_ddiv+0x2fe>
 80006f4:	f7ff fd94 	bl	8000220 <__clzsi2>
 80006f8:	0003      	movs	r3, r0
 80006fa:	001a      	movs	r2, r3
 80006fc:	3215      	adds	r2, #21
 80006fe:	3020      	adds	r0, #32
 8000700:	2a1c      	cmp	r2, #28
 8000702:	dc00      	bgt.n	8000706 <__aeabi_ddiv+0x4aa>
 8000704:	e6ff      	b.n	8000506 <__aeabi_ddiv+0x2aa>
 8000706:	4654      	mov	r4, sl
 8000708:	3b08      	subs	r3, #8
 800070a:	2100      	movs	r1, #0
 800070c:	409c      	lsls	r4, r3
 800070e:	e705      	b.n	800051c <__aeabi_ddiv+0x2c0>
 8000710:	1936      	adds	r6, r6, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	42b4      	cmp	r4, r6
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x4be>
 8000718:	e6a6      	b.n	8000468 <__aeabi_ddiv+0x20c>
 800071a:	42b2      	cmp	r2, r6
 800071c:	d800      	bhi.n	8000720 <__aeabi_ddiv+0x4c4>
 800071e:	e6a3      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000720:	1e83      	subs	r3, r0, #2
 8000722:	1936      	adds	r6, r6, r4
 8000724:	e6a0      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000726:	1909      	adds	r1, r1, r4
 8000728:	3d01      	subs	r5, #1
 800072a:	428c      	cmp	r4, r1
 800072c:	d900      	bls.n	8000730 <__aeabi_ddiv+0x4d4>
 800072e:	e68d      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000730:	428a      	cmp	r2, r1
 8000732:	d800      	bhi.n	8000736 <__aeabi_ddiv+0x4da>
 8000734:	e68a      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000736:	1e85      	subs	r5, r0, #2
 8000738:	1909      	adds	r1, r1, r4
 800073a:	e687      	b.n	800044c <__aeabi_ddiv+0x1f0>
 800073c:	220f      	movs	r2, #15
 800073e:	402a      	ands	r2, r5
 8000740:	2a04      	cmp	r2, #4
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x4ea>
 8000744:	e6bc      	b.n	80004c0 <__aeabi_ddiv+0x264>
 8000746:	1d29      	adds	r1, r5, #4
 8000748:	42a9      	cmp	r1, r5
 800074a:	41ad      	sbcs	r5, r5
 800074c:	426d      	negs	r5, r5
 800074e:	08c9      	lsrs	r1, r1, #3
 8000750:	44a8      	add	r8, r5
 8000752:	e6b6      	b.n	80004c2 <__aeabi_ddiv+0x266>
 8000754:	42af      	cmp	r7, r5
 8000756:	d900      	bls.n	800075a <__aeabi_ddiv+0x4fe>
 8000758:	e662      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 800075a:	4281      	cmp	r1, r0
 800075c:	d804      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 800075e:	d000      	beq.n	8000762 <__aeabi_ddiv+0x506>
 8000760:	e65e      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000762:	42ae      	cmp	r6, r5
 8000764:	d800      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 8000766:	e65b      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000768:	2302      	movs	r3, #2
 800076a:	425b      	negs	r3, r3
 800076c:	469c      	mov	ip, r3
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	44e0      	add	r8, ip
 8000772:	469c      	mov	ip, r3
 8000774:	4465      	add	r5, ip
 8000776:	429d      	cmp	r5, r3
 8000778:	419b      	sbcs	r3, r3
 800077a:	425b      	negs	r3, r3
 800077c:	191b      	adds	r3, r3, r4
 800077e:	18c0      	adds	r0, r0, r3
 8000780:	e64f      	b.n	8000422 <__aeabi_ddiv+0x1c6>
 8000782:	42b2      	cmp	r2, r6
 8000784:	d800      	bhi.n	8000788 <__aeabi_ddiv+0x52c>
 8000786:	e612      	b.n	80003ae <__aeabi_ddiv+0x152>
 8000788:	1e83      	subs	r3, r0, #2
 800078a:	1936      	adds	r6, r6, r4
 800078c:	e60f      	b.n	80003ae <__aeabi_ddiv+0x152>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x538>
 8000792:	e5fa      	b.n	800038a <__aeabi_ddiv+0x12e>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	4698      	mov	r8, r3
 8000798:	1909      	adds	r1, r1, r4
 800079a:	e5f6      	b.n	800038a <__aeabi_ddiv+0x12e>
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <__aeabi_ddiv+0x5d4>)
 800079e:	0028      	movs	r0, r5
 80007a0:	445b      	add	r3, fp
 80007a2:	4641      	mov	r1, r8
 80007a4:	409d      	lsls	r5, r3
 80007a6:	4099      	lsls	r1, r3
 80007a8:	40d0      	lsrs	r0, r2
 80007aa:	1e6b      	subs	r3, r5, #1
 80007ac:	419d      	sbcs	r5, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	4301      	orrs	r1, r0
 80007b2:	4329      	orrs	r1, r5
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	074a      	lsls	r2, r1, #29
 80007b8:	d100      	bne.n	80007bc <__aeabi_ddiv+0x560>
 80007ba:	e755      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007bc:	220f      	movs	r2, #15
 80007be:	400a      	ands	r2, r1
 80007c0:	2a04      	cmp	r2, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_ddiv+0x56a>
 80007c4:	e74a      	b.n	800065c <__aeabi_ddiv+0x400>
 80007c6:	e74f      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007c8:	0015      	movs	r5, r2
 80007ca:	4286      	cmp	r6, r0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_ddiv+0x574>
 80007ce:	e66d      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d0:	9a00      	ldr	r2, [sp, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0x57c>
 80007d6:	e669      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d8:	e66a      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <__aeabi_ddiv+0x5d8>)
 80007dc:	445b      	add	r3, fp
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_ddiv+0x588>
 80007e2:	e713      	b.n	800060c <__aeabi_ddiv+0x3b0>
 80007e4:	2501      	movs	r5, #1
 80007e6:	2100      	movs	r1, #0
 80007e8:	44a8      	add	r8, r5
 80007ea:	e66a      	b.n	80004c2 <__aeabi_ddiv+0x266>
 80007ec:	075d      	lsls	r5, r3, #29
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	0b1a      	lsrs	r2, r3, #12
 80007f2:	08c9      	lsrs	r1, r1, #3
 80007f4:	2300      	movs	r3, #0
 80007f6:	430d      	orrs	r5, r1
 80007f8:	e587      	b.n	800030a <__aeabi_ddiv+0xae>
 80007fa:	9900      	ldr	r1, [sp, #0]
 80007fc:	3d02      	subs	r5, #2
 80007fe:	004a      	lsls	r2, r1, #1
 8000800:	428a      	cmp	r2, r1
 8000802:	41bf      	sbcs	r7, r7
 8000804:	427f      	negs	r7, r7
 8000806:	193f      	adds	r7, r7, r4
 8000808:	19f6      	adds	r6, r6, r7
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	e7dd      	b.n	80007ca <__aeabi_ddiv+0x56e>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	4643      	mov	r3, r8
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	431a      	orrs	r2, r3
 8000816:	0312      	lsls	r2, r2, #12
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800081a:	0b12      	lsrs	r2, r2, #12
 800081c:	e575      	b.n	800030a <__aeabi_ddiv+0xae>
 800081e:	9900      	ldr	r1, [sp, #0]
 8000820:	4299      	cmp	r1, r3
 8000822:	d3ea      	bcc.n	80007fa <__aeabi_ddiv+0x59e>
 8000824:	0015      	movs	r5, r2
 8000826:	e7d3      	b.n	80007d0 <__aeabi_ddiv+0x574>
 8000828:	000007ff 	.word	0x000007ff
 800082c:	0000043e 	.word	0x0000043e
 8000830:	0000041e 	.word	0x0000041e
 8000834:	000003ff 	.word	0x000003ff

08000838 <__aeabi_dmul>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	4645      	mov	r5, r8
 800083c:	46de      	mov	lr, fp
 800083e:	4657      	mov	r7, sl
 8000840:	464e      	mov	r6, r9
 8000842:	b5e0      	push	{r5, r6, r7, lr}
 8000844:	001f      	movs	r7, r3
 8000846:	030b      	lsls	r3, r1, #12
 8000848:	0b1b      	lsrs	r3, r3, #12
 800084a:	469b      	mov	fp, r3
 800084c:	004d      	lsls	r5, r1, #1
 800084e:	0fcb      	lsrs	r3, r1, #31
 8000850:	0004      	movs	r4, r0
 8000852:	4691      	mov	r9, r2
 8000854:	4698      	mov	r8, r3
 8000856:	b087      	sub	sp, #28
 8000858:	0d6d      	lsrs	r5, r5, #21
 800085a:	d100      	bne.n	800085e <__aeabi_dmul+0x26>
 800085c:	e1cd      	b.n	8000bfa <__aeabi_dmul+0x3c2>
 800085e:	4bce      	ldr	r3, [pc, #824]	; (8000b98 <__aeabi_dmul+0x360>)
 8000860:	429d      	cmp	r5, r3
 8000862:	d100      	bne.n	8000866 <__aeabi_dmul+0x2e>
 8000864:	e1e9      	b.n	8000c3a <__aeabi_dmul+0x402>
 8000866:	465a      	mov	r2, fp
 8000868:	0f43      	lsrs	r3, r0, #29
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	4313      	orrs	r3, r2
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0412      	lsls	r2, r2, #16
 8000872:	431a      	orrs	r2, r3
 8000874:	00c3      	lsls	r3, r0, #3
 8000876:	469a      	mov	sl, r3
 8000878:	4bc8      	ldr	r3, [pc, #800]	; (8000b9c <__aeabi_dmul+0x364>)
 800087a:	4693      	mov	fp, r2
 800087c:	469c      	mov	ip, r3
 800087e:	2300      	movs	r3, #0
 8000880:	2600      	movs	r6, #0
 8000882:	4465      	add	r5, ip
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	033c      	lsls	r4, r7, #12
 8000888:	007b      	lsls	r3, r7, #1
 800088a:	4648      	mov	r0, r9
 800088c:	0b24      	lsrs	r4, r4, #12
 800088e:	0d5b      	lsrs	r3, r3, #21
 8000890:	0fff      	lsrs	r7, r7, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_dmul+0x60>
 8000896:	e189      	b.n	8000bac <__aeabi_dmul+0x374>
 8000898:	4abf      	ldr	r2, [pc, #764]	; (8000b98 <__aeabi_dmul+0x360>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x9a>
 800089e:	0f42      	lsrs	r2, r0, #29
 80008a0:	00e4      	lsls	r4, r4, #3
 80008a2:	4322      	orrs	r2, r4
 80008a4:	2480      	movs	r4, #128	; 0x80
 80008a6:	0424      	lsls	r4, r4, #16
 80008a8:	4314      	orrs	r4, r2
 80008aa:	4abc      	ldr	r2, [pc, #752]	; (8000b9c <__aeabi_dmul+0x364>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4694      	mov	ip, r2
 80008b0:	4642      	mov	r2, r8
 80008b2:	4463      	add	r3, ip
 80008b4:	195b      	adds	r3, r3, r5
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	9b01      	ldr	r3, [sp, #4]
 80008ba:	407a      	eors	r2, r7
 80008bc:	3301      	adds	r3, #1
 80008be:	00c0      	lsls	r0, r0, #3
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2e0a      	cmp	r6, #10
 80008c6:	dd1c      	ble.n	8000902 <__aeabi_dmul+0xca>
 80008c8:	003a      	movs	r2, r7
 80008ca:	2e0b      	cmp	r6, #11
 80008cc:	d05e      	beq.n	800098c <__aeabi_dmul+0x154>
 80008ce:	4647      	mov	r7, r8
 80008d0:	e056      	b.n	8000980 <__aeabi_dmul+0x148>
 80008d2:	4649      	mov	r1, r9
 80008d4:	4bb0      	ldr	r3, [pc, #704]	; (8000b98 <__aeabi_dmul+0x360>)
 80008d6:	4321      	orrs	r1, r4
 80008d8:	18eb      	adds	r3, r5, r3
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	2900      	cmp	r1, #0
 80008de:	d12a      	bne.n	8000936 <__aeabi_dmul+0xfe>
 80008e0:	2080      	movs	r0, #128	; 0x80
 80008e2:	2202      	movs	r2, #2
 80008e4:	0100      	lsls	r0, r0, #4
 80008e6:	002b      	movs	r3, r5
 80008e8:	4684      	mov	ip, r0
 80008ea:	4316      	orrs	r6, r2
 80008ec:	4642      	mov	r2, r8
 80008ee:	4463      	add	r3, ip
 80008f0:	407a      	eors	r2, r7
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	2e0a      	cmp	r6, #10
 80008f8:	dd00      	ble.n	80008fc <__aeabi_dmul+0xc4>
 80008fa:	e231      	b.n	8000d60 <__aeabi_dmul+0x528>
 80008fc:	2000      	movs	r0, #0
 80008fe:	2400      	movs	r4, #0
 8000900:	2102      	movs	r1, #2
 8000902:	2e02      	cmp	r6, #2
 8000904:	dc26      	bgt.n	8000954 <__aeabi_dmul+0x11c>
 8000906:	3e01      	subs	r6, #1
 8000908:	2e01      	cmp	r6, #1
 800090a:	d852      	bhi.n	80009b2 <__aeabi_dmul+0x17a>
 800090c:	2902      	cmp	r1, #2
 800090e:	d04c      	beq.n	80009aa <__aeabi_dmul+0x172>
 8000910:	2901      	cmp	r1, #1
 8000912:	d000      	beq.n	8000916 <__aeabi_dmul+0xde>
 8000914:	e118      	b.n	8000b48 <__aeabi_dmul+0x310>
 8000916:	2300      	movs	r3, #0
 8000918:	2400      	movs	r4, #0
 800091a:	2500      	movs	r5, #0
 800091c:	051b      	lsls	r3, r3, #20
 800091e:	4323      	orrs	r3, r4
 8000920:	07d2      	lsls	r2, r2, #31
 8000922:	4313      	orrs	r3, r2
 8000924:	0028      	movs	r0, r5
 8000926:	0019      	movs	r1, r3
 8000928:	b007      	add	sp, #28
 800092a:	bcf0      	pop	{r4, r5, r6, r7}
 800092c:	46bb      	mov	fp, r7
 800092e:	46b2      	mov	sl, r6
 8000930:	46a9      	mov	r9, r5
 8000932:	46a0      	mov	r8, r4
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	2203      	movs	r2, #3
 800093a:	0109      	lsls	r1, r1, #4
 800093c:	002b      	movs	r3, r5
 800093e:	468c      	mov	ip, r1
 8000940:	4316      	orrs	r6, r2
 8000942:	4642      	mov	r2, r8
 8000944:	4463      	add	r3, ip
 8000946:	407a      	eors	r2, r7
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	9302      	str	r3, [sp, #8]
 800094c:	2e0a      	cmp	r6, #10
 800094e:	dd00      	ble.n	8000952 <__aeabi_dmul+0x11a>
 8000950:	e228      	b.n	8000da4 <__aeabi_dmul+0x56c>
 8000952:	2103      	movs	r1, #3
 8000954:	2501      	movs	r5, #1
 8000956:	40b5      	lsls	r5, r6
 8000958:	46ac      	mov	ip, r5
 800095a:	26a6      	movs	r6, #166	; 0xa6
 800095c:	4663      	mov	r3, ip
 800095e:	00f6      	lsls	r6, r6, #3
 8000960:	4035      	ands	r5, r6
 8000962:	4233      	tst	r3, r6
 8000964:	d10b      	bne.n	800097e <__aeabi_dmul+0x146>
 8000966:	2690      	movs	r6, #144	; 0x90
 8000968:	00b6      	lsls	r6, r6, #2
 800096a:	4233      	tst	r3, r6
 800096c:	d118      	bne.n	80009a0 <__aeabi_dmul+0x168>
 800096e:	3eb9      	subs	r6, #185	; 0xb9
 8000970:	3eff      	subs	r6, #255	; 0xff
 8000972:	421e      	tst	r6, r3
 8000974:	d01d      	beq.n	80009b2 <__aeabi_dmul+0x17a>
 8000976:	46a3      	mov	fp, r4
 8000978:	4682      	mov	sl, r0
 800097a:	9100      	str	r1, [sp, #0]
 800097c:	e000      	b.n	8000980 <__aeabi_dmul+0x148>
 800097e:	0017      	movs	r7, r2
 8000980:	9900      	ldr	r1, [sp, #0]
 8000982:	003a      	movs	r2, r7
 8000984:	2902      	cmp	r1, #2
 8000986:	d010      	beq.n	80009aa <__aeabi_dmul+0x172>
 8000988:	465c      	mov	r4, fp
 800098a:	4650      	mov	r0, sl
 800098c:	2903      	cmp	r1, #3
 800098e:	d1bf      	bne.n	8000910 <__aeabi_dmul+0xd8>
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	031b      	lsls	r3, r3, #12
 8000994:	431c      	orrs	r4, r3
 8000996:	0324      	lsls	r4, r4, #12
 8000998:	0005      	movs	r5, r0
 800099a:	4b7f      	ldr	r3, [pc, #508]	; (8000b98 <__aeabi_dmul+0x360>)
 800099c:	0b24      	lsrs	r4, r4, #12
 800099e:	e7bd      	b.n	800091c <__aeabi_dmul+0xe4>
 80009a0:	2480      	movs	r4, #128	; 0x80
 80009a2:	2200      	movs	r2, #0
 80009a4:	4b7c      	ldr	r3, [pc, #496]	; (8000b98 <__aeabi_dmul+0x360>)
 80009a6:	0324      	lsls	r4, r4, #12
 80009a8:	e7b8      	b.n	800091c <__aeabi_dmul+0xe4>
 80009aa:	2400      	movs	r4, #0
 80009ac:	2500      	movs	r5, #0
 80009ae:	4b7a      	ldr	r3, [pc, #488]	; (8000b98 <__aeabi_dmul+0x360>)
 80009b0:	e7b4      	b.n	800091c <__aeabi_dmul+0xe4>
 80009b2:	4653      	mov	r3, sl
 80009b4:	041e      	lsls	r6, r3, #16
 80009b6:	0c36      	lsrs	r6, r6, #16
 80009b8:	0c1f      	lsrs	r7, r3, #16
 80009ba:	0033      	movs	r3, r6
 80009bc:	0c01      	lsrs	r1, r0, #16
 80009be:	0400      	lsls	r0, r0, #16
 80009c0:	0c00      	lsrs	r0, r0, #16
 80009c2:	4343      	muls	r3, r0
 80009c4:	4698      	mov	r8, r3
 80009c6:	0003      	movs	r3, r0
 80009c8:	437b      	muls	r3, r7
 80009ca:	4699      	mov	r9, r3
 80009cc:	0033      	movs	r3, r6
 80009ce:	434b      	muls	r3, r1
 80009d0:	469c      	mov	ip, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	000d      	movs	r5, r1
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	469a      	mov	sl, r3
 80009da:	437d      	muls	r5, r7
 80009dc:	44cc      	add	ip, r9
 80009de:	44d4      	add	ip, sl
 80009e0:	9500      	str	r5, [sp, #0]
 80009e2:	45e1      	cmp	r9, ip
 80009e4:	d904      	bls.n	80009f0 <__aeabi_dmul+0x1b8>
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	025b      	lsls	r3, r3, #9
 80009ea:	4699      	mov	r9, r3
 80009ec:	444d      	add	r5, r9
 80009ee:	9500      	str	r5, [sp, #0]
 80009f0:	4663      	mov	r3, ip
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	001d      	movs	r5, r3
 80009f6:	4663      	mov	r3, ip
 80009f8:	041b      	lsls	r3, r3, #16
 80009fa:	469c      	mov	ip, r3
 80009fc:	4643      	mov	r3, r8
 80009fe:	041b      	lsls	r3, r3, #16
 8000a00:	0c1b      	lsrs	r3, r3, #16
 8000a02:	4698      	mov	r8, r3
 8000a04:	4663      	mov	r3, ip
 8000a06:	4443      	add	r3, r8
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	0c23      	lsrs	r3, r4, #16
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	0033      	movs	r3, r6
 8000a10:	0424      	lsls	r4, r4, #16
 8000a12:	0c24      	lsrs	r4, r4, #16
 8000a14:	4363      	muls	r3, r4
 8000a16:	469c      	mov	ip, r3
 8000a18:	0023      	movs	r3, r4
 8000a1a:	437b      	muls	r3, r7
 8000a1c:	4699      	mov	r9, r3
 8000a1e:	4643      	mov	r3, r8
 8000a20:	435e      	muls	r6, r3
 8000a22:	435f      	muls	r7, r3
 8000a24:	444e      	add	r6, r9
 8000a26:	4663      	mov	r3, ip
 8000a28:	46b2      	mov	sl, r6
 8000a2a:	0c1e      	lsrs	r6, r3, #16
 8000a2c:	4456      	add	r6, sl
 8000a2e:	45b1      	cmp	r9, r6
 8000a30:	d903      	bls.n	8000a3a <__aeabi_dmul+0x202>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	025b      	lsls	r3, r3, #9
 8000a36:	4699      	mov	r9, r3
 8000a38:	444f      	add	r7, r9
 8000a3a:	0c33      	lsrs	r3, r6, #16
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	003b      	movs	r3, r7
 8000a40:	444b      	add	r3, r9
 8000a42:	9305      	str	r3, [sp, #20]
 8000a44:	4663      	mov	r3, ip
 8000a46:	46ac      	mov	ip, r5
 8000a48:	041f      	lsls	r7, r3, #16
 8000a4a:	0c3f      	lsrs	r7, r7, #16
 8000a4c:	0436      	lsls	r6, r6, #16
 8000a4e:	19f6      	adds	r6, r6, r7
 8000a50:	44b4      	add	ip, r6
 8000a52:	4663      	mov	r3, ip
 8000a54:	9304      	str	r3, [sp, #16]
 8000a56:	465b      	mov	r3, fp
 8000a58:	0c1b      	lsrs	r3, r3, #16
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	465b      	mov	r3, fp
 8000a5e:	041f      	lsls	r7, r3, #16
 8000a60:	0c3f      	lsrs	r7, r7, #16
 8000a62:	003b      	movs	r3, r7
 8000a64:	4343      	muls	r3, r0
 8000a66:	4699      	mov	r9, r3
 8000a68:	4663      	mov	r3, ip
 8000a6a:	4343      	muls	r3, r0
 8000a6c:	469a      	mov	sl, r3
 8000a6e:	464b      	mov	r3, r9
 8000a70:	4660      	mov	r0, ip
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	469b      	mov	fp, r3
 8000a76:	4348      	muls	r0, r1
 8000a78:	4379      	muls	r1, r7
 8000a7a:	4451      	add	r1, sl
 8000a7c:	4459      	add	r1, fp
 8000a7e:	458a      	cmp	sl, r1
 8000a80:	d903      	bls.n	8000a8a <__aeabi_dmul+0x252>
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	025b      	lsls	r3, r3, #9
 8000a86:	469a      	mov	sl, r3
 8000a88:	4450      	add	r0, sl
 8000a8a:	0c0b      	lsrs	r3, r1, #16
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	464b      	mov	r3, r9
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	4699      	mov	r9, r3
 8000a96:	003b      	movs	r3, r7
 8000a98:	4363      	muls	r3, r4
 8000a9a:	0409      	lsls	r1, r1, #16
 8000a9c:	4645      	mov	r5, r8
 8000a9e:	4449      	add	r1, r9
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	435c      	muls	r4, r3
 8000aa6:	436b      	muls	r3, r5
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	4698      	mov	r8, r3
 8000ab0:	436f      	muls	r7, r5
 8000ab2:	193f      	adds	r7, r7, r4
 8000ab4:	4447      	add	r7, r8
 8000ab6:	4450      	add	r0, sl
 8000ab8:	42bc      	cmp	r4, r7
 8000aba:	d903      	bls.n	8000ac4 <__aeabi_dmul+0x28c>
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	4698      	mov	r8, r3
 8000ac2:	44c4      	add	ip, r8
 8000ac4:	9b04      	ldr	r3, [sp, #16]
 8000ac6:	9d00      	ldr	r5, [sp, #0]
 8000ac8:	4698      	mov	r8, r3
 8000aca:	4445      	add	r5, r8
 8000acc:	42b5      	cmp	r5, r6
 8000ace:	41b6      	sbcs	r6, r6
 8000ad0:	4273      	negs	r3, r6
 8000ad2:	4698      	mov	r8, r3
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	041e      	lsls	r6, r3, #16
 8000ad8:	9b05      	ldr	r3, [sp, #20]
 8000ada:	043c      	lsls	r4, r7, #16
 8000adc:	4699      	mov	r9, r3
 8000ade:	0c36      	lsrs	r6, r6, #16
 8000ae0:	19a4      	adds	r4, r4, r6
 8000ae2:	444c      	add	r4, r9
 8000ae4:	46a1      	mov	r9, r4
 8000ae6:	4683      	mov	fp, r0
 8000ae8:	186e      	adds	r6, r5, r1
 8000aea:	44c1      	add	r9, r8
 8000aec:	428e      	cmp	r6, r1
 8000aee:	4189      	sbcs	r1, r1
 8000af0:	44cb      	add	fp, r9
 8000af2:	465d      	mov	r5, fp
 8000af4:	4249      	negs	r1, r1
 8000af6:	186d      	adds	r5, r5, r1
 8000af8:	429c      	cmp	r4, r3
 8000afa:	41a4      	sbcs	r4, r4
 8000afc:	45c1      	cmp	r9, r8
 8000afe:	419b      	sbcs	r3, r3
 8000b00:	4583      	cmp	fp, r0
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	428d      	cmp	r5, r1
 8000b06:	4189      	sbcs	r1, r1
 8000b08:	425b      	negs	r3, r3
 8000b0a:	4264      	negs	r4, r4
 8000b0c:	431c      	orrs	r4, r3
 8000b0e:	4240      	negs	r0, r0
 8000b10:	9b03      	ldr	r3, [sp, #12]
 8000b12:	4249      	negs	r1, r1
 8000b14:	4301      	orrs	r1, r0
 8000b16:	0270      	lsls	r0, r6, #9
 8000b18:	0c3f      	lsrs	r7, r7, #16
 8000b1a:	4318      	orrs	r0, r3
 8000b1c:	19e4      	adds	r4, r4, r7
 8000b1e:	1e47      	subs	r7, r0, #1
 8000b20:	41b8      	sbcs	r0, r7
 8000b22:	1864      	adds	r4, r4, r1
 8000b24:	4464      	add	r4, ip
 8000b26:	0df6      	lsrs	r6, r6, #23
 8000b28:	0261      	lsls	r1, r4, #9
 8000b2a:	4330      	orrs	r0, r6
 8000b2c:	0dec      	lsrs	r4, r5, #23
 8000b2e:	026e      	lsls	r6, r5, #9
 8000b30:	430c      	orrs	r4, r1
 8000b32:	4330      	orrs	r0, r6
 8000b34:	01c9      	lsls	r1, r1, #7
 8000b36:	d400      	bmi.n	8000b3a <__aeabi_dmul+0x302>
 8000b38:	e0f1      	b.n	8000d1e <__aeabi_dmul+0x4e6>
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	0843      	lsrs	r3, r0, #1
 8000b3e:	4001      	ands	r1, r0
 8000b40:	430b      	orrs	r3, r1
 8000b42:	07e0      	lsls	r0, r4, #31
 8000b44:	4318      	orrs	r0, r3
 8000b46:	0864      	lsrs	r4, r4, #1
 8000b48:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <__aeabi_dmul+0x368>)
 8000b4a:	9b02      	ldr	r3, [sp, #8]
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	4463      	add	r3, ip
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_dmul+0x31e>
 8000b54:	e097      	b.n	8000c86 <__aeabi_dmul+0x44e>
 8000b56:	0741      	lsls	r1, r0, #29
 8000b58:	d009      	beq.n	8000b6e <__aeabi_dmul+0x336>
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	4001      	ands	r1, r0
 8000b5e:	2904      	cmp	r1, #4
 8000b60:	d005      	beq.n	8000b6e <__aeabi_dmul+0x336>
 8000b62:	1d01      	adds	r1, r0, #4
 8000b64:	4281      	cmp	r1, r0
 8000b66:	4180      	sbcs	r0, r0
 8000b68:	4240      	negs	r0, r0
 8000b6a:	1824      	adds	r4, r4, r0
 8000b6c:	0008      	movs	r0, r1
 8000b6e:	01e1      	lsls	r1, r4, #7
 8000b70:	d506      	bpl.n	8000b80 <__aeabi_dmul+0x348>
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	00c9      	lsls	r1, r1, #3
 8000b76:	468c      	mov	ip, r1
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <__aeabi_dmul+0x36c>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	9b02      	ldr	r3, [sp, #8]
 8000b7e:	4463      	add	r3, ip
 8000b80:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <__aeabi_dmul+0x370>)
 8000b82:	428b      	cmp	r3, r1
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dmul+0x350>
 8000b86:	e710      	b.n	80009aa <__aeabi_dmul+0x172>
 8000b88:	0761      	lsls	r1, r4, #29
 8000b8a:	08c5      	lsrs	r5, r0, #3
 8000b8c:	0264      	lsls	r4, r4, #9
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	430d      	orrs	r5, r1
 8000b92:	0b24      	lsrs	r4, r4, #12
 8000b94:	0d5b      	lsrs	r3, r3, #21
 8000b96:	e6c1      	b.n	800091c <__aeabi_dmul+0xe4>
 8000b98:	000007ff 	.word	0x000007ff
 8000b9c:	fffffc01 	.word	0xfffffc01
 8000ba0:	000003ff 	.word	0x000003ff
 8000ba4:	feffffff 	.word	0xfeffffff
 8000ba8:	000007fe 	.word	0x000007fe
 8000bac:	464b      	mov	r3, r9
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	d059      	beq.n	8000c66 <__aeabi_dmul+0x42e>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dmul+0x380>
 8000bb6:	e0a3      	b.n	8000d00 <__aeabi_dmul+0x4c8>
 8000bb8:	0020      	movs	r0, r4
 8000bba:	f7ff fb31 	bl	8000220 <__clzsi2>
 8000bbe:	0001      	movs	r1, r0
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	390b      	subs	r1, #11
 8000bc4:	221d      	movs	r2, #29
 8000bc6:	1a52      	subs	r2, r2, r1
 8000bc8:	4649      	mov	r1, r9
 8000bca:	0018      	movs	r0, r3
 8000bcc:	40d1      	lsrs	r1, r2
 8000bce:	464a      	mov	r2, r9
 8000bd0:	3808      	subs	r0, #8
 8000bd2:	4082      	lsls	r2, r0
 8000bd4:	4084      	lsls	r4, r0
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	430c      	orrs	r4, r1
 8000bda:	4a74      	ldr	r2, [pc, #464]	; (8000dac <__aeabi_dmul+0x574>)
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	4694      	mov	ip, r2
 8000be0:	4642      	mov	r2, r8
 8000be2:	4463      	add	r3, ip
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	9b01      	ldr	r3, [sp, #4]
 8000be8:	407a      	eors	r2, r7
 8000bea:	3301      	adds	r3, #1
 8000bec:	2100      	movs	r1, #0
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	9302      	str	r3, [sp, #8]
 8000bf2:	2e0a      	cmp	r6, #10
 8000bf4:	dd00      	ble.n	8000bf8 <__aeabi_dmul+0x3c0>
 8000bf6:	e667      	b.n	80008c8 <__aeabi_dmul+0x90>
 8000bf8:	e683      	b.n	8000902 <__aeabi_dmul+0xca>
 8000bfa:	465b      	mov	r3, fp
 8000bfc:	4303      	orrs	r3, r0
 8000bfe:	469a      	mov	sl, r3
 8000c00:	d02a      	beq.n	8000c58 <__aeabi_dmul+0x420>
 8000c02:	465b      	mov	r3, fp
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d06d      	beq.n	8000ce4 <__aeabi_dmul+0x4ac>
 8000c08:	4658      	mov	r0, fp
 8000c0a:	f7ff fb09 	bl	8000220 <__clzsi2>
 8000c0e:	0001      	movs	r1, r0
 8000c10:	0003      	movs	r3, r0
 8000c12:	390b      	subs	r1, #11
 8000c14:	221d      	movs	r2, #29
 8000c16:	1a52      	subs	r2, r2, r1
 8000c18:	0021      	movs	r1, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	465d      	mov	r5, fp
 8000c1e:	40d1      	lsrs	r1, r2
 8000c20:	3808      	subs	r0, #8
 8000c22:	4085      	lsls	r5, r0
 8000c24:	000a      	movs	r2, r1
 8000c26:	4084      	lsls	r4, r0
 8000c28:	432a      	orrs	r2, r5
 8000c2a:	4693      	mov	fp, r2
 8000c2c:	46a2      	mov	sl, r4
 8000c2e:	4d5f      	ldr	r5, [pc, #380]	; (8000dac <__aeabi_dmul+0x574>)
 8000c30:	2600      	movs	r6, #0
 8000c32:	1aed      	subs	r5, r5, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	e625      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c3a:	465b      	mov	r3, fp
 8000c3c:	4303      	orrs	r3, r0
 8000c3e:	469a      	mov	sl, r3
 8000c40:	d105      	bne.n	8000c4e <__aeabi_dmul+0x416>
 8000c42:	2300      	movs	r3, #0
 8000c44:	469b      	mov	fp, r3
 8000c46:	3302      	adds	r3, #2
 8000c48:	2608      	movs	r6, #8
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	e61b      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	4682      	mov	sl, r0
 8000c52:	260c      	movs	r6, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	e616      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	469b      	mov	fp, r3
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	2604      	movs	r6, #4
 8000c60:	2500      	movs	r5, #0
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	e60f      	b.n	8000886 <__aeabi_dmul+0x4e>
 8000c66:	4642      	mov	r2, r8
 8000c68:	3301      	adds	r3, #1
 8000c6a:	9501      	str	r5, [sp, #4]
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	9b01      	ldr	r3, [sp, #4]
 8000c70:	407a      	eors	r2, r7
 8000c72:	3301      	adds	r3, #1
 8000c74:	2400      	movs	r4, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2e0a      	cmp	r6, #10
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dmul+0x44c>
 8000c82:	e621      	b.n	80008c8 <__aeabi_dmul+0x90>
 8000c84:	e63d      	b.n	8000902 <__aeabi_dmul+0xca>
 8000c86:	2101      	movs	r1, #1
 8000c88:	1ac9      	subs	r1, r1, r3
 8000c8a:	2938      	cmp	r1, #56	; 0x38
 8000c8c:	dd00      	ble.n	8000c90 <__aeabi_dmul+0x458>
 8000c8e:	e642      	b.n	8000916 <__aeabi_dmul+0xde>
 8000c90:	291f      	cmp	r1, #31
 8000c92:	dd47      	ble.n	8000d24 <__aeabi_dmul+0x4ec>
 8000c94:	261f      	movs	r6, #31
 8000c96:	0025      	movs	r5, r4
 8000c98:	4276      	negs	r6, r6
 8000c9a:	1af3      	subs	r3, r6, r3
 8000c9c:	40dd      	lsrs	r5, r3
 8000c9e:	002b      	movs	r3, r5
 8000ca0:	2920      	cmp	r1, #32
 8000ca2:	d005      	beq.n	8000cb0 <__aeabi_dmul+0x478>
 8000ca4:	4942      	ldr	r1, [pc, #264]	; (8000db0 <__aeabi_dmul+0x578>)
 8000ca6:	9d02      	ldr	r5, [sp, #8]
 8000ca8:	468c      	mov	ip, r1
 8000caa:	4465      	add	r5, ip
 8000cac:	40ac      	lsls	r4, r5
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	1e41      	subs	r1, r0, #1
 8000cb2:	4188      	sbcs	r0, r1
 8000cb4:	4318      	orrs	r0, r3
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	001d      	movs	r5, r3
 8000cba:	2400      	movs	r4, #0
 8000cbc:	4005      	ands	r5, r0
 8000cbe:	4203      	tst	r3, r0
 8000cc0:	d04a      	beq.n	8000d58 <__aeabi_dmul+0x520>
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	2400      	movs	r4, #0
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d042      	beq.n	8000d52 <__aeabi_dmul+0x51a>
 8000ccc:	1d03      	adds	r3, r0, #4
 8000cce:	4283      	cmp	r3, r0
 8000cd0:	4180      	sbcs	r0, r0
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	1824      	adds	r4, r4, r0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	0223      	lsls	r3, r4, #8
 8000cda:	d53a      	bpl.n	8000d52 <__aeabi_dmul+0x51a>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e61b      	b.n	800091c <__aeabi_dmul+0xe4>
 8000ce4:	f7ff fa9c 	bl	8000220 <__clzsi2>
 8000ce8:	0001      	movs	r1, r0
 8000cea:	0003      	movs	r3, r0
 8000cec:	3115      	adds	r1, #21
 8000cee:	3320      	adds	r3, #32
 8000cf0:	291c      	cmp	r1, #28
 8000cf2:	dd8f      	ble.n	8000c14 <__aeabi_dmul+0x3dc>
 8000cf4:	3808      	subs	r0, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4084      	lsls	r4, r0
 8000cfa:	4692      	mov	sl, r2
 8000cfc:	46a3      	mov	fp, r4
 8000cfe:	e796      	b.n	8000c2e <__aeabi_dmul+0x3f6>
 8000d00:	f7ff fa8e 	bl	8000220 <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	0003      	movs	r3, r0
 8000d08:	3115      	adds	r1, #21
 8000d0a:	3320      	adds	r3, #32
 8000d0c:	291c      	cmp	r1, #28
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_dmul+0x4da>
 8000d10:	e758      	b.n	8000bc4 <__aeabi_dmul+0x38c>
 8000d12:	0002      	movs	r2, r0
 8000d14:	464c      	mov	r4, r9
 8000d16:	3a08      	subs	r2, #8
 8000d18:	2000      	movs	r0, #0
 8000d1a:	4094      	lsls	r4, r2
 8000d1c:	e75d      	b.n	8000bda <__aeabi_dmul+0x3a2>
 8000d1e:	9b01      	ldr	r3, [sp, #4]
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	e711      	b.n	8000b48 <__aeabi_dmul+0x310>
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <__aeabi_dmul+0x57c>)
 8000d26:	0026      	movs	r6, r4
 8000d28:	469c      	mov	ip, r3
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	9d02      	ldr	r5, [sp, #8]
 8000d2e:	40cb      	lsrs	r3, r1
 8000d30:	4465      	add	r5, ip
 8000d32:	40ae      	lsls	r6, r5
 8000d34:	431e      	orrs	r6, r3
 8000d36:	0003      	movs	r3, r0
 8000d38:	40ab      	lsls	r3, r5
 8000d3a:	1e58      	subs	r0, r3, #1
 8000d3c:	4183      	sbcs	r3, r0
 8000d3e:	0030      	movs	r0, r6
 8000d40:	4318      	orrs	r0, r3
 8000d42:	40cc      	lsrs	r4, r1
 8000d44:	0743      	lsls	r3, r0, #29
 8000d46:	d0c7      	beq.n	8000cd8 <__aeabi_dmul+0x4a0>
 8000d48:	230f      	movs	r3, #15
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d1bd      	bne.n	8000ccc <__aeabi_dmul+0x494>
 8000d50:	e7c2      	b.n	8000cd8 <__aeabi_dmul+0x4a0>
 8000d52:	0765      	lsls	r5, r4, #29
 8000d54:	0264      	lsls	r4, r4, #9
 8000d56:	0b24      	lsrs	r4, r4, #12
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	4305      	orrs	r5, r0
 8000d5e:	e5dd      	b.n	800091c <__aeabi_dmul+0xe4>
 8000d60:	2500      	movs	r5, #0
 8000d62:	2302      	movs	r3, #2
 8000d64:	2e0f      	cmp	r6, #15
 8000d66:	d10c      	bne.n	8000d82 <__aeabi_dmul+0x54a>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	465b      	mov	r3, fp
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	4223      	tst	r3, r4
 8000d70:	d00e      	beq.n	8000d90 <__aeabi_dmul+0x558>
 8000d72:	4221      	tst	r1, r4
 8000d74:	d10c      	bne.n	8000d90 <__aeabi_dmul+0x558>
 8000d76:	430c      	orrs	r4, r1
 8000d78:	0324      	lsls	r4, r4, #12
 8000d7a:	003a      	movs	r2, r7
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <__aeabi_dmul+0x580>)
 8000d7e:	0b24      	lsrs	r4, r4, #12
 8000d80:	e5cc      	b.n	800091c <__aeabi_dmul+0xe4>
 8000d82:	2e0b      	cmp	r6, #11
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dmul+0x550>
 8000d86:	e5a2      	b.n	80008ce <__aeabi_dmul+0x96>
 8000d88:	468b      	mov	fp, r1
 8000d8a:	46aa      	mov	sl, r5
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	e5f7      	b.n	8000980 <__aeabi_dmul+0x148>
 8000d90:	2480      	movs	r4, #128	; 0x80
 8000d92:	465b      	mov	r3, fp
 8000d94:	0324      	lsls	r4, r4, #12
 8000d96:	431c      	orrs	r4, r3
 8000d98:	0324      	lsls	r4, r4, #12
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	4655      	mov	r5, sl
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <__aeabi_dmul+0x580>)
 8000da0:	0b24      	lsrs	r4, r4, #12
 8000da2:	e5bb      	b.n	800091c <__aeabi_dmul+0xe4>
 8000da4:	464d      	mov	r5, r9
 8000da6:	0021      	movs	r1, r4
 8000da8:	2303      	movs	r3, #3
 8000daa:	e7db      	b.n	8000d64 <__aeabi_dmul+0x52c>
 8000dac:	fffffc0d 	.word	0xfffffc0d
 8000db0:	0000043e 	.word	0x0000043e
 8000db4:	0000041e 	.word	0x0000041e
 8000db8:	000007ff 	.word	0x000007ff

08000dbc <__aeabi_ui2d>:
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	1e04      	subs	r4, r0, #0
 8000dc0:	d010      	beq.n	8000de4 <__aeabi_ui2d+0x28>
 8000dc2:	f7ff fa2d 	bl	8000220 <__clzsi2>
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <__aeabi_ui2d+0x48>)
 8000dc8:	1a1b      	subs	r3, r3, r0
 8000dca:	280a      	cmp	r0, #10
 8000dcc:	dc11      	bgt.n	8000df2 <__aeabi_ui2d+0x36>
 8000dce:	220b      	movs	r2, #11
 8000dd0:	0021      	movs	r1, r4
 8000dd2:	1a12      	subs	r2, r2, r0
 8000dd4:	40d1      	lsrs	r1, r2
 8000dd6:	3015      	adds	r0, #21
 8000dd8:	030a      	lsls	r2, r1, #12
 8000dda:	055b      	lsls	r3, r3, #21
 8000ddc:	4084      	lsls	r4, r0
 8000dde:	0b12      	lsrs	r2, r2, #12
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	e001      	b.n	8000de8 <__aeabi_ui2d+0x2c>
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	051b      	lsls	r3, r3, #20
 8000dea:	4313      	orrs	r3, r2
 8000dec:	0020      	movs	r0, r4
 8000dee:	0019      	movs	r1, r3
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	0022      	movs	r2, r4
 8000df4:	380b      	subs	r0, #11
 8000df6:	4082      	lsls	r2, r0
 8000df8:	055b      	lsls	r3, r3, #21
 8000dfa:	0312      	lsls	r2, r2, #12
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	0b12      	lsrs	r2, r2, #12
 8000e00:	0d5b      	lsrs	r3, r3, #21
 8000e02:	e7f1      	b.n	8000de8 <__aeabi_ui2d+0x2c>
 8000e04:	0000041e 	.word	0x0000041e

08000e08 <__aeabi_d2f>:
 8000e08:	0002      	movs	r2, r0
 8000e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0c:	004b      	lsls	r3, r1, #1
 8000e0e:	030d      	lsls	r5, r1, #12
 8000e10:	0f40      	lsrs	r0, r0, #29
 8000e12:	0d5b      	lsrs	r3, r3, #21
 8000e14:	0fcc      	lsrs	r4, r1, #31
 8000e16:	0a6d      	lsrs	r5, r5, #9
 8000e18:	493a      	ldr	r1, [pc, #232]	; (8000f04 <__aeabi_d2f+0xfc>)
 8000e1a:	4305      	orrs	r5, r0
 8000e1c:	1c58      	adds	r0, r3, #1
 8000e1e:	00d7      	lsls	r7, r2, #3
 8000e20:	4208      	tst	r0, r1
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_d2f+0x32>
 8000e24:	4938      	ldr	r1, [pc, #224]	; (8000f08 <__aeabi_d2f+0x100>)
 8000e26:	1859      	adds	r1, r3, r1
 8000e28:	29fe      	cmp	r1, #254	; 0xfe
 8000e2a:	dd16      	ble.n	8000e5a <__aeabi_d2f+0x52>
 8000e2c:	20ff      	movs	r0, #255	; 0xff
 8000e2e:	2200      	movs	r2, #0
 8000e30:	05c0      	lsls	r0, r0, #23
 8000e32:	4310      	orrs	r0, r2
 8000e34:	07e4      	lsls	r4, r4, #31
 8000e36:	4320      	orrs	r0, r4
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d106      	bne.n	8000e4c <__aeabi_d2f+0x44>
 8000e3e:	433d      	orrs	r5, r7
 8000e40:	d026      	beq.n	8000e90 <__aeabi_d2f+0x88>
 8000e42:	2205      	movs	r2, #5
 8000e44:	0192      	lsls	r2, r2, #6
 8000e46:	0a52      	lsrs	r2, r2, #9
 8000e48:	b2d8      	uxtb	r0, r3
 8000e4a:	e7f1      	b.n	8000e30 <__aeabi_d2f+0x28>
 8000e4c:	432f      	orrs	r7, r5
 8000e4e:	d0ed      	beq.n	8000e2c <__aeabi_d2f+0x24>
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	03d2      	lsls	r2, r2, #15
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	432a      	orrs	r2, r5
 8000e58:	e7ea      	b.n	8000e30 <__aeabi_d2f+0x28>
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	dd1b      	ble.n	8000e96 <__aeabi_d2f+0x8e>
 8000e5e:	0192      	lsls	r2, r2, #6
 8000e60:	1e50      	subs	r0, r2, #1
 8000e62:	4182      	sbcs	r2, r0
 8000e64:	00ed      	lsls	r5, r5, #3
 8000e66:	0f7f      	lsrs	r7, r7, #29
 8000e68:	432a      	orrs	r2, r5
 8000e6a:	433a      	orrs	r2, r7
 8000e6c:	0753      	lsls	r3, r2, #29
 8000e6e:	d047      	beq.n	8000f00 <__aeabi_d2f+0xf8>
 8000e70:	230f      	movs	r3, #15
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d000      	beq.n	8000e7a <__aeabi_d2f+0x72>
 8000e78:	3204      	adds	r2, #4
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	04db      	lsls	r3, r3, #19
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d03e      	beq.n	8000f00 <__aeabi_d2f+0xf8>
 8000e82:	1c48      	adds	r0, r1, #1
 8000e84:	29fe      	cmp	r1, #254	; 0xfe
 8000e86:	d0d1      	beq.n	8000e2c <__aeabi_d2f+0x24>
 8000e88:	0192      	lsls	r2, r2, #6
 8000e8a:	0a52      	lsrs	r2, r2, #9
 8000e8c:	b2c0      	uxtb	r0, r0
 8000e8e:	e7cf      	b.n	8000e30 <__aeabi_d2f+0x28>
 8000e90:	2000      	movs	r0, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	e7cc      	b.n	8000e30 <__aeabi_d2f+0x28>
 8000e96:	000a      	movs	r2, r1
 8000e98:	3217      	adds	r2, #23
 8000e9a:	db2f      	blt.n	8000efc <__aeabi_d2f+0xf4>
 8000e9c:	2680      	movs	r6, #128	; 0x80
 8000e9e:	0436      	lsls	r6, r6, #16
 8000ea0:	432e      	orrs	r6, r5
 8000ea2:	251e      	movs	r5, #30
 8000ea4:	1a6d      	subs	r5, r5, r1
 8000ea6:	2d1f      	cmp	r5, #31
 8000ea8:	dd11      	ble.n	8000ece <__aeabi_d2f+0xc6>
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4252      	negs	r2, r2
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	0031      	movs	r1, r6
 8000eb2:	40d1      	lsrs	r1, r2
 8000eb4:	2d20      	cmp	r5, #32
 8000eb6:	d004      	beq.n	8000ec2 <__aeabi_d2f+0xba>
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <__aeabi_d2f+0x104>)
 8000eba:	4694      	mov	ip, r2
 8000ebc:	4463      	add	r3, ip
 8000ebe:	409e      	lsls	r6, r3
 8000ec0:	4337      	orrs	r7, r6
 8000ec2:	003a      	movs	r2, r7
 8000ec4:	1e53      	subs	r3, r2, #1
 8000ec6:	419a      	sbcs	r2, r3
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	2100      	movs	r1, #0
 8000ecc:	e7ce      	b.n	8000e6c <__aeabi_d2f+0x64>
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <__aeabi_d2f+0x108>)
 8000ed0:	0038      	movs	r0, r7
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	4463      	add	r3, ip
 8000ed6:	4098      	lsls	r0, r3
 8000ed8:	003a      	movs	r2, r7
 8000eda:	1e41      	subs	r1, r0, #1
 8000edc:	4188      	sbcs	r0, r1
 8000ede:	409e      	lsls	r6, r3
 8000ee0:	40ea      	lsrs	r2, r5
 8000ee2:	4330      	orrs	r0, r6
 8000ee4:	4302      	orrs	r2, r0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	0753      	lsls	r3, r2, #29
 8000eea:	d1c1      	bne.n	8000e70 <__aeabi_d2f+0x68>
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0013      	movs	r3, r2
 8000ef0:	04c9      	lsls	r1, r1, #19
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	420a      	tst	r2, r1
 8000ef8:	d1c6      	bne.n	8000e88 <__aeabi_d2f+0x80>
 8000efa:	e7a3      	b.n	8000e44 <__aeabi_d2f+0x3c>
 8000efc:	2300      	movs	r3, #0
 8000efe:	e7a0      	b.n	8000e42 <__aeabi_d2f+0x3a>
 8000f00:	000b      	movs	r3, r1
 8000f02:	e79f      	b.n	8000e44 <__aeabi_d2f+0x3c>
 8000f04:	000007fe 	.word	0x000007fe
 8000f08:	fffffc80 	.word	0xfffffc80
 8000f0c:	fffffca2 	.word	0xfffffca2
 8000f10:	fffffc82 	.word	0xfffffc82

08000f14 <led_init>:
{
	uint32_t odr = READ_REG(GPIOx->ODR);
	WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
}

void led_init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]

	for (i=0; i< LED_undefined; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e007      	b.n	8000f34 <led_init+0x20>
		LEDs[i] = LEDstate_SLOW;
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <led_init+0x34>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	18d3      	adds	r3, r2, r3
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	701a      	strb	r2, [r3, #0]
	for (i=0; i< LED_undefined; i++) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3301      	adds	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d9f4      	bls.n	8000f24 <led_init+0x10>
	}

	led_update();
 8000f3a:	f000 f807 	bl	8000f4c <led_update>
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b002      	add	sp, #8
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000084 	.word	0x20000084

08000f4c <led_update>:

void led_update(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]


	/* calculate 3 independet cycle tickers for LED signaling */
	if (fastTick >= ONTIME_FAST) {
 8000f56:	4bd3      	ldr	r3, [pc, #844]	; (80012a4 <led_update+0x358>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d902      	bls.n	8000f64 <led_update+0x18>
		fastTick = 0;
 8000f5e:	4bd1      	ldr	r3, [pc, #836]	; (80012a4 <led_update+0x358>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		//fastTick++;
	}
	if (slowTick >= BLINK_CYCLE_SLOW) {
 8000f64:	4bd0      	ldr	r3, [pc, #832]	; (80012a8 <led_update+0x35c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b12      	cmp	r3, #18
 8000f6a:	d902      	bls.n	8000f72 <led_update+0x26>
		slowTick = 0;
 8000f6c:	4bce      	ldr	r3, [pc, #824]	; (80012a8 <led_update+0x35c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
	} else
	{
		//slowTick++;
	}
	if (ultraTick >= BLINK_CYCLE_ULTRA)
 8000f72:	4bce      	ldr	r3, [pc, #824]	; (80012ac <led_update+0x360>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	d902      	bls.n	8000f80 <led_update+0x34>
	{
		ultraTick = 0;
 8000f7a:	4bcc      	ldr	r3, [pc, #816]	; (80012ac <led_update+0x360>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
    }
	else
    {
        //ultraTick++;
    }
	if (flashTick >= BLINK_CYCLE_FLASH) {
 8000f80:	4bcb      	ldr	r3, [pc, #812]	; (80012b0 <led_update+0x364>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b1a      	cmp	r3, #26
 8000f86:	d902      	bls.n	8000f8e <led_update+0x42>
		flashTick = 0;
 8000f88:	4bc9      	ldr	r3, [pc, #804]	; (80012b0 <led_update+0x364>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

	/*
	 * enumerate all LEDs and set controlling IO Pin depending on IO Mapping table
	 * we have to consider IO Direction here (normally setting IO to 1 sets LED on
	 */
	for (i=0; i<LED_undefined; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	e1db      	b.n	800134c <led_update+0x400>
	{
		switch (LEDs[i])
 8000f94:	4ac7      	ldr	r2, [pc, #796]	; (80012b4 <led_update+0x368>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d900      	bls.n	8000fa2 <led_update+0x56>
 8000fa0:	e1d0      	b.n	8001344 <led_update+0x3f8>
 8000fa2:	009a      	lsls	r2, r3, #2
 8000fa4:	4bc4      	ldr	r3, [pc, #784]	; (80012b8 <led_update+0x36c>)
 8000fa6:	18d3      	adds	r3, r2, r3
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	469f      	mov	pc, r3
		{
			/* permanent on */
			case LEDstate_ON:
				if(LED_mapping[i].direction  == GPIO_NORMAL)
 8000fac:	4ac3      	ldr	r2, [pc, #780]	; (80012bc <led_update+0x370>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	18d3      	adds	r3, r2, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10a      	bne.n	8000fd2 <led_update+0x86>
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8000fbc:	4bbf      	ldr	r3, [pc, #764]	; (80012bc <led_update+0x370>)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	0052      	lsls	r2, r2, #1
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	48be      	ldr	r0, [pc, #760]	; (80012c0 <led_update+0x374>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	0019      	movs	r1, r3
 8000fcc:	f002 fc49 	bl	8003862 <HAL_GPIO_WritePin>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
				}
				break;
 8000fd0:	e1b9      	b.n	8001346 <led_update+0x3fa>
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8000fd2:	4bba      	ldr	r3, [pc, #744]	; (80012bc <led_update+0x370>)
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	0052      	lsls	r2, r2, #1
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	48b8      	ldr	r0, [pc, #736]	; (80012c0 <led_update+0x374>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	f002 fc3e 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8000fe6:	e1ae      	b.n	8001346 <led_update+0x3fa>
			/* permanent off */
			case LEDstate_OFF:
				if(LED_mapping[i].direction == GPIO_NORMAL)
 8000fe8:	4ab4      	ldr	r2, [pc, #720]	; (80012bc <led_update+0x370>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	18d3      	adds	r3, r2, r3
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10a      	bne.n	800100e <led_update+0xc2>
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8000ff8:	4bb0      	ldr	r3, [pc, #704]	; (80012bc <led_update+0x370>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	b29b      	uxth	r3, r3
 8001002:	48af      	ldr	r0, [pc, #700]	; (80012c0 <led_update+0x374>)
 8001004:	2200      	movs	r2, #0
 8001006:	0019      	movs	r1, r3
 8001008:	f002 fc2b 	bl	8003862 <HAL_GPIO_WritePin>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
				}
				break;
 800100c:	e19b      	b.n	8001346 <led_update+0x3fa>
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800100e:	4bab      	ldr	r3, [pc, #684]	; (80012bc <led_update+0x370>)
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	0052      	lsls	r2, r2, #1
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	b29b      	uxth	r3, r3
 8001018:	48a9      	ldr	r0, [pc, #676]	; (80012c0 <led_update+0x374>)
 800101a:	2201      	movs	r2, #1
 800101c:	0019      	movs	r1, r3
 800101e:	f002 fc20 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8001022:	e190      	b.n	8001346 <led_update+0x3fa>
			/* slow blinking ON/OFF 1:1 1,4s */
			case LEDstate_SLOW:
				/* one half is on the other off */
				if (slowTick < ONTIME_SLOW)
 8001024:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <led_update+0x35c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d81d      	bhi.n	8001068 <led_update+0x11c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 800102c:	4aa3      	ldr	r2, [pc, #652]	; (80012bc <led_update+0x370>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	18d3      	adds	r3, r2, r3
 8001034:	3301      	adds	r3, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <led_update+0x106>
					{

						//gpio->BSRR = LED_mapping[i].gpio;
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800103c:	4b9f      	ldr	r3, [pc, #636]	; (80012bc <led_update+0x370>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	0052      	lsls	r2, r2, #1
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	b29b      	uxth	r3, r3
 8001046:	489e      	ldr	r0, [pc, #632]	; (80012c0 <led_update+0x374>)
 8001048:	2201      	movs	r2, #1
 800104a:	0019      	movs	r1, r3
 800104c:	f002 fc09 	bl	8003862 <HAL_GPIO_WritePin>
						//gpio->BSRR = LED_mapping[i].gpio;
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
						//HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin, RESET);
					}
				}
				break;
 8001050:	e179      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001052:	4b9a      	ldr	r3, [pc, #616]	; (80012bc <led_update+0x370>)
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	0052      	lsls	r2, r2, #1
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4898      	ldr	r0, [pc, #608]	; (80012c0 <led_update+0x374>)
 800105e:	2200      	movs	r2, #0
 8001060:	0019      	movs	r1, r3
 8001062:	f002 fbfe 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8001066:	e16e      	b.n	8001346 <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 8001068:	4a94      	ldr	r2, [pc, #592]	; (80012bc <led_update+0x370>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	18d3      	adds	r3, r2, r3
 8001070:	3301      	adds	r3, #1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10a      	bne.n	800108e <led_update+0x142>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001078:	4b90      	ldr	r3, [pc, #576]	; (80012bc <led_update+0x370>)
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	0052      	lsls	r2, r2, #1
 800107e:	5cd3      	ldrb	r3, [r2, r3]
 8001080:	b29b      	uxth	r3, r3
 8001082:	488f      	ldr	r0, [pc, #572]	; (80012c0 <led_update+0x374>)
 8001084:	2200      	movs	r2, #0
 8001086:	0019      	movs	r1, r3
 8001088:	f002 fbeb 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 800108c:	e15b      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800108e:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <led_update+0x370>)
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	0052      	lsls	r2, r2, #1
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	b29b      	uxth	r3, r3
 8001098:	4889      	ldr	r0, [pc, #548]	; (80012c0 <led_update+0x374>)
 800109a:	2201      	movs	r2, #1
 800109c:	0019      	movs	r1, r3
 800109e:	f002 fbe0 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 80010a2:	e150      	b.n	8001346 <led_update+0x3fa>
				/* slow blinking OFF/ON 1:1 1,4s */
			case LEDstate_SLOW_ALT:
				if (slowTick < ONTIME_SLOW)
 80010a4:	4b80      	ldr	r3, [pc, #512]	; (80012a8 <led_update+0x35c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	d81d      	bhi.n	80010e8 <led_update+0x19c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80010ac:	4a83      	ldr	r2, [pc, #524]	; (80012bc <led_update+0x370>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	18d3      	adds	r3, r2, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <led_update+0x186>
					{

						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80010bc:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <led_update+0x370>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	0052      	lsls	r2, r2, #1
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	487e      	ldr	r0, [pc, #504]	; (80012c0 <led_update+0x374>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	0019      	movs	r1, r3
 80010cc:	f002 fbc9 	bl	8003862 <HAL_GPIO_WritePin>
					else
					{	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
						//HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin, SET);
					}
				}
				break;
 80010d0:	e139      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80010d2:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <led_update+0x370>)
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	0052      	lsls	r2, r2, #1
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4878      	ldr	r0, [pc, #480]	; (80012c0 <led_update+0x374>)
 80010de:	2201      	movs	r2, #1
 80010e0:	0019      	movs	r1, r3
 80010e2:	f002 fbbe 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 80010e6:	e12e      	b.n	8001346 <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80010e8:	4a74      	ldr	r2, [pc, #464]	; (80012bc <led_update+0x370>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	3301      	adds	r3, #1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10a      	bne.n	800110e <led_update+0x1c2>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <led_update+0x370>)
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	0052      	lsls	r2, r2, #1
 80010fe:	5cd3      	ldrb	r3, [r2, r3]
 8001100:	b29b      	uxth	r3, r3
 8001102:	486f      	ldr	r0, [pc, #444]	; (80012c0 <led_update+0x374>)
 8001104:	2201      	movs	r2, #1
 8001106:	0019      	movs	r1, r3
 8001108:	f002 fbab 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 800110c:	e11b      	b.n	8001346 <led_update+0x3fa>
					{	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800110e:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <led_update+0x370>)
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	0052      	lsls	r2, r2, #1
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4869      	ldr	r0, [pc, #420]	; (80012c0 <led_update+0x374>)
 800111a:	2200      	movs	r2, #0
 800111c:	0019      	movs	r1, r3
 800111e:	f002 fba0 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8001122:	e110      	b.n	8001346 <led_update+0x3fa>
			/* fast blinking ON/OFF 1:1 200ms */
			case LEDstate_FAST:
				if (fastTick < ONTIME_FLASH)
 8001124:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <led_update+0x358>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d11d      	bne.n	8001168 <led_update+0x21c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 800112c:	4a63      	ldr	r2, [pc, #396]	; (80012bc <led_update+0x370>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	3301      	adds	r3, #1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10a      	bne.n	8001152 <led_update+0x206>
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800113c:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <led_update+0x370>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	0052      	lsls	r2, r2, #1
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	b29b      	uxth	r3, r3
 8001146:	485e      	ldr	r0, [pc, #376]	; (80012c0 <led_update+0x374>)
 8001148:	2201      	movs	r2, #1
 800114a:	0019      	movs	r1, r3
 800114c:	f002 fb89 	bl	8003862 <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
					}
				}
				break;
 8001150:	e0f9      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001152:	4b5a      	ldr	r3, [pc, #360]	; (80012bc <led_update+0x370>)
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	0052      	lsls	r2, r2, #1
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4858      	ldr	r0, [pc, #352]	; (80012c0 <led_update+0x374>)
 800115e:	2200      	movs	r2, #0
 8001160:	0019      	movs	r1, r3
 8001162:	f002 fb7e 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8001166:	e0ee      	b.n	8001346 <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 8001168:	4a54      	ldr	r2, [pc, #336]	; (80012bc <led_update+0x370>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	3301      	adds	r3, #1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10a      	bne.n	800118e <led_update+0x242>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <led_update+0x370>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	b29b      	uxth	r3, r3
 8001182:	484f      	ldr	r0, [pc, #316]	; (80012c0 <led_update+0x374>)
 8001184:	2200      	movs	r2, #0
 8001186:	0019      	movs	r1, r3
 8001188:	f002 fb6b 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 800118c:	e0db      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800118e:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <led_update+0x370>)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	0052      	lsls	r2, r2, #1
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4849      	ldr	r0, [pc, #292]	; (80012c0 <led_update+0x374>)
 800119a:	2201      	movs	r2, #1
 800119c:	0019      	movs	r1, r3
 800119e:	f002 fb60 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 80011a2:	e0d0      	b.n	8001346 <led_update+0x3fa>

			/* fast blinking OFF/ON 1:1 200ms */
			case LEDstate_FAST_ALT:
				if (fastTick < ONTIME_FAST)
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <led_update+0x358>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d81d      	bhi.n	80011e8 <led_update+0x29c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80011ac:	4a43      	ldr	r2, [pc, #268]	; (80012bc <led_update+0x370>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10a      	bne.n	80011d2 <led_update+0x286>
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <led_update+0x370>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	483e      	ldr	r0, [pc, #248]	; (80012c0 <led_update+0x374>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	0019      	movs	r1, r3
 80011cc:	f002 fb49 	bl	8003862 <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
					}
				}
				break;
 80011d0:	e0b9      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <led_update+0x370>)
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	0052      	lsls	r2, r2, #1
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4838      	ldr	r0, [pc, #224]	; (80012c0 <led_update+0x374>)
 80011de:	2200      	movs	r2, #0
 80011e0:	0019      	movs	r1, r3
 80011e2:	f002 fb3e 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 80011e6:	e0ae      	b.n	8001346 <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <led_update+0x370>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10a      	bne.n	800120e <led_update+0x2c2>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <led_update+0x370>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	0052      	lsls	r2, r2, #1
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	b29b      	uxth	r3, r3
 8001202:	482f      	ldr	r0, [pc, #188]	; (80012c0 <led_update+0x374>)
 8001204:	2200      	movs	r2, #0
 8001206:	0019      	movs	r1, r3
 8001208:	f002 fb2b 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 800120c:	e09b      	b.n	8001346 <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <led_update+0x370>)
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	0052      	lsls	r2, r2, #1
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4829      	ldr	r0, [pc, #164]	; (80012c0 <led_update+0x374>)
 800121a:	2201      	movs	r2, #1
 800121c:	0019      	movs	r1, r3
 800121e:	f002 fb20 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8001222:	e090      	b.n	8001346 <led_update+0x3fa>
				 /* fast blinking OFF/ON 1:1 200ms */
			case LEDstate_ULTRA:
				if (ultraTick < ONTIME_ULTRA)
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <led_update+0x360>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b06      	cmp	r3, #6
 800122a:	d81d      	bhi.n	8001268 <led_update+0x31c>
				{
				    if (LED_mapping[i].direction == GPIO_NORMAL)
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <led_update+0x370>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	18d3      	adds	r3, r2, r3
 8001234:	3301      	adds	r3, #1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10a      	bne.n	8001252 <led_update+0x306>
				    {
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <led_update+0x370>)
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	0052      	lsls	r2, r2, #1
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	b29b      	uxth	r3, r3
 8001246:	481e      	ldr	r0, [pc, #120]	; (80012c0 <led_update+0x374>)
 8001248:	2201      	movs	r2, #1
 800124a:	0019      	movs	r1, r3
 800124c:	f002 fb09 	bl	8003862 <HAL_GPIO_WritePin>
				    else
				    {
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
				    }
				}
				break;
 8001250:	e079      	b.n	8001346 <led_update+0x3fa>
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <led_update+0x370>)
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	0052      	lsls	r2, r2, #1
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <led_update+0x374>)
 800125e:	2200      	movs	r2, #0
 8001260:	0019      	movs	r1, r3
 8001262:	f002 fafe 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 8001266:	e06e      	b.n	8001346 <led_update+0x3fa>
				    if (LED_mapping[i].direction == GPIO_NORMAL)
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <led_update+0x370>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	18d3      	adds	r3, r2, r3
 8001270:	3301      	adds	r3, #1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10a      	bne.n	800128e <led_update+0x342>
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <led_update+0x370>)
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	0052      	lsls	r2, r2, #1
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	b29b      	uxth	r3, r3
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <led_update+0x374>)
 8001284:	2200      	movs	r2, #0
 8001286:	0019      	movs	r1, r3
 8001288:	f002 faeb 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 800128c:	e05b      	b.n	8001346 <led_update+0x3fa>
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <led_update+0x370>)
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	0052      	lsls	r2, r2, #1
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	b29b      	uxth	r3, r3
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <led_update+0x374>)
 800129a:	2201      	movs	r2, #1
 800129c:	0019      	movs	r1, r3
 800129e:	f002 fae0 	bl	8003862 <HAL_GPIO_WritePin>
				break;
 80012a2:	e050      	b.n	8001346 <led_update+0x3fa>
 80012a4:	20000218 	.word	0x20000218
 80012a8:	20000220 	.word	0x20000220
 80012ac:	2000021c 	.word	0x2000021c
 80012b0:	20000224 	.word	0x20000224
 80012b4:	20000084 	.word	0x20000084
 80012b8:	08004d2c 	.word	0x08004d2c
 80012bc:	20000000 	.word	0x20000000
 80012c0:	50000400 	.word	0x50000400
				/* flashing 1:40 2s */
				case LEDstate_FLASH:
					if (flashTick < ONTIME_FLASH)
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <led_update+0x414>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d11d      	bne.n	8001308 <led_update+0x3bc>
					{
						if (LED_mapping[i].direction == GPIO_NORMAL)
 80012cc:	4a25      	ldr	r2, [pc, #148]	; (8001364 <led_update+0x418>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	18d3      	adds	r3, r2, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <led_update+0x3a6>
						{
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <led_update+0x418>)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	0052      	lsls	r2, r2, #1
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4820      	ldr	r0, [pc, #128]	; (8001368 <led_update+0x41c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	0019      	movs	r1, r3
 80012ec:	f002 fab9 	bl	8003862 <HAL_GPIO_WritePin>
						else
						{
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
						}
					}
					break;
 80012f0:	e029      	b.n	8001346 <led_update+0x3fa>
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <led_update+0x418>)
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	0052      	lsls	r2, r2, #1
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <led_update+0x41c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	0019      	movs	r1, r3
 8001302:	f002 faae 	bl	8003862 <HAL_GPIO_WritePin>
					break;
 8001306:	e01e      	b.n	8001346 <led_update+0x3fa>
						if (LED_mapping[i].direction == GPIO_NORMAL) {
 8001308:	4a16      	ldr	r2, [pc, #88]	; (8001364 <led_update+0x418>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	18d3      	adds	r3, r2, r3
 8001310:	3301      	adds	r3, #1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10a      	bne.n	800132e <led_update+0x3e2>
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <led_update+0x418>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	0052      	lsls	r2, r2, #1
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <led_update+0x41c>)
 8001324:	2200      	movs	r2, #0
 8001326:	0019      	movs	r1, r3
 8001328:	f002 fa9b 	bl	8003862 <HAL_GPIO_WritePin>
					break;
 800132c:	e00b      	b.n	8001346 <led_update+0x3fa>
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <led_update+0x418>)
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	b29b      	uxth	r3, r3
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <led_update+0x41c>)
 800133a:	2201      	movs	r2, #1
 800133c:	0019      	movs	r1, r3
 800133e:	f002 fa90 	bl	8003862 <HAL_GPIO_WritePin>
					break;
 8001342:	e000      	b.n	8001346 <led_update+0x3fa>
			default:
				//ASSERT(false);
				break;
 8001344:	46c0      	nop			; (mov r8, r8)
	for (i=0; i<LED_undefined; i++)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d800      	bhi.n	8001354 <led_update+0x408>
 8001352:	e61f      	b.n	8000f94 <led_update+0x48>
		}
	}
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	20000224 	.word	0x20000224
 8001364:	20000000 	.word	0x20000000
 8001368:	50000400 	.word	0x50000400

0800136c <led_setON>:

void led_setON(const LED_Name LED) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	701a      	strb	r2, [r3, #0]

	//ASSERT(LED < LED_undefined);
	assert_param(LED<LED_undefined);
	LEDs[LED] = LEDstate_ON;
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4a03      	ldr	r2, [pc, #12]	; (800138c <led_setON+0x20>)
 800137e:	2101      	movs	r1, #1
 8001380:	54d1      	strb	r1, [r2, r3]
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000084 	.word	0x20000084

08001390 <led_setOFF>:

void led_setOFF(const LED_Name LED) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	0002      	movs	r2, r0
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	701a      	strb	r2, [r3, #0]

	//ASSERT(LED < LED_undefined);
	assert_param(LED<LED_undefined);
	LEDs[LED] = LEDstate_OFF;
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <led_setOFF+0x20>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	54d1      	strb	r1, [r2, r3]
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000084 	.word	0x20000084

080013b4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <LL_AHB1_GRP1_EnableClock+0x28>)
 80013be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <LL_AHB1_GRP1_EnableClock+0x28>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <LL_AHB1_GRP1_EnableClock+0x28>)
 80013ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fd1d 	bl	8001e22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f888 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 f9e0 	bl	80017b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f0:	f000 f9ce 	bl	8001790 <MX_DMA_Init>
  MX_ADC1_Init();
 80013f4:	f000 f8c6 	bl	8001584 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013f8:	f000 f96e 	bl	80016d8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013fc:	f000 f92c 	bl	8001658 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <main+0xfc>)
 8001402:	0018      	movs	r0, r3
 8001404:	f003 f84e 	bl	80044a4 <HAL_TIM_Base_Start_IT>



  HAL_ADC_Init(&hadc1);
 8001408:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <main+0x100>)
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fef0 	bl	80021f0 <HAL_ADC_Init>
  //adcCalibration();
  HAL_DMA_Init(&hdma_adc1);
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <main+0x104>)
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fe42 	bl	800309c <HAL_DMA_Init>
 // LL_DMA_Init(&hdma_adc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 10);
 8001418:	4933      	ldr	r1, [pc, #204]	; (80014e8 <main+0x108>)
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <main+0x100>)
 800141c:	220a      	movs	r2, #10
 800141e:	0018      	movs	r0, r3
 8001420:	f001 f94a 	bl	80026b8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <main+0x100>)
 8001426:	0018      	movs	r0, r3
 8001428:	f001 f888 	bl	800253c <HAL_ADC_Start_IT>
  led_init();
 800142c:	f7ff fd72 	bl	8000f14 <led_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc1);
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <main+0x100>)
 8001432:	0018      	movs	r0, r3
 8001434:	f001 f882 	bl	800253c <HAL_ADC_Start_IT>
	 /* while(*ptr_dia)
	  {
		  printf("%s\r",*ptr_dia);
		  ptr_dia++;
	  }*/
	  if(Channel_0.count!=0)
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <main+0x10c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <main+0x7a>
	  {
		  Channel_0.count =0;
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <main+0x10c>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
		  counterButton++;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <main+0x110>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <main+0x110>)
 800144e:	601a      	str	r2, [r3, #0]
		  ptr_dia++;
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <main+0x114>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1d1a      	adds	r2, r3, #4
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <main+0x114>)
 8001458:	601a      	str	r2, [r3, #0]
	  }
	  if(Channel_1.count!=0)
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <main+0x118>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d010      	beq.n	8001484 <main+0xa4>
	  {
		  Channel_1.count =0;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <main+0x118>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
		  if(counterButton >0)counterButton--;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <main+0x110>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd04      	ble.n	800147a <main+0x9a>
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <main+0x110>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <main+0x110>)
 8001478:	601a      	str	r2, [r3, #0]
		  ptr_dia--;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <main+0x114>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1f1a      	subs	r2, r3, #4
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <main+0x114>)
 8001482:	601a      	str	r2, [r3, #0]
	  }
	  switch(counterButton)
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <main+0x110>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d019      	beq.n	80014c0 <main+0xe0>
 800148c:	dc22      	bgt.n	80014d4 <main+0xf4>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d002      	beq.n	8001498 <main+0xb8>
 8001492:	2b02      	cmp	r3, #2
 8001494:	d00a      	beq.n	80014ac <main+0xcc>
	  		  	  break;
	  	  case 3: led_setON(LED_YELLOW);
	  	  	  	  led_setOFF(LED_RED);
	  		  	  led_setOFF(LED_GREEN);
	  		  	  break;
	  	  default: break;
 8001496:	e01d      	b.n	80014d4 <main+0xf4>
	  	  case 1: led_setON(LED_GREEN);
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff ff67 	bl	800136c <led_setON>
	  	  	  	  led_setOFF(LED_RED);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff ff76 	bl	8001390 <led_setOFF>
	  	  	  	  led_setOFF(LED_YELLOW);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f7ff ff73 	bl	8001390 <led_setOFF>
	  	  	  	  break;
 80014aa:	e014      	b.n	80014d6 <main+0xf6>
	  	  case 2: led_setON(LED_RED);
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff ff5d 	bl	800136c <led_setON>
	  	  	  	  led_setOFF(LED_YELLOW);
 80014b2:	2002      	movs	r0, #2
 80014b4:	f7ff ff6c 	bl	8001390 <led_setOFF>
	  	  	  	  led_setOFF(LED_GREEN);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ff69 	bl	8001390 <led_setOFF>
	  		  	  break;
 80014be:	e00a      	b.n	80014d6 <main+0xf6>
	  	  case 3: led_setON(LED_YELLOW);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f7ff ff53 	bl	800136c <led_setON>
	  	  	  	  led_setOFF(LED_RED);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff ff62 	bl	8001390 <led_setOFF>
	  		  	  led_setOFF(LED_GREEN);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ff5f 	bl	8001390 <led_setOFF>
	  		  	  break;
 80014d2:	e000      	b.n	80014d6 <main+0xf6>
	  	  default: break;
 80014d4:	46c0      	nop			; (mov r8, r8)

	  }
	  led_update();
 80014d6:	f7ff fd39 	bl	8000f4c <led_update>
	  HAL_ADC_Start_IT(&hadc1);
 80014da:	e7a9      	b.n	8001430 <main+0x50>
 80014dc:	2000019c 	.word	0x2000019c
 80014e0:	20000088 	.word	0x20000088
 80014e4:	200000ec 	.word	0x200000ec
 80014e8:	200001e8 	.word	0x200001e8
 80014ec:	2000002c 	.word	0x2000002c
 80014f0:	20000210 	.word	0x20000210
 80014f4:	20000028 	.word	0x20000028
 80014f8:	20000044 	.word	0x20000044

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b08d      	sub	sp, #52	; 0x34
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	2414      	movs	r4, #20
 8001504:	193b      	adds	r3, r7, r4
 8001506:	0018      	movs	r0, r3
 8001508:	231c      	movs	r3, #28
 800150a:	001a      	movs	r2, r3
 800150c:	2100      	movs	r1, #0
 800150e:	f003 fb99 	bl	8004c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001512:	003b      	movs	r3, r7
 8001514:	0018      	movs	r0, r3
 8001516:	2314      	movs	r3, #20
 8001518:	001a      	movs	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	f003 fb92 	bl	8004c44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001520:	193b      	adds	r3, r7, r4
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	193b      	adds	r3, r7, r4
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	193b      	adds	r3, r7, r4
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0018      	movs	r0, r3
 800153e:	f002 fb3b 	bl	8003bb8 <HAL_RCC_OscConfig>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001546:	f000 f9cd 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	003b      	movs	r3, r7
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001550:	003b      	movs	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	003b      	movs	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800155c:	003b      	movs	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001562:	003b      	movs	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001568:	003b      	movs	r3, r7
 800156a:	2101      	movs	r1, #1
 800156c:	0018      	movs	r0, r3
 800156e:	f002 fd07 	bl	8003f80 <HAL_RCC_ClockConfig>
 8001572:	1e03      	subs	r3, r0, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001576:	f000 f9b5 	bl	80018e4 <Error_Handler>
  }
}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b00d      	add	sp, #52	; 0x34
 8001580:	bd90      	pop	{r4, r7, pc}
	...

08001584 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	0018      	movs	r0, r3
 800158e:	230c      	movs	r3, #12
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f003 fb56 	bl	8004c44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <MX_ADC1_Init+0xcc>)
 800159a:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <MX_ADC1_Init+0xd0>)
 800159c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	05d2      	lsls	r2, r2, #23
 80015a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015ec:	222c      	movs	r2, #44	; 0x2c
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_ADC1_Init+0xcc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_ADC1_Init+0xcc>)
 8001600:	2200      	movs	r2, #0
 8001602:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_ADC1_Init+0xcc>)
 8001606:	223c      	movs	r2, #60	; 0x3c
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_ADC1_Init+0xcc>)
 800160e:	2200      	movs	r2, #0
 8001610:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_ADC1_Init+0xcc>)
 8001614:	0018      	movs	r0, r3
 8001616:	f000 fdeb 	bl	80021f0 <HAL_ADC_Init>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d001      	beq.n	8001622 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800161e:	f000 f961 	bl	80018e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	1d3a      	adds	r2, r7, #4
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_ADC1_Init+0xcc>)
 8001638:	0011      	movs	r1, r2
 800163a:	0018      	movs	r0, r3
 800163c:	f001 f8da 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001644:	f000 f94e 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000088 	.word	0x20000088
 8001654:	40012400 	.word	0x40012400

08001658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_I2C1_Init+0x74>)
 800165e:	4a1c      	ldr	r2, [pc, #112]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_I2C1_Init+0x74>)
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <MX_I2C1_Init+0x7c>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_I2C1_Init+0x74>)
 8001670:	2201      	movs	r2, #1
 8001672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_I2C1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_I2C1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_I2C1_Init+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_I2C1_Init+0x74>)
 8001694:	0018      	movs	r0, r3
 8001696:	f002 f951 	bl	800393c <HAL_I2C_Init>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d001      	beq.n	80016a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800169e:	f000 f921 	bl	80018e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_I2C1_Init+0x74>)
 80016a4:	2100      	movs	r1, #0
 80016a6:	0018      	movs	r0, r3
 80016a8:	f002 f9ee 	bl	8003a88 <HAL_I2CEx_ConfigAnalogFilter>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016b0:	f000 f918 	bl	80018e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <MX_I2C1_Init+0x74>)
 80016b6:	2100      	movs	r1, #0
 80016b8:	0018      	movs	r0, r3
 80016ba:	f002 fa31 	bl	8003b20 <HAL_I2CEx_ConfigDigitalFilter>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016c2:	f000 f90f 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000148 	.word	0x20000148
 80016d0:	40005400 	.word	0x40005400
 80016d4:	20303e5d 	.word	0x20303e5d

080016d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	2310      	movs	r3, #16
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	0018      	movs	r0, r3
 80016e4:	2310      	movs	r3, #16
 80016e6:	001a      	movs	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f003 faab 	bl	8004c44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	0018      	movs	r0, r3
 80016f2:	230c      	movs	r3, #12
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f003 faa4 	bl	8004c44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <MX_TIM1_Init+0xac>)
 80016fe:	4a22      	ldr	r2, [pc, #136]	; (8001788 <MX_TIM1_Init+0xb0>)
 8001700:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1399;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_TIM1_Init+0xac>)
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <MX_TIM1_Init+0xb4>)
 8001706:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_TIM1_Init+0xac>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 399;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM1_Init+0xac>)
 8001710:	2290      	movs	r2, #144	; 0x90
 8001712:	32ff      	adds	r2, #255	; 0xff
 8001714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_TIM1_Init+0xac>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM1_Init+0xac>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_TIM1_Init+0xac>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_TIM1_Init+0xac>)
 800172a:	0018      	movs	r0, r3
 800172c:	f002 fe62 	bl	80043f4 <HAL_TIM_Base_Init>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8001734:	f000 f8d6 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	2110      	movs	r1, #16
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	0152      	lsls	r2, r2, #5
 8001740:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001742:	187a      	adds	r2, r7, r1
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_TIM1_Init+0xac>)
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f002 fffb 	bl	8004744 <HAL_TIM_ConfigClockSource>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001752:	f000 f8c7 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001768:	1d3a      	adds	r2, r7, #4
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_TIM1_Init+0xac>)
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f003 f9ee 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001778:	f000 f8b4 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b008      	add	sp, #32
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000019c 	.word	0x2000019c
 8001788:	40012c00 	.word	0x40012c00
 800178c:	00000577 	.word	0x00000577

08001790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fe0d 	bl	80013b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2009      	movs	r0, #9
 80017a0:	f001 fc4a 	bl	8003038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a4:	2009      	movs	r0, #9
 80017a6:	f001 fc5c 	bl	8003062 <HAL_NVIC_EnableIRQ>

}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	240c      	movs	r4, #12
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	0018      	movs	r0, r3
 80017bc:	2314      	movs	r3, #20
 80017be:	001a      	movs	r2, r3
 80017c0:	2100      	movs	r1, #0
 80017c2:	f003 fa3f 	bl	8004c44 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017cc:	2104      	movs	r1, #4
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	2204      	movs	r2, #4
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	2201      	movs	r2, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fa:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <MX_GPIO_Init+0x120>)
 80017fc:	2102      	movs	r1, #2
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <MX_GPIO_Init+0x120>)
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GREEN_GPIO_Port, LD4_GREEN_Pin, GPIO_PIN_RESET);
 800180e:	23a0      	movs	r3, #160	; 0xa0
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	2200      	movs	r2, #0
 8001814:	2120      	movs	r1, #32
 8001816:	0018      	movs	r0, r3
 8001818:	f002 f823 	bl	8003862 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_B_Pin|LED_G_Pin, GPIO_PIN_RESET);
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <MX_GPIO_Init+0x124>)
 800181e:	2200      	movs	r2, #0
 8001820:	2138      	movs	r1, #56	; 0x38
 8001822:	0018      	movs	r0, r3
 8001824:	f002 f81d 	bl	8003862 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_BLUE_Pin */
  GPIO_InitStruct.Pin = BTN_BLUE_Pin;
 8001828:	193b      	adds	r3, r7, r4
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	0192      	lsls	r2, r2, #6
 800182e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <MX_GPIO_Init+0x128>)
 8001834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_BLUE_GPIO_Port, &GPIO_InitStruct);
 800183c:	193b      	adds	r3, r7, r4
 800183e:	4a27      	ldr	r2, [pc, #156]	; (80018dc <MX_GPIO_Init+0x12c>)
 8001840:	0019      	movs	r1, r3
 8001842:	0010      	movs	r0, r2
 8001844:	f001 fe7e 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_GREEN_Pin */
  GPIO_InitStruct.Pin = LD4_GREEN_Pin;
 8001848:	193b      	adds	r3, r7, r4
 800184a:	2220      	movs	r2, #32
 800184c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	193b      	adds	r3, r7, r4
 8001850:	2201      	movs	r2, #1
 8001852:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	193b      	adds	r3, r7, r4
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001860:	193a      	adds	r2, r7, r4
 8001862:	23a0      	movs	r3, #160	; 0xa0
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	0011      	movs	r1, r2
 8001868:	0018      	movs	r0, r3
 800186a:	f001 fe6b 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	22c0      	movs	r2, #192	; 0xc0
 8001872:	00d2      	lsls	r2, r2, #3
 8001874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001876:	193b      	adds	r3, r7, r4
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <MX_GPIO_Init+0x130>)
 800187a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	193b      	adds	r3, r7, r4
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	193a      	adds	r2, r7, r4
 8001884:	23a0      	movs	r3, #160	; 0xa0
 8001886:	05db      	lsls	r3, r3, #23
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f001 fe5a 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_B_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 8001890:	0021      	movs	r1, r4
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2238      	movs	r2, #56	; 0x38
 8001896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2201      	movs	r2, #1
 800189c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <MX_GPIO_Init+0x124>)
 80018ae:	0019      	movs	r1, r3
 80018b0:	0010      	movs	r0, r2
 80018b2:	f001 fe47 	bl	8003544 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2007      	movs	r0, #7
 80018bc:	f001 fbbc 	bl	8003038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018c0:	2007      	movs	r0, #7
 80018c2:	f001 fbce 	bl	8003062 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b009      	add	sp, #36	; 0x24
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	40021000 	.word	0x40021000
 80018d4:	50000400 	.word	0x50000400
 80018d8:	10110000 	.word	0x10110000
 80018dc:	50000800 	.word	0x50000800
 80018e0:	10210000 	.word	0x10210000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_MspInit+0x44>)
 80018f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_MspInit+0x44>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_MspInit+0x44>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x44>)
 8001910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_MspInit+0x44>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0549      	lsls	r1, r1, #21
 8001918:	430a      	orrs	r2, r1
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_MspInit+0x44>)
 800191e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b002      	add	sp, #8
 8001930:	bd80      	pop	{r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b091      	sub	sp, #68	; 0x44
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	232c      	movs	r3, #44	; 0x2c
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	0018      	movs	r0, r3
 8001946:	2314      	movs	r3, #20
 8001948:	001a      	movs	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	f003 f97a 	bl	8004c44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	2410      	movs	r4, #16
 8001952:	193b      	adds	r3, r7, r4
 8001954:	0018      	movs	r0, r3
 8001956:	231c      	movs	r3, #28
 8001958:	001a      	movs	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	f003 f972 	bl	8004c44 <memset>
  if(hadc->Instance==ADC1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <HAL_ADC_MspInit+0x104>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d164      	bne.n	8001a34 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	01d2      	lsls	r2, r2, #7
 8001970:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001978:	193b      	adds	r3, r7, r4
 800197a:	0018      	movs	r0, r3
 800197c:	f002 fc4c 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001984:	f7ff ffae 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_ADC_MspInit+0x108>)
 800198a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_ADC_MspInit+0x108>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0349      	lsls	r1, r1, #13
 8001992:	430a      	orrs	r2, r1
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_ADC_MspInit+0x108>)
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	035b      	lsls	r3, r3, #13
 800199e:	4013      	ands	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_ADC_MspInit+0x108>)
 80019a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_ADC_MspInit+0x108>)
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_ADC_MspInit+0x108>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2203      	movs	r2, #3
 80019c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	187a      	adds	r2, r7, r1
 80019d2:	23a0      	movs	r3, #160	; 0xa0
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f001 fdb3 	bl	8003544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_ADC_MspInit+0x110>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 80019e6:	2205      	movs	r2, #5
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 8001a0e:	2220      	movs	r2, #32
 8001a10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f001 fb3e 	bl	800309c <HAL_DMA_Init>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001a24:	f7ff ff5e 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 8001a2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_ADC_MspInit+0x10c>)
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b011      	add	sp, #68	; 0x44
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	40012400 	.word	0x40012400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	200000ec 	.word	0x200000ec
 8001a48:	40020008 	.word	0x40020008

08001a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b091      	sub	sp, #68	; 0x44
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	232c      	movs	r3, #44	; 0x2c
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	0018      	movs	r0, r3
 8001a5a:	2314      	movs	r3, #20
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f003 f8f0 	bl	8004c44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a64:	2410      	movs	r4, #16
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	0018      	movs	r0, r3
 8001a6a:	231c      	movs	r3, #28
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	f003 f8e8 	bl	8004c44 <memset>
  if(hi2c->Instance==I2C1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_I2C_MspInit+0xb8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d13e      	bne.n	8001afc <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f002 fbc3 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a96:	f7ff ff25 	bl	80018e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_I2C_MspInit+0xbc>)
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_I2C_MspInit+0xbc>)
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_I2C_MspInit+0xbc>)
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	22c0      	movs	r2, #192	; 0xc0
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2212      	movs	r2, #18
 8001ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_I2C_MspInit+0xc0>)
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0010      	movs	r0, r2
 8001adc:	f001 fd32 	bl	8003544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_I2C_MspInit+0xbc>)
 8001ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_I2C_MspInit+0xbc>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	0389      	lsls	r1, r1, #14
 8001aea:	430a      	orrs	r2, r1
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_I2C_MspInit+0xbc>)
 8001af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	039b      	lsls	r3, r3, #14
 8001af6:	4013      	ands	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b011      	add	sp, #68	; 0x44
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	50000400 	.word	0x50000400

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_TIM_Base_MspInit+0x48>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d115      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_Base_MspInit+0x4c>)
 8001b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_TIM_Base_MspInit+0x4c>)
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0109      	lsls	r1, r1, #4
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_TIM_Base_MspInit+0x4c>)
 8001b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	200d      	movs	r0, #13
 8001b44:	f001 fa78 	bl	8003038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001b48:	200d      	movs	r0, #13
 8001b4a:	f001 fa8a 	bl	8003062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40012c00 	.word	0x40012c00
 8001b5c:	40021000 	.word	0x40021000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 f9ae 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f001 fe9c 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f001 fe97 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_BLUE_Pin);
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	019b      	lsls	r3, r3, #6
 8001baa:	0018      	movs	r0, r3
 8001bac:	f001 fe92 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  //counterButton+=1;
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <DMA1_Channel1_IRQHandler+0x14>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f001 fb7e 	bl	80032c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	200000ec 	.word	0x200000ec

08001bd0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd4:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe8>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 fcb2 	bl	8004540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, LD4_GREEN_Pin);
 8001bdc:	23a0      	movs	r3, #160	; 0xa0
 8001bde:	05db      	lsls	r3, r3, #23
 8001be0:	2120      	movs	r1, #32
 8001be2:	0018      	movs	r0, r3
 8001be4:	f001 fe5a 	bl	800389c <HAL_GPIO_TogglePin>
  if(Channel_0.debounce > 0)
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	dd2d      	ble.n	8001c4c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x7c>
  {
	  Channel_0.debounce++;
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001bf8:	609a      	str	r2, [r3, #8]
	  if (Channel_0.debounce > Channel_0.debounce_target)
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dd22      	ble.n	8001c4c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x7c>
	      {

	     	 Channel_0.current_state = HAL_GPIO_ReadPin(GPIOA, RIGHT_Pin);
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	00da      	lsls	r2, r3, #3
 8001c0a:	23a0      	movs	r3, #160	; 0xa0
 8001c0c:	05db      	lsls	r3, r3, #23
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f001 fe09 	bl	8003828 <HAL_GPIO_ReadPin>
 8001c16:	0003      	movs	r3, r0
 8001c18:	1e5a      	subs	r2, r3, #1
 8001c1a:	4193      	sbcs	r3, r2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c20:	745a      	strb	r2, [r3, #17]

	     	 if (Channel_0.last_state == Channel_0.current_state)
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c24:	7c1b      	ldrb	r3, [r3, #16]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c2a:	7c5b      	ldrb	r3, [r3, #17]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10c      	bne.n	8001c4c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x7c>
	     	 {

	                 Channel_0.last_state = Channel_0.current_state;
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c34:	7c5b      	ldrb	r3, [r3, #17]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c3a:	741a      	strb	r2, [r3, #16]
	                 Channel_0.count++;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c44:	605a      	str	r2, [r3, #4]
	                 Channel_0.debounce = 0;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <TIM1_BRK_UP_TRG_COM_IRQHandler+0xec>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]

	       }


  }
  if(Channel_1.debounce > 0)
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd2d      	ble.n	8001cb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe0>
    {
  	  Channel_1.debounce++;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c5c:	609a      	str	r2, [r3, #8]
  	  if (Channel_1.debounce > Channel_1.debounce_target)
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dd22      	ble.n	8001cb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe0>
  	      {

  	     	 Channel_1.current_state = HAL_GPIO_ReadPin(GPIOA, LEFT_Pin);
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	009a      	lsls	r2, r3, #2
 8001c6e:	23a0      	movs	r3, #160	; 0xa0
 8001c70:	05db      	lsls	r3, r3, #23
 8001c72:	0011      	movs	r1, r2
 8001c74:	0018      	movs	r0, r3
 8001c76:	f001 fdd7 	bl	8003828 <HAL_GPIO_ReadPin>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	4193      	sbcs	r3, r2
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c84:	745a      	strb	r2, [r3, #17]

  	     	 if (Channel_1.last_state == Channel_1.current_state)
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c88:	7c1b      	ldrb	r3, [r3, #16]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c8e:	7c5b      	ldrb	r3, [r3, #17]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d10c      	bne.n	8001cb0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xe0>
  	     	 {

  	                 Channel_1.last_state = Channel_1.current_state;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c98:	7c5b      	ldrb	r3, [r3, #17]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001c9e:	741a      	strb	r2, [r3, #16]
  	                 Channel_1.count++;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001ca8:	605a      	str	r2, [r3, #4]
  	                 Channel_1.debounce = 0;
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xf0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  	       }


    }
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	2000019c 	.word	0x2000019c
 8001cbc:	2000002c 	.word	0x2000002c
 8001cc0:	20000044 	.word	0x20000044

08001cc4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    // Data processing code here using adc_buffer
	HAL_ADC_Stop_IT(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fcac 	bl	800262c <HAL_ADC_Stop_IT>
	for(int i =0;i<ADC_BUFFER_SIZE;i++)media += adc_buffer[i];
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e00b      	b.n	8001cf2 <HAL_ADC_ConvCpltCallback+0x2e>
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	58d2      	ldr	r2, [r2, r3]
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x90>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	18d2      	adds	r2, r2, r3
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x90>)
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	ddf0      	ble.n	8001cda <HAL_ADC_ConvCpltCallback+0x16>
	media=media/ADC_BUFFER_SIZE;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x90>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	210a      	movs	r1, #10
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7fe fa02 	bl	8000108 <__udivsi3>
 8001d04:	0003      	movs	r3, r0
 8001d06:	001a      	movs	r2, r3
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x90>)
 8001d0a:	601a      	str	r2, [r3, #0]
	voltage = (media/4095.0) *3.3;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x90>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff f853 	bl	8000dbc <__aeabi_ui2d>
 8001d16:	2200      	movs	r2, #0
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_ADC_ConvCpltCallback+0x94>)
 8001d1a:	f7fe fa9f 	bl	800025c <__aeabi_ddiv>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	000b      	movs	r3, r1
 8001d22:	0010      	movs	r0, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_ADC_ConvCpltCallback+0x98>)
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001d2a:	f7fe fd85 	bl	8000838 <__aeabi_dmul>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	000b      	movs	r3, r1
 8001d32:	0010      	movs	r0, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	f7ff f867 	bl	8000e08 <__aeabi_d2f>
 8001d3a:	1c02      	adds	r2, r0, #0
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d3e:	601a      	str	r2, [r3, #0]
	media=0;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_ADC_ConvCpltCallback+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
	//voltage = (adc_buffer[0] / 4095.0) * 3.3;

}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	200001e8 	.word	0x200001e8
 8001d54:	20000214 	.word	0x20000214
 8001d58:	40affe00 	.word	0x40affe00
 8001d5c:	66666666 	.word	0x66666666
 8001d60:	400a6666 	.word	0x400a6666
 8001d64:	20000228 	.word	0x20000228

08001d68 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	0002      	movs	r2, r0
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == Channel_0.pin)
 8001d74:	1dbb      	adds	r3, r7, #6
 8001d76:	881a      	ldrh	r2, [r3, #0]
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d106      	bne.n	8001d8e <HAL_GPIO_EXTI_Falling_Callback+0x26>
	{
		Channel_0.last_state =LOW;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	741a      	strb	r2, [r3, #16]
		Channel_0.debounce = 1;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	609a      	str	r2, [r3, #8]
	else if(GPIO_Pin == Channel_1.pin)
		{
			Channel_1.last_state =LOW;
			Channel_1.debounce = 1;
		}
}
 8001d8c:	e00b      	b.n	8001da6 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
	else if(GPIO_Pin == Channel_1.pin)
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d105      	bne.n	8001da6 <HAL_GPIO_EXTI_Falling_Callback+0x3e>
			Channel_1.last_state =LOW;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	741a      	strb	r2, [r3, #16]
			Channel_1.debounce = 1;
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	2000002c 	.word	0x2000002c
 8001db4:	20000044 	.word	0x20000044

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <SystemInit+0x14>)
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	0512      	lsls	r2, r2, #20
 8001dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dd4:	f7ff fff0 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dda:	e003      	b.n	8001de4 <LoopCopyDataInit>

08001ddc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001dde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001de0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001de2:	3104      	adds	r1, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <LoopForever+0xa>)
  ldr r3, =_edata
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <LoopForever+0xe>)
  adds r2, r0, r1
 8001de8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dec:	d3f6      	bcc.n	8001ddc <CopyDataInit>
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <LoopForever+0x12>)
  b LoopFillZerobss
 8001df0:	e002      	b.n	8001df8 <LoopFillZerobss>

08001df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001df4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df6:	3204      	adds	r2, #4

08001df8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <LoopForever+0x16>)
  cmp r2, r3
 8001dfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001dfc:	d3f9      	bcc.n	8001df2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001dfe:	f002 ff29 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e02:	f7ff faed 	bl	80013e0 <main>

08001e06 <LoopForever>:

LoopForever:
    b LoopForever
 8001e06:	e7fe      	b.n	8001e06 <LoopForever>
  ldr   r0, =_estack
 8001e08:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001e0c:	08004d94 	.word	0x08004d94
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e14:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001e18:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001e1c:	20000230 	.word	0x20000230

08001e20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_IRQHandler>

08001e22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e2e:	2003      	movs	r0, #3
 8001e30:	f000 f80e 	bl	8001e50 <HAL_InitTick>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001e38:	1dfb      	adds	r3, r7, #7
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e001      	b.n	8001e44 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e40:	f7ff fd56 	bl	80018f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	781b      	ldrb	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e58:	230f      	movs	r3, #15
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_InitTick+0x88>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d02b      	beq.n	8001ec0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_InitTick+0x8c>)
 8001e6a:	681c      	ldr	r4, [r3, #0]
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_InitTick+0x88>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	0019      	movs	r1, r3
 8001e72:	23fa      	movs	r3, #250	; 0xfa
 8001e74:	0098      	lsls	r0, r3, #2
 8001e76:	f7fe f947 	bl	8000108 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	0020      	movs	r0, r4
 8001e80:	f7fe f942 	bl	8000108 <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	0018      	movs	r0, r3
 8001e88:	f001 f8fb 	bl	8003082 <HAL_SYSTICK_Config>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d112      	bne.n	8001eb6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d80a      	bhi.n	8001eac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f001 f8ca 	bl	8003038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_InitTick+0x90>)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e00d      	b.n	8001ec8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e008      	b.n	8001ec8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e003      	b.n	8001ec8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ec8:	230f      	movs	r3, #15
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b005      	add	sp, #20
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	20000064 	.word	0x20000064
 8001edc:	2000005c 	.word	0x2000005c
 8001ee0:	20000060 	.word	0x20000060

08001ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x1c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	001a      	movs	r2, r3
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_IncTick+0x20>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	18d2      	adds	r2, r2, r3
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_IncTick+0x20>)
 8001ef6:	601a      	str	r2, [r3, #0]
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000064 	.word	0x20000064
 8001f04:	2000022c 	.word	0x2000022c

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <HAL_GetTick+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	2000022c 	.word	0x2000022c

08001f1c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	ff3fffff 	.word	0xff3fffff

08001f44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	4013      	ands	r3, r2
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b002      	add	sp, #8
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	2104      	movs	r1, #4
 8001f72:	400a      	ands	r2, r1
 8001f74:	2107      	movs	r1, #7
 8001f76:	4091      	lsls	r1, r2
 8001f78:	000a      	movs	r2, r1
 8001f7a:	43d2      	mvns	r2, r2
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2104      	movs	r1, #4
 8001f82:	400b      	ands	r3, r1
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4099      	lsls	r1, r3
 8001f88:	000b      	movs	r3, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b004      	add	sp, #16
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	2104      	movs	r1, #4
 8001faa:	400a      	ands	r2, r1
 8001fac:	2107      	movs	r1, #7
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fba:	40da      	lsrs	r2, r3
 8001fbc:	0013      	movs	r3, r2
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d101      	bne.n	8001fde <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	211f      	movs	r1, #31
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	210f      	movs	r1, #15
 8002000:	4091      	lsls	r1, r2
 8002002:	000a      	movs	r2, r1
 8002004:	43d2      	mvns	r2, r2
 8002006:	401a      	ands	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	210f      	movs	r1, #15
 800200e:	4019      	ands	r1, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	201f      	movs	r0, #31
 8002014:	4003      	ands	r3, r0
 8002016:	4099      	lsls	r1, r3
 8002018:	000b      	movs	r3, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002020:	46c0      	nop			; (mov r8, r8)
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}

08002028 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	0a5b      	lsrs	r3, r3, #9
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}

0800204a <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	0252      	lsls	r2, r2, #9
 800205c:	0a52      	lsrs	r2, r2, #9
 800205e:	43d2      	mvns	r2, r2
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	0212      	lsls	r2, r2, #8
 8002084:	43d2      	mvns	r2, r2
 8002086:	401a      	ands	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	400b      	ands	r3, r1
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002092:	400b      	ands	r3, r1
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b004      	add	sp, #16
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	7fffff00 	.word	0x7fffff00

080020a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <LL_ADC_EnableInternalRegulator+0x24>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	0552      	lsls	r2, r2, #21
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b002      	add	sp, #8
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	6fffffe8 	.word	0x6fffffe8

080020d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	055b      	lsls	r3, r3, #21
 80020e0:	401a      	ands	r2, r3
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d101      	bne.n	80020ee <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <LL_ADC_Enable+0x20>)
 8002106:	4013      	ands	r3, r2
 8002108:	2201      	movs	r2, #1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}
 8002118:	7fffffe8 	.word	0x7fffffe8

0800211c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <LL_ADC_Disable+0x20>)
 800212a:	4013      	ands	r3, r2
 800212c:	2202      	movs	r2, #2
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}
 800213c:	7fffffe8 	.word	0x7fffffe8

08002140 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <LL_ADC_IsEnabled+0x18>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <LL_ADC_IsEnabled+0x1a>
 8002158:	2300      	movs	r3, #0
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}

08002162 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d101      	bne.n	800217a <LL_ADC_IsDisableOngoing+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_IsDisableOngoing+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <LL_ADC_REG_StartConversion+0x20>)
 8002192:	4013      	ands	r3, r2
 8002194:	2204      	movs	r2, #4
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	7fffffe8 	.word	0x7fffffe8

080021a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <LL_ADC_REG_StopConversion+0x20>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	2210      	movs	r2, #16
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	7fffffe8 	.word	0x7fffffe8

080021cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2204      	movs	r2, #4
 80021da:	4013      	ands	r3, r2
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d101      	bne.n	80021e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b002      	add	sp, #8
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f8:	231f      	movs	r3, #31
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e17e      	b.n	8002514 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff fb89 	bl	8001938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2254      	movs	r2, #84	; 0x54
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff49 	bl	80020d0 <LL_ADC_IsInternalRegulatorEnabled>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d114      	bne.n	800226c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0018      	movs	r0, r3
 8002248:	f7ff ff2e 	bl	80020a8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800224c:	4bb3      	ldr	r3, [pc, #716]	; (800251c <HAL_ADC_Init+0x32c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	49b3      	ldr	r1, [pc, #716]	; (8002520 <HAL_ADC_Init+0x330>)
 8002252:	0018      	movs	r0, r3
 8002254:	f7fd ff58 	bl	8000108 <__udivsi3>
 8002258:	0003      	movs	r3, r0
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800225e:	e002      	b.n	8002266 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b01      	subs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f9      	bne.n	8002260 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff ff2d 	bl	80020d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d10f      	bne.n	800229a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	2210      	movs	r2, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2201      	movs	r2, #1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002292:	231f      	movs	r3, #31
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff ff94 	bl	80021cc <LL_ADC_REG_IsConversionOngoing>
 80022a4:	0003      	movs	r3, r0
 80022a6:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	2210      	movs	r2, #16
 80022ae:	4013      	ands	r3, r2
 80022b0:	d000      	beq.n	80022b4 <HAL_ADC_Init+0xc4>
 80022b2:	e122      	b.n	80024fa <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d000      	beq.n	80022bc <HAL_ADC_Init+0xcc>
 80022ba:	e11e      	b.n	80024fa <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	4a98      	ldr	r2, [pc, #608]	; (8002524 <HAL_ADC_Init+0x334>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	2202      	movs	r2, #2
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff ff35 	bl	8002140 <LL_ADC_IsEnabled>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d000      	beq.n	80022dc <HAL_ADC_Init+0xec>
 80022da:	e0ad      	b.n	8002438 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
 80022e4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e5b      	ldrb	r3, [r3, #25]
 80022ec:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e9b      	ldrb	r3, [r3, #26]
 80022f4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_Init+0x116>
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	015b      	lsls	r3, r3, #5
 8002304:	e000      	b.n	8002308 <HAL_ADC_Init+0x118>
 8002306:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002308:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800230e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da04      	bge.n	8002322 <HAL_ADC_Init+0x132>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	e001      	b.n	8002326 <HAL_ADC_Init+0x136>
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002326:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	5c5b      	ldrb	r3, [r3, r1]
 800232e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002330:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d115      	bne.n	800236e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7e9b      	ldrb	r3, [r3, #26]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0252      	lsls	r2, r2, #9
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e00b      	b.n	800236e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	2220      	movs	r2, #32
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2201      	movs	r2, #1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237a:	23e0      	movs	r3, #224	; 0xe0
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002384:	4313      	orrs	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4a65      	ldr	r2, [pc, #404]	; (8002528 <HAL_ADC_Init+0x338>)
 8002394:	4013      	ands	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	430a      	orrs	r2, r1
 80023a0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0f9b      	lsrs	r3, r3, #30
 80023a8:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023ae:	4313      	orrs	r3, r2
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	223c      	movs	r2, #60	; 0x3c
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d111      	bne.n	80023e4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0f9b      	lsrs	r3, r3, #30
 80023c6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023cc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80023d2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80023d8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	2201      	movs	r2, #1
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4a50      	ldr	r2, [pc, #320]	; (800252c <HAL_ADC_Init+0x33c>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	429a      	cmp	r2, r3
 8002404:	d018      	beq.n	8002438 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	05db      	lsls	r3, r3, #23
 800240e:	429a      	cmp	r2, r3
 8002410:	d012      	beq.n	8002438 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	429a      	cmp	r2, r3
 800241c:	d00c      	beq.n	8002438 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <HAL_ADC_Init+0x340>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a44      	ldr	r2, [pc, #272]	; (8002534 <HAL_ADC_Init+0x344>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	23f0      	movs	r3, #240	; 0xf0
 800242e:	039b      	lsls	r3, r3, #14
 8002430:	401a      	ands	r2, r3
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_ADC_Init+0x340>)
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002440:	001a      	movs	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f7ff fd8b 	bl	8001f5e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	4939      	ldr	r1, [pc, #228]	; (8002538 <HAL_ADC_Init+0x348>)
 8002452:	001a      	movs	r2, r3
 8002454:	f7ff fd83 	bl	8001f5e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2110      	movs	r1, #16
 800246c:	4249      	negs	r1, r1
 800246e:	430a      	orrs	r2, r1
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
 8002472:	e018      	b.n	80024a6 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	039b      	lsls	r3, r3, #14
 800247c:	429a      	cmp	r2, r3
 800247e:	d112      	bne.n	80024a6 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	3b01      	subs	r3, #1
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	221c      	movs	r2, #28
 8002490:	4013      	ands	r3, r2
 8002492:	2210      	movs	r2, #16
 8002494:	4252      	negs	r2, r2
 8002496:	409a      	lsls	r2, r3
 8002498:	0011      	movs	r1, r2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2100      	movs	r1, #0
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff fd73 	bl	8001f98 <LL_ADC_GetSamplingTimeCommonChannels>
 80024b2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d10b      	bne.n	80024d4 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	2203      	movs	r2, #3
 80024c8:	4393      	bics	r3, r2
 80024ca:	2201      	movs	r2, #1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024d2:	e01c      	b.n	800250e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	2212      	movs	r2, #18
 80024da:	4393      	bics	r3, r2
 80024dc:	2210      	movs	r2, #16
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2201      	movs	r2, #1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80024f0:	231f      	movs	r3, #31
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024f8:	e009      	b.n	800250e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	2210      	movs	r2, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002506:	231f      	movs	r3, #31
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800250e:	231f      	movs	r3, #31
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b008      	add	sp, #32
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2000005c 	.word	0x2000005c
 8002520:	00030d40 	.word	0x00030d40
 8002524:	fffffefd 	.word	0xfffffefd
 8002528:	ffde0201 	.word	0xffde0201
 800252c:	1ffffc02 	.word	0x1ffffc02
 8002530:	40012708 	.word	0x40012708
 8002534:	ffc3ffff 	.word	0xffc3ffff
 8002538:	7fffff04 	.word	0x7fffff04

0800253c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff fe3f 	bl	80021cc <LL_ADC_REG_IsConversionOngoing>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d15f      	bne.n	8002612 <HAL_ADC_Start_IT+0xd6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2254      	movs	r2, #84	; 0x54
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_ADC_Start_IT+0x24>
 800255c:	2302      	movs	r3, #2
 800255e:	e05f      	b.n	8002620 <HAL_ADC_Start_IT+0xe4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2254      	movs	r2, #84	; 0x54
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002568:	250f      	movs	r5, #15
 800256a:	197c      	adds	r4, r7, r5
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fb52 	bl	8002c18 <ADC_Enable>
 8002574:	0003      	movs	r3, r0
 8002576:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002578:	197b      	adds	r3, r7, r5
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d143      	bne.n	8002608 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_ADC_Start_IT+0xec>)
 8002586:	4013      	ands	r3, r2
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	0052      	lsls	r2, r2, #1
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	221c      	movs	r2, #28
 800259e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2254      	movs	r2, #84	; 0x54
 80025a4:	2100      	movs	r1, #0
 80025a6:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	211c      	movs	r1, #28
 80025b4:	438a      	bics	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d108      	bne.n	80025d2 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2108      	movs	r1, #8
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
          break;
 80025d0:	e008      	b.n	80025e4 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2104      	movs	r1, #4
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
          break;
 80025e2:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2110      	movs	r1, #16
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fdbf 	bl	8002184 <LL_ADC_REG_StartConversion>
 8002606:	e008      	b.n	800261a <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2254      	movs	r2, #84	; 0x54
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]
 8002610:	e003      	b.n	800261a <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002612:	230f      	movs	r3, #15
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2202      	movs	r2, #2
 8002618:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800261a:	230f      	movs	r3, #15
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	fffff0fe 	.word	0xfffff0fe

0800262c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2254      	movs	r2, #84	; 0x54
 8002638:	5c9b      	ldrb	r3, [r3, r2]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Stop_IT+0x16>
 800263e:	2302      	movs	r3, #2
 8002640:	e033      	b.n	80026aa <HAL_ADC_Stop_IT+0x7e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2254      	movs	r2, #84	; 0x54
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800264a:	250f      	movs	r5, #15
 800264c:	197c      	adds	r4, r7, r5
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 faa5 	bl	8002ba0 <ADC_ConversionStop>
 8002656:	0003      	movs	r3, r0
 8002658:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800265a:	0028      	movs	r0, r5
 800265c:	183b      	adds	r3, r7, r0
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11b      	bne.n	800269c <HAL_ADC_Stop_IT+0x70>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	211c      	movs	r1, #28
 8002670:	438a      	bics	r2, r1
 8002672:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002674:	0005      	movs	r5, r0
 8002676:	183c      	adds	r4, r7, r0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fb4a 	bl	8002d14 <ADC_Disable>
 8002680:	0003      	movs	r3, r0
 8002682:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002684:	197b      	adds	r3, r7, r5
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_ADC_Stop_IT+0x70>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_ADC_Stop_IT+0x88>)
 8002692:	4013      	ands	r3, r2
 8002694:	2201      	movs	r2, #1
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2254      	movs	r2, #84	; 0x54
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80026a4:	230f      	movs	r3, #15
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	fffffefe 	.word	0xfffffefe

080026b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff fd7f 	bl	80021cc <LL_ADC_REG_IsConversionOngoing>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d16c      	bne.n	80027ac <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2254      	movs	r2, #84	; 0x54
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x28>
 80026dc:	2302      	movs	r3, #2
 80026de:	e06c      	b.n	80027ba <HAL_ADC_Start_DMA+0x102>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2254      	movs	r2, #84	; 0x54
 80026e4:	2101      	movs	r1, #1
 80026e6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	4013      	ands	r3, r2
 80026f2:	d113      	bne.n	800271c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff fd21 	bl	8002140 <LL_ADC_IsEnabled>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d004      	beq.n	800270c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff fd08 	bl	800211c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800271c:	2517      	movs	r5, #23
 800271e:	197c      	adds	r4, r7, r5
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fa78 	bl	8002c18 <ADC_Enable>
 8002728:	0003      	movs	r3, r0
 800272a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800272c:	002c      	movs	r4, r5
 800272e:	193b      	adds	r3, r7, r4
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d13e      	bne.n	80027b4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <HAL_ADC_Start_DMA+0x10c>)
 800273c:	4013      	ands	r3, r2
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	0052      	lsls	r2, r2, #1
 8002742:	431a      	orrs	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_ADC_Start_DMA+0x110>)
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_ADC_Start_DMA+0x114>)
 800275c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_ADC_Start_DMA+0x118>)
 8002764:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	221c      	movs	r2, #28
 800276c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2254      	movs	r2, #84	; 0x54
 8002772:	2100      	movs	r1, #0
 8002774:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2110      	movs	r1, #16
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3340      	adds	r3, #64	; 0x40
 8002790:	0019      	movs	r1, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	193c      	adds	r4, r7, r4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f000 fd0a 	bl	80031b0 <HAL_DMA_Start_IT>
 800279c:	0003      	movs	r3, r0
 800279e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fced 	bl	8002184 <LL_ADC_REG_StartConversion>
 80027aa:	e003      	b.n	80027b4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ac:	2317      	movs	r3, #23
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b4:	2317      	movs	r3, #23
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	781b      	ldrb	r3, [r3, #0]
}
 80027ba:	0018      	movs	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	b006      	add	sp, #24
 80027c0:	bdb0      	pop	{r4, r5, r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	fffff0fe 	.word	0xfffff0fe
 80027c8:	08002dc5 	.word	0x08002dc5
 80027cc:	08002e8d 	.word	0x08002e8d
 80027d0:	08002eab 	.word	0x08002eab

080027d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fe:	2317      	movs	r3, #23
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2254      	movs	r2, #84	; 0x54
 800280e:	5c9b      	ldrb	r3, [r3, r2]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x24>
 8002814:	2302      	movs	r3, #2
 8002816:	e1be      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2254      	movs	r2, #84	; 0x54
 800281c:	2101      	movs	r1, #1
 800281e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff fcd1 	bl	80021cc <LL_ADC_REG_IsConversionOngoing>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d000      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x3c>
 800282e:	e1a1      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d100      	bne.n	800283a <HAL_ADC_ConfigChannel+0x46>
 8002838:	e152      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	429a      	cmp	r2, r3
 8002844:	d004      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800284a:	4ac2      	ldr	r2, [pc, #776]	; (8002b54 <HAL_ADC_ConfigChannel+0x360>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d108      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0019      	movs	r1, r3
 800285a:	0010      	movs	r0, r2
 800285c:	f7ff fbe4 	bl	8002028 <LL_ADC_REG_SetSequencerChAdd>
 8002860:	e0ed      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	211f      	movs	r1, #31
 800286c:	400b      	ands	r3, r1
 800286e:	210f      	movs	r1, #15
 8002870:	4099      	lsls	r1, r3
 8002872:	000b      	movs	r3, r1
 8002874:	43db      	mvns	r3, r3
 8002876:	4013      	ands	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	025b      	lsls	r3, r3, #9
 8002880:	0a5b      	lsrs	r3, r3, #9
 8002882:	d105      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x9c>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	221f      	movs	r2, #31
 800288c:	4013      	ands	r3, r2
 800288e:	e0bc      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d000      	beq.n	800289c <HAL_ADC_ConfigChannel+0xa8>
 800289a:	e0b5      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x214>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d000      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0xb4>
 80028a6:	e0ad      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x210>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2204      	movs	r2, #4
 80028ae:	4013      	ands	r3, r2
 80028b0:	d000      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0xc0>
 80028b2:	e0a5      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x20c>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2208      	movs	r2, #8
 80028ba:	4013      	ands	r3, r2
 80028bc:	d000      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xcc>
 80028be:	e09d      	b.n	80029fc <HAL_ADC_ConfigChannel+0x208>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d000      	beq.n	80028cc <HAL_ADC_ConfigChannel+0xd8>
 80028ca:	e095      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x204>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d000      	beq.n	80028d8 <HAL_ADC_ConfigChannel+0xe4>
 80028d6:	e08d      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x200>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2240      	movs	r2, #64	; 0x40
 80028de:	4013      	ands	r3, r2
 80028e0:	d000      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xf0>
 80028e2:	e085      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x1fc>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	4013      	ands	r3, r2
 80028ec:	d000      	beq.n	80028f0 <HAL_ADC_ConfigChannel+0xfc>
 80028ee:	e07d      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1f8>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d000      	beq.n	80028fe <HAL_ADC_ConfigChannel+0x10a>
 80028fc:	e074      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1f4>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d000      	beq.n	800290c <HAL_ADC_ConfigChannel+0x118>
 800290a:	e06b      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x1f0>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4013      	ands	r3, r2
 8002916:	d000      	beq.n	800291a <HAL_ADC_ConfigChannel+0x126>
 8002918:	e062      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x1ec>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d000      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x134>
 8002926:	e059      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1e8>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	015b      	lsls	r3, r3, #5
 8002930:	4013      	ands	r3, r2
 8002932:	d151      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x1e4>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	019b      	lsls	r3, r3, #6
 800293c:	4013      	ands	r3, r2
 800293e:	d149      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1e0>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	4013      	ands	r3, r2
 800294a:	d141      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x1dc>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4013      	ands	r3, r2
 8002956:	d139      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d8>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	4013      	ands	r3, r2
 8002962:	d131      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1d4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	4013      	ands	r3, r2
 800296e:	d129      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1d0>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	02db      	lsls	r3, r3, #11
 8002978:	4013      	ands	r3, r2
 800297a:	d121      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1cc>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	031b      	lsls	r3, r3, #12
 8002984:	4013      	ands	r3, r2
 8002986:	d119      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x1c8>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	035b      	lsls	r3, r3, #13
 8002990:	4013      	ands	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1c4>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	039b      	lsls	r3, r3, #14
 800299c:	4013      	ands	r3, r2
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1c0>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	03db      	lsls	r3, r3, #15
 80029a8:	4013      	ands	r3, r2
 80029aa:	d001      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x1bc>
 80029ac:	2316      	movs	r3, #22
 80029ae:	e02c      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029b0:	2300      	movs	r3, #0
 80029b2:	e02a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029b4:	2315      	movs	r3, #21
 80029b6:	e028      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029b8:	2314      	movs	r3, #20
 80029ba:	e026      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029bc:	2313      	movs	r3, #19
 80029be:	e024      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029c0:	2312      	movs	r3, #18
 80029c2:	e022      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029c4:	2311      	movs	r3, #17
 80029c6:	e020      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029c8:	2310      	movs	r3, #16
 80029ca:	e01e      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029cc:	230f      	movs	r3, #15
 80029ce:	e01c      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029d0:	230e      	movs	r3, #14
 80029d2:	e01a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029d4:	230d      	movs	r3, #13
 80029d6:	e018      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029d8:	230c      	movs	r3, #12
 80029da:	e016      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029dc:	230b      	movs	r3, #11
 80029de:	e014      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029e0:	230a      	movs	r3, #10
 80029e2:	e012      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029e4:	2309      	movs	r3, #9
 80029e6:	e010      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029e8:	2308      	movs	r3, #8
 80029ea:	e00e      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029ec:	2307      	movs	r3, #7
 80029ee:	e00c      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029f0:	2306      	movs	r3, #6
 80029f2:	e00a      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029f4:	2305      	movs	r3, #5
 80029f6:	e008      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e006      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 80029fc:	2303      	movs	r3, #3
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e002      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x216>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	6852      	ldr	r2, [r2, #4]
 8002a0e:	201f      	movs	r0, #31
 8002a10:	4002      	ands	r2, r0
 8002a12:	4093      	lsls	r3, r2
 8002a14:	000a      	movs	r2, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d808      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	f7ff fad5 	bl	8001fe8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	001a      	movs	r2, r3
 8002a4c:	f7ff fb10 	bl	8002070 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db00      	blt.n	8002a5a <HAL_ADC_ConfigChannel+0x266>
 8002a58:	e096      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_ADC_ConfigChannel+0x364>)
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fa71 	bl	8001f44 <LL_ADC_GetCommonPathInternalCh>
 8002a62:	0003      	movs	r3, r0
 8002a64:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3c      	ldr	r2, [pc, #240]	; (8002b5c <HAL_ADC_ConfigChannel+0x368>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a78:	d11e      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	0412      	lsls	r2, r2, #16
 8002a80:	4313      	orrs	r3, r2
 8002a82:	4a35      	ldr	r2, [pc, #212]	; (8002b58 <HAL_ADC_ConfigChannel+0x364>)
 8002a84:	0019      	movs	r1, r3
 8002a86:	0010      	movs	r0, r2
 8002a88:	f7ff fa48 	bl	8001f1c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002a8c:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <HAL_ADC_ConfigChannel+0x36c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4934      	ldr	r1, [pc, #208]	; (8002b64 <HAL_ADC_ConfigChannel+0x370>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f7fd fb38 	bl	8000108 <__udivsi3>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	189b      	adds	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f9      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ab6:	e067      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_ADC_ConfigChannel+0x374>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d162      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	03db      	lsls	r3, r3, #15
 8002ac8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002aca:	d15d      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	03d2      	lsls	r2, r2, #15
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <HAL_ADC_ConfigChannel+0x364>)
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f7ff fa1f 	bl	8001f1c <LL_ADC_SetCommonPathInternalCh>
 8002ade:	e053      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d004      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_ADC_ConfigChannel+0x360>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d107      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7ff faa2 	bl	800204a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	da3c      	bge.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_ADC_ConfigChannel+0x364>)
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff fa17 	bl	8001f44 <LL_ADC_GetCommonPathInternalCh>
 8002b16:	0003      	movs	r3, r0
 8002b18:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_ADC_ConfigChannel+0x368>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d108      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <HAL_ADC_ConfigChannel+0x378>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_ADC_ConfigChannel+0x364>)
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	0010      	movs	r0, r2
 8002b30:	f7ff f9f4 	bl	8001f1c <LL_ADC_SetCommonPathInternalCh>
 8002b34:	e028      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_ADC_ConfigChannel+0x374>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d123      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <HAL_ADC_ConfigChannel+0x37c>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_ADC_ConfigChannel+0x364>)
 8002b48:	0019      	movs	r1, r3
 8002b4a:	0010      	movs	r0, r2
 8002b4c:	f7ff f9e6 	bl	8001f1c <LL_ADC_SetCommonPathInternalCh>
 8002b50:	e01a      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x394>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	80000004 	.word	0x80000004
 8002b58:	40012708 	.word	0x40012708
 8002b5c:	a4000200 	.word	0xa4000200
 8002b60:	2000005c 	.word	0x2000005c
 8002b64:	00030d40 	.word	0x00030d40
 8002b68:	a8000400 	.word	0xa8000400
 8002b6c:	ff7fffff 	.word	0xff7fffff
 8002b70:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	2220      	movs	r2, #32
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b80:	2317      	movs	r3, #23
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2254      	movs	r2, #84	; 0x54
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002b90:	2317      	movs	r3, #23
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)

08002ba0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7ff fb0d 	bl	80021cc <LL_ADC_REG_IsConversionOngoing>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d02b      	beq.n	8002c0e <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff fad1 	bl	8002162 <LL_ADC_IsDisableOngoing>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d104      	bne.n	8002bce <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff faed 	bl	80021a8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bce:	f7ff f99b 	bl	8001f08 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002bd6:	e014      	b.n	8002c02 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bd8:	f7ff f996 	bl	8001f08 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d90d      	bls.n	8002c02 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	2210      	movs	r2, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e006      	b.n	8002c10 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2204      	movs	r2, #4
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d1e4      	bne.n	8002bd8 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff fa89 	bl	8002140 <LL_ADC_IsEnabled>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d162      	bne.n	8002cf8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <ADC_Enable+0xec>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	2210      	movs	r2, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2201      	movs	r2, #1
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e04f      	b.n	8002cfa <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff fa4a 	bl	80020f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <ADC_Enable+0xf0>)
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff f96c 	bl	8001f44 <LL_ADC_GetCommonPathInternalCh>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00f      	beq.n	8002c96 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <ADC_Enable+0xf4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4925      	ldr	r1, [pc, #148]	; (8002d10 <ADC_Enable+0xf8>)
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7fd fa43 	bl	8000108 <__udivsi3>
 8002c82:	0003      	movs	r3, r0
 8002c84:	3301      	adds	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c88:	e002      	b.n	8002c90 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7e5b      	ldrb	r3, [r3, #25]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d02c      	beq.n	8002cf8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002c9e:	f7ff f933 	bl	8001f08 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ca6:	e020      	b.n	8002cea <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fa47 	bl	8002140 <LL_ADC_IsEnabled>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d104      	bne.n	8002cc0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff fa1c 	bl	80020f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cc0:	f7ff f922 	bl	8001f08 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d90d      	bls.n	8002cea <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e007      	b.n	8002cfa <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d1d7      	bne.n	8002ca8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	80000017 	.word	0x80000017
 8002d08:	40012708 	.word	0x40012708
 8002d0c:	2000005c 	.word	0x2000005c
 8002d10:	00030d40 	.word	0x00030d40

08002d14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fa1e 	bl	8002162 <LL_ADC_IsDisableOngoing>
 8002d26:	0003      	movs	r3, r0
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7ff fa06 	bl	8002140 <LL_ADC_IsEnabled>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d040      	beq.n	8002dba <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d13d      	bne.n	8002dba <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2205      	movs	r2, #5
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10d      	bne.n	8002d68 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7ff f9e3 	bl	800211c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5e:	f7ff f8d3 	bl	8001f08 <HAL_GetTick>
 8002d62:	0003      	movs	r3, r0
 8002d64:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d66:	e022      	b.n	8002dae <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e01b      	b.n	8002dbc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d84:	f7ff f8c0 	bl	8001f08 <HAL_GetTick>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d90d      	bls.n	8002dae <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	2210      	movs	r2, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	2201      	movs	r2, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e006      	b.n	8002dbc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1e4      	bne.n	8002d84 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b004      	add	sp, #16
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	2250      	movs	r2, #80	; 0x50
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d141      	bne.n	8002e60 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff f8e9 	bl	8001fc6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d02e      	beq.n	8002e56 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	7e9b      	ldrb	r3, [r3, #26]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12a      	bne.n	8002e56 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2208      	movs	r2, #8
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d123      	bne.n	8002e56 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7ff f9da 	bl	80021cc <LL_ADC_REG_IsConversionOngoing>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d110      	bne.n	8002e3e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	210c      	movs	r1, #12
 8002e28:	438a      	bics	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <ADC_DMAConvCplt+0xc4>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	2201      	movs	r2, #1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3c:	e00b      	b.n	8002e56 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	2220      	movs	r2, #32
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	2201      	movs	r2, #1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7fe ff33 	bl	8001cc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e5e:	e00f      	b.n	8002e80 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	2210      	movs	r2, #16
 8002e66:	4013      	ands	r3, r2
 8002e68:	d004      	beq.n	8002e74 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff fcb9 	bl	80027e4 <HAL_ADC_ErrorCallback>
}
 8002e72:	e005      	b.n	8002e80 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	4798      	blx	r3
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b004      	add	sp, #16
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	fffffefe 	.word	0xfffffefe

08002e8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff fc99 	bl	80027d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	2240      	movs	r2, #64	; 0x40
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	2204      	movs	r2, #4
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fc86 	bl	80027e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b004      	add	sp, #16
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eec:	1dfb      	adds	r3, r7, #7
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ef2:	d809      	bhi.n	8002f08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	001a      	movs	r2, r3
 8002efa:	231f      	movs	r3, #31
 8002efc:	401a      	ands	r2, r3
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <__NVIC_EnableIRQ+0x30>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	4091      	lsls	r1, r2
 8002f04:	000a      	movs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b7f      	cmp	r3, #127	; 0x7f
 8002f28:	d828      	bhi.n	8002f7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f2a:	4a2f      	ldr	r2, [pc, #188]	; (8002fe8 <__NVIC_SetPriority+0xd4>)
 8002f2c:	1dfb      	adds	r3, r7, #7
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	33c0      	adds	r3, #192	; 0xc0
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	589b      	ldr	r3, [r3, r2]
 8002f3a:	1dfa      	adds	r2, r7, #7
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	0011      	movs	r1, r2
 8002f40:	2203      	movs	r2, #3
 8002f42:	400a      	ands	r2, r1
 8002f44:	00d2      	lsls	r2, r2, #3
 8002f46:	21ff      	movs	r1, #255	; 0xff
 8002f48:	4091      	lsls	r1, r2
 8002f4a:	000a      	movs	r2, r1
 8002f4c:	43d2      	mvns	r2, r2
 8002f4e:	401a      	ands	r2, r3
 8002f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	22ff      	movs	r2, #255	; 0xff
 8002f58:	401a      	ands	r2, r3
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	2303      	movs	r3, #3
 8002f62:	4003      	ands	r3, r0
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f68:	481f      	ldr	r0, [pc, #124]	; (8002fe8 <__NVIC_SetPriority+0xd4>)
 8002f6a:	1dfb      	adds	r3, r7, #7
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	430a      	orrs	r2, r1
 8002f74:	33c0      	adds	r3, #192	; 0xc0
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f7a:	e031      	b.n	8002fe0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <__NVIC_SetPriority+0xd8>)
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	0019      	movs	r1, r3
 8002f84:	230f      	movs	r3, #15
 8002f86:	400b      	ands	r3, r1
 8002f88:	3b08      	subs	r3, #8
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3306      	adds	r3, #6
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	18d3      	adds	r3, r2, r3
 8002f92:	3304      	adds	r3, #4
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	1dfa      	adds	r2, r7, #7
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	00d2      	lsls	r2, r2, #3
 8002fa2:	21ff      	movs	r1, #255	; 0xff
 8002fa4:	4091      	lsls	r1, r2
 8002fa6:	000a      	movs	r2, r1
 8002fa8:	43d2      	mvns	r2, r2
 8002faa:	401a      	ands	r2, r3
 8002fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	4003      	ands	r3, r0
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc4:	4809      	ldr	r0, [pc, #36]	; (8002fec <__NVIC_SetPriority+0xd8>)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	001c      	movs	r4, r3
 8002fcc:	230f      	movs	r3, #15
 8002fce:	4023      	ands	r3, r4
 8002fd0:	3b08      	subs	r3, #8
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	3306      	adds	r3, #6
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	18c3      	adds	r3, r0, r3
 8002fdc:	3304      	adds	r3, #4
 8002fde:	601a      	str	r2, [r3, #0]
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b003      	add	sp, #12
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	045b      	lsls	r3, r3, #17
 8003000:	429a      	cmp	r2, r3
 8003002:	d301      	bcc.n	8003008 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003004:	2301      	movs	r3, #1
 8003006:	e010      	b.n	800302a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <SysTick_Config+0x44>)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	3a01      	subs	r2, #1
 800300e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003010:	2301      	movs	r3, #1
 8003012:	425b      	negs	r3, r3
 8003014:	2103      	movs	r1, #3
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff ff7c 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <SysTick_Config+0x44>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003022:	4b04      	ldr	r3, [pc, #16]	; (8003034 <SysTick_Config+0x44>)
 8003024:	2207      	movs	r2, #7
 8003026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	e000e010 	.word	0xe000e010

08003038 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	210f      	movs	r1, #15
 8003044:	187b      	adds	r3, r7, r1
 8003046:	1c02      	adds	r2, r0, #0
 8003048:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	187b      	adds	r3, r7, r1
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b25b      	sxtb	r3, r3
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff ff5d 	bl	8002f14 <__NVIC_SetPriority>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	0002      	movs	r2, r0
 800306a:	1dfb      	adds	r3, r7, #7
 800306c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b25b      	sxtb	r3, r3
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff ff33 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	b002      	add	sp, #8
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f7ff ffaf 	bl	8002ff0 <SysTick_Config>
 8003092:	0003      	movs	r3, r0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e077      	b.n	800319e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3d      	ldr	r2, [pc, #244]	; (80031a8 <HAL_DMA_Init+0x10c>)
 80030b4:	4694      	mov	ip, r2
 80030b6:	4463      	add	r3, ip
 80030b8:	2114      	movs	r1, #20
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd f824 	bl	8000108 <__udivsi3>
 80030c0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80030c2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2225      	movs	r2, #37	; 0x25
 80030cc:	2102      	movs	r1, #2
 80030ce:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4934      	ldr	r1, [pc, #208]	; (80031ac <HAL_DMA_Init+0x110>)
 80030dc:	400a      	ands	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f9c3 	bl	80034a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	01db      	lsls	r3, r3, #7
 8003126:	429a      	cmp	r2, r3
 8003128:	d102      	bne.n	8003130 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	21ff      	movs	r1, #255	; 0xff
 800313a:	400a      	ands	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003146:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_DMA_Init+0xd8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d80d      	bhi.n	8003174 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f9ce 	bl	80034fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e008      	b.n	8003186 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2225      	movs	r2, #37	; 0x25
 8003190:	2101      	movs	r1, #1
 8003192:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	bffdfff8 	.word	0xbffdfff8
 80031ac:	ffff800f 	.word	0xffff800f

080031b0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2317      	movs	r3, #23
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2224      	movs	r2, #36	; 0x24
 80031ca:	5c9b      	ldrb	r3, [r3, r2]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_DMA_Start_IT+0x24>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e070      	b.n	80032b6 <HAL_DMA_Start_IT+0x106>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	2101      	movs	r1, #1
 80031da:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2225      	movs	r2, #37	; 0x25
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d157      	bne.n	8003298 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2225      	movs	r2, #37	; 0x25
 80031ec:	2102      	movs	r1, #2
 80031ee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	438a      	bics	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f909 	bl	8003424 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	210e      	movs	r1, #14
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e00f      	b.n	800324c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2104      	movs	r1, #4
 8003238:	438a      	bics	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	210a      	movs	r1, #10
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	025b      	lsls	r3, r3, #9
 8003256:	4013      	ands	r3, r2
 8003258:	d008      	beq.n	800326c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0049      	lsls	r1, r1, #1
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	0049      	lsls	r1, r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e007      	b.n	80032a8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	2100      	movs	r1, #0
 800329e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032a0:	2317      	movs	r3, #23
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2202      	movs	r2, #2
 80032a6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2224      	movs	r2, #36	; 0x24
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

  return status;
 80032b0:	2317      	movs	r3, #23
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b006      	add	sp, #24
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80032c8:	4b55      	ldr	r3, [pc, #340]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	221c      	movs	r2, #28
 80032dc:	4013      	ands	r3, r2
 80032de:	2204      	movs	r2, #4
 80032e0:	409a      	lsls	r2, r3
 80032e2:	0013      	movs	r3, r2
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	d027      	beq.n	800333a <HAL_DMA_IRQHandler+0x7a>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2204      	movs	r2, #4
 80032ee:	4013      	ands	r3, r2
 80032f0:	d023      	beq.n	800333a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2220      	movs	r2, #32
 80032fa:	4013      	ands	r3, r2
 80032fc:	d107      	bne.n	800330e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2104      	movs	r1, #4
 800330a:	438a      	bics	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	221c      	movs	r2, #28
 8003318:	4013      	ands	r3, r2
 800331a:	2204      	movs	r2, #4
 800331c:	409a      	lsls	r2, r3
 800331e:	4b40      	ldr	r3, [pc, #256]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b00      	cmp	r3, #0
 800332a:	d100      	bne.n	800332e <HAL_DMA_IRQHandler+0x6e>
 800332c:	e073      	b.n	8003416 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	0010      	movs	r0, r2
 8003336:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003338:	e06d      	b.n	8003416 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	221c      	movs	r2, #28
 8003340:	4013      	ands	r3, r2
 8003342:	2202      	movs	r2, #2
 8003344:	409a      	lsls	r2, r3
 8003346:	0013      	movs	r3, r2
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4013      	ands	r3, r2
 800334c:	d02e      	beq.n	80033ac <HAL_DMA_IRQHandler+0xec>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2202      	movs	r2, #2
 8003352:	4013      	ands	r3, r2
 8003354:	d02a      	beq.n	80033ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	4013      	ands	r3, r2
 8003360:	d10b      	bne.n	800337a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	210a      	movs	r1, #10
 800336e:	438a      	bics	r2, r1
 8003370:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2225      	movs	r2, #37	; 0x25
 8003376:	2101      	movs	r1, #1
 8003378:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	221c      	movs	r2, #28
 8003384:	4013      	ands	r3, r2
 8003386:	2202      	movs	r2, #2
 8003388:	409a      	lsls	r2, r3
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d03a      	beq.n	8003416 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	0010      	movs	r0, r2
 80033a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033aa:	e034      	b.n	8003416 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	221c      	movs	r2, #28
 80033b2:	4013      	ands	r3, r2
 80033b4:	2208      	movs	r2, #8
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	d02b      	beq.n	8003418 <HAL_DMA_IRQHandler+0x158>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2208      	movs	r2, #8
 80033c4:	4013      	ands	r3, r2
 80033c6:	d027      	beq.n	8003418 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	210e      	movs	r1, #14
 80033d4:	438a      	bics	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	221c      	movs	r2, #28
 80033e2:	4013      	ands	r3, r2
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_DMA_IRQHandler+0x160>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2225      	movs	r2, #37	; 0x25
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	0010      	movs	r0, r2
 8003414:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46c0      	nop			; (mov r8, r8)
}
 800341a:	46bd      	mov	sp, r7
 800341c:	b004      	add	sp, #16
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40020000 	.word	0x40020000

08003424 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800343a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <DMA_SetConfig+0x7c>)
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	221c      	movs	r2, #28
 8003458:	4013      	ands	r3, r2
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <DMA_SetConfig+0x7c>)
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b10      	cmp	r3, #16
 8003472:	d108      	bne.n	8003486 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003484:	e007      	b.n	8003496 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	60da      	str	r2, [r3, #12]
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b004      	add	sp, #16
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	40020000 	.word	0x40020000

080034a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	001a      	movs	r2, r3
 80034b2:	23ff      	movs	r3, #255	; 0xff
 80034b4:	4013      	ands	r3, r2
 80034b6:	3b08      	subs	r3, #8
 80034b8:	2114      	movs	r1, #20
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7fc fe24 	bl	8000108 <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80034cc:	4694      	mov	ip, r2
 80034ce:	4463      	add	r3, ip
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	001a      	movs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80034dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	221c      	movs	r2, #28
 80034e2:	4013      	ands	r3, r2
 80034e4:	2201      	movs	r2, #1
 80034e6:	409a      	lsls	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	10008200 	.word	0x10008200
 80034f8:	40020880 	.word	0x40020880

080034fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	22ff      	movs	r2, #255	; 0xff
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4a0a      	ldr	r2, [pc, #40]	; (800353c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003512:	4694      	mov	ip, r2
 8003514:	4463      	add	r3, ip
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	001a      	movs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003522:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	4013      	ands	r3, r2
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}
 800353c:	1000823f 	.word	0x1000823f
 8003540:	40020940 	.word	0x40020940

08003544 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003552:	e153      	b.n	80037fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4091      	lsls	r1, r2
 800355e:	000a      	movs	r2, r1
 8003560:	4013      	ands	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d100      	bne.n	800356c <HAL_GPIO_Init+0x28>
 800356a:	e144      	b.n	80037f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x38>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b12      	cmp	r3, #18
 800357a:	d125      	bne.n	80035c8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	08da      	lsrs	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	58d3      	ldr	r3, [r2, r3]
 8003588:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2207      	movs	r2, #7
 800358e:	4013      	ands	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	220f      	movs	r2, #15
 8003594:	409a      	lsls	r2, r3
 8003596:	0013      	movs	r3, r2
 8003598:	43da      	mvns	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	220f      	movs	r2, #15
 80035a6:	401a      	ands	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2107      	movs	r1, #7
 80035ac:	400b      	ands	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	409a      	lsls	r2, r3
 80035b2:	0013      	movs	r3, r2
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	08da      	lsrs	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	6979      	ldr	r1, [r7, #20]
 80035c6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	409a      	lsls	r2, r3
 80035d6:	0013      	movs	r3, r2
 80035d8:	43da      	mvns	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2203      	movs	r2, #3
 80035e6:	401a      	ands	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	409a      	lsls	r2, r3
 80035ee:	0013      	movs	r3, r2
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d00b      	beq.n	800361c <HAL_GPIO_Init+0xd8>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d007      	beq.n	800361c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003610:	2b11      	cmp	r3, #17
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b12      	cmp	r3, #18
 800361a:	d130      	bne.n	800367e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	409a      	lsls	r2, r3
 800362a:	0013      	movs	r3, r2
 800362c:	43da      	mvns	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4013      	ands	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003652:	2201      	movs	r2, #1
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	409a      	lsls	r2, r3
 8003658:	0013      	movs	r3, r2
 800365a:	43da      	mvns	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4013      	ands	r3, r2
 8003660:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	2201      	movs	r2, #1
 800366a:	401a      	ands	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	409a      	lsls	r2, r3
 8003670:	0013      	movs	r3, r2
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d017      	beq.n	80036b6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	409a      	lsls	r2, r3
 8003694:	0013      	movs	r3, r2
 8003696:	43da      	mvns	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	4013      	ands	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	0013      	movs	r3, r2
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	055b      	lsls	r3, r3, #21
 80036be:	4013      	ands	r3, r2
 80036c0:	d100      	bne.n	80036c4 <HAL_GPIO_Init+0x180>
 80036c2:	e098      	b.n	80037f6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80036c4:	4a53      	ldr	r2, [pc, #332]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3318      	adds	r3, #24
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4013      	ands	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	220f      	movs	r2, #15
 80036dc:	409a      	lsls	r2, r3
 80036de:	0013      	movs	r3, r2
 80036e0:	43da      	mvns	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	23a0      	movs	r3, #160	; 0xa0
 80036ec:	05db      	lsls	r3, r3, #23
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d019      	beq.n	8003726 <HAL_GPIO_Init+0x1e2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a48      	ldr	r2, [pc, #288]	; (8003818 <HAL_GPIO_Init+0x2d4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_GPIO_Init+0x1de>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_GPIO_Init+0x2d8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00d      	beq.n	800371e <HAL_GPIO_Init+0x1da>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <HAL_GPIO_Init+0x2dc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <HAL_GPIO_Init+0x1d6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a45      	ldr	r2, [pc, #276]	; (8003824 <HAL_GPIO_Init+0x2e0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_GPIO_Init+0x1d2>
 8003712:	2305      	movs	r3, #5
 8003714:	e008      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003716:	2306      	movs	r3, #6
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 800371a:	2303      	movs	r3, #3
 800371c:	e004      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 800371e:	2302      	movs	r3, #2
 8003720:	e002      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003726:	2300      	movs	r3, #0
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	2103      	movs	r1, #3
 800372c:	400a      	ands	r2, r1
 800372e:	00d2      	lsls	r2, r2, #3
 8003730:	4093      	lsls	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003738:	4936      	ldr	r1, [pc, #216]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3318      	adds	r3, #24
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003746:	4a33      	ldr	r2, [pc, #204]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	58d3      	ldr	r3, [r2, r3]
 800374c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	43da      	mvns	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	025b      	lsls	r3, r3, #9
 8003760:	4013      	ands	r3, r2
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800376c:	4929      	ldr	r1, [pc, #164]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003776:	2384      	movs	r3, #132	; 0x84
 8003778:	58d3      	ldr	r3, [r2, r3]
 800377a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43da      	mvns	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	4013      	ands	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	029b      	lsls	r3, r3, #10
 800378e:	4013      	ands	r3, r2
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800379a:	491e      	ldr	r1, [pc, #120]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800379c:	2284      	movs	r2, #132	; 0x84
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4013      	ands	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	035b      	lsls	r3, r3, #13
 80037ba:	4013      	ands	r3, r2
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80037c6:	4b13      	ldr	r3, [pc, #76]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	43da      	mvns	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4013      	ands	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	039b      	lsls	r3, r3, #14
 80037e4:	4013      	ands	r3, r2
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3301      	adds	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	40da      	lsrs	r2, r3
 8003804:	1e13      	subs	r3, r2, #0
 8003806:	d000      	beq.n	800380a <HAL_GPIO_Init+0x2c6>
 8003808:	e6a4      	b.n	8003554 <HAL_GPIO_Init+0x10>
  }
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b006      	add	sp, #24
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021800 	.word	0x40021800
 8003818:	50000400 	.word	0x50000400
 800381c:	50000800 	.word	0x50000800
 8003820:	50000c00 	.word	0x50000c00
 8003824:	50001400 	.word	0x50001400

08003828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	000a      	movs	r2, r1
 8003832:	1cbb      	adds	r3, r7, #2
 8003834:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	1cba      	adds	r2, r7, #2
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	4013      	ands	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003842:	230f      	movs	r3, #15
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e003      	b.n	8003854 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384c:	230f      	movs	r3, #15
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003854:	230f      	movs	r3, #15
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	781b      	ldrb	r3, [r3, #0]
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	0008      	movs	r0, r1
 800386c:	0011      	movs	r1, r2
 800386e:	1cbb      	adds	r3, r7, #2
 8003870:	1c02      	adds	r2, r0, #0
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	1c7b      	adds	r3, r7, #1
 8003876:	1c0a      	adds	r2, r1, #0
 8003878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800387a:	1c7b      	adds	r3, r7, #1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	1cbb      	adds	r3, r7, #2
 8003884:	881a      	ldrh	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800388a:	e003      	b.n	8003894 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388c:	1cbb      	adds	r3, r7, #2
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	000a      	movs	r2, r1
 80038a6:	1cbb      	adds	r3, r7, #2
 80038a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038b0:	1cbb      	adds	r3, r7, #2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	1cb9      	adds	r1, r7, #2
 80038c0:	8809      	ldrh	r1, [r1, #0]
 80038c2:	400b      	ands	r3, r1
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	619a      	str	r2, [r3, #24]
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	0002      	movs	r2, r0
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	1dba      	adds	r2, r7, #6
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	4013      	ands	r3, r2
 80038ea:	d008      	beq.n	80038fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038ee:	1dba      	adds	r2, r7, #6
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80038f4:	1dbb      	adds	r3, r7, #6
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 f815 	bl	8003928 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	1dba      	adds	r2, r7, #6
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	4013      	ands	r3, r2
 8003908:	d008      	beq.n	800391c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800390c:	1dba      	adds	r2, r7, #6
 800390e:	8812      	ldrh	r2, [r2, #0]
 8003910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003912:	1dbb      	adds	r3, r7, #6
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	0018      	movs	r0, r3
 8003918:	f7fe fa26 	bl	8001d68 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021800 	.word	0x40021800

08003928 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	0002      	movs	r2, r0
 8003930:	1dbb      	adds	r3, r7, #6
 8003932:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e08f      	b.n	8003a6e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2241      	movs	r2, #65	; 0x41
 8003952:	5c9b      	ldrb	r3, [r3, r2]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d107      	bne.n	800396a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2240      	movs	r2, #64	; 0x40
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f7fe f871 	bl	8001a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2241      	movs	r2, #65	; 0x41
 800396e:	2124      	movs	r1, #36	; 0x24
 8003970:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	438a      	bics	r2, r1
 8003980:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	493b      	ldr	r1, [pc, #236]	; (8003a78 <HAL_I2C_Init+0x13c>)
 800398c:	400a      	ands	r2, r1
 800398e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4938      	ldr	r1, [pc, #224]	; (8003a7c <HAL_I2C_Init+0x140>)
 800399c:	400a      	ands	r2, r1
 800399e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d108      	bne.n	80039ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	0209      	lsls	r1, r1, #8
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e007      	b.n	80039ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2184      	movs	r1, #132	; 0x84
 80039c4:	0209      	lsls	r1, r1, #8
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d109      	bne.n	80039e6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	0109      	lsls	r1, r1, #4
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	e007      	b.n	80039f6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4923      	ldr	r1, [pc, #140]	; (8003a80 <HAL_I2C_Init+0x144>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4920      	ldr	r1, [pc, #128]	; (8003a84 <HAL_I2C_Init+0x148>)
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	491a      	ldr	r1, [pc, #104]	; (8003a7c <HAL_I2C_Init+0x140>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69d9      	ldr	r1, [r3, #28]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2241      	movs	r2, #65	; 0x41
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2242      	movs	r2, #66	; 0x42
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b002      	add	sp, #8
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	f0ffffff 	.word	0xf0ffffff
 8003a7c:	ffff7fff 	.word	0xffff7fff
 8003a80:	fffff7ff 	.word	0xfffff7ff
 8003a84:	02008000 	.word	0x02008000

08003a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2241      	movs	r2, #65	; 0x41
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d138      	bne.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2240      	movs	r2, #64	; 0x40
 8003aa2:	5c9b      	ldrb	r3, [r3, r2]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e032      	b.n	8003b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2241      	movs	r2, #65	; 0x41
 8003ab8:	2124      	movs	r1, #36	; 0x24
 8003aba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	438a      	bics	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4911      	ldr	r1, [pc, #68]	; (8003b1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2241      	movs	r2, #65	; 0x41
 8003b00:	2120      	movs	r1, #32
 8003b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	ffffefff 	.word	0xffffefff

08003b20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2241      	movs	r2, #65	; 0x41
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b20      	cmp	r3, #32
 8003b34:	d139      	bne.n	8003baa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2240      	movs	r2, #64	; 0x40
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e033      	b.n	8003bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	2101      	movs	r1, #1
 8003b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2241      	movs	r2, #65	; 0x41
 8003b50:	2124      	movs	r1, #36	; 0x24
 8003b52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2241      	movs	r2, #65	; 0x41
 8003b9a:	2120      	movs	r1, #32
 8003b9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	fffff0ff 	.word	0xfffff0ff

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e1d0      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1e>
 8003bd4:	e069      	b.n	8003caa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd6:	4bc8      	ldr	r3, [pc, #800]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2238      	movs	r2, #56	; 0x38
 8003bdc:	4013      	ands	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d15d      	bne.n	8003caa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e1bc      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	025b      	lsls	r3, r3, #9
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_OscConfig+0x56>
 8003bfe:	4bbe      	ldr	r3, [pc, #760]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4bbd      	ldr	r3, [pc, #756]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0249      	lsls	r1, r1, #9
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e020      	b.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	23a0      	movs	r3, #160	; 0xa0
 8003c14:	02db      	lsls	r3, r3, #11
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d10e      	bne.n	8003c38 <HAL_RCC_OscConfig+0x80>
 8003c1a:	4bb7      	ldr	r3, [pc, #732]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4bb6      	ldr	r3, [pc, #728]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c20:	2180      	movs	r1, #128	; 0x80
 8003c22:	02c9      	lsls	r1, r1, #11
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	4bb3      	ldr	r3, [pc, #716]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4bb2      	ldr	r3, [pc, #712]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	0249      	lsls	r1, r1, #9
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c38:	4baf      	ldr	r3, [pc, #700]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4bae      	ldr	r3, [pc, #696]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c3e:	49af      	ldr	r1, [pc, #700]	; (8003efc <HAL_RCC_OscConfig+0x344>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	4bac      	ldr	r3, [pc, #688]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4bab      	ldr	r3, [pc, #684]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c4a:	49ad      	ldr	r1, [pc, #692]	; (8003f00 <HAL_RCC_OscConfig+0x348>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d014      	beq.n	8003c82 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe f956 	bl	8001f08 <HAL_GetTick>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c62:	f7fe f951 	bl	8001f08 <HAL_GetTick>
 8003c66:	0002      	movs	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e17b      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c74:	4ba0      	ldr	r3, [pc, #640]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0xaa>
 8003c80:	e013      	b.n	8003caa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fe f941 	bl	8001f08 <HAL_GetTick>
 8003c86:	0003      	movs	r3, r0
 8003c88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c8c:	f7fe f93c 	bl	8001f08 <HAL_GetTick>
 8003c90:	0002      	movs	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e166      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9e:	4b96      	ldr	r3, [pc, #600]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	029b      	lsls	r3, r3, #10
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <HAL_RCC_OscConfig+0xfe>
 8003cb4:	e086      	b.n	8003dc4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	4b90      	ldr	r3, [pc, #576]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2238      	movs	r2, #56	; 0x38
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d12f      	bne.n	8003d26 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e14c      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <HAL_RCC_OscConfig+0x34c>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	4b85      	ldr	r3, [pc, #532]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d112      	bne.n	8003d14 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cee:	4b82      	ldr	r3, [pc, #520]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a85      	ldr	r2, [pc, #532]	; (8003f08 <HAL_RCC_OscConfig+0x350>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d02:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	2207      	movs	r2, #7
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	4a7f      	ldr	r2, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x354>)
 8003d0e:	40da      	lsrs	r2, r3
 8003d10:	4b7f      	ldr	r3, [pc, #508]	; (8003f10 <HAL_RCC_OscConfig+0x358>)
 8003d12:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d14:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCC_OscConfig+0x35c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7fe f899 	bl	8001e50 <HAL_InitTick>
 8003d1e:	1e03      	subs	r3, r0, #0
 8003d20:	d050      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e122      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d030      	beq.n	8003d90 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d2e:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a75      	ldr	r2, [pc, #468]	; (8003f08 <HAL_RCC_OscConfig+0x350>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	0019      	movs	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	4b6e      	ldr	r3, [pc, #440]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003d42:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b6c      	ldr	r3, [pc, #432]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d48:	2180      	movs	r1, #128	; 0x80
 8003d4a:	0049      	lsls	r1, r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe f8da 	bl	8001f08 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe f8d5 	bl	8001f08 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0ff      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4013      	ands	r3, r2
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a61      	ldr	r2, [pc, #388]	; (8003f04 <HAL_RCC_OscConfig+0x34c>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	021a      	lsls	r2, r3, #8
 8003d88:	4b5b      	ldr	r3, [pc, #364]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e019      	b.n	8003dc4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003d90:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003d96:	4960      	ldr	r1, [pc, #384]	; (8003f18 <HAL_RCC_OscConfig+0x360>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe f8b4 	bl	8001f08 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003da6:	f7fe f8af 	bl	8001f08 <HAL_GetTick>
 8003daa:	0002      	movs	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0d9      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db8:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d042      	beq.n	8003e54 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003dce:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2238      	movs	r2, #56	; 0x38
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b18      	cmp	r3, #24
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d138      	bne.n	8003e54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0c2      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d019      	beq.n	8003e22 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003df0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003df2:	4b41      	ldr	r3, [pc, #260]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe f885 	bl	8001f08 <HAL_GetTick>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e04:	f7fe f880 	bl	8001f08 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0aa      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003e16:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d0f1      	beq.n	8003e04 <HAL_RCC_OscConfig+0x24c>
 8003e20:	e018      	b.n	8003e54 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	438a      	bics	r2, r1
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fe f86b 	bl	8001f08 <HAL_GetTick>
 8003e32:	0003      	movs	r3, r0
 8003e34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e38:	f7fe f866 	bl	8001f08 <HAL_GetTick>
 8003e3c:	0002      	movs	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e090      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4e:	2202      	movs	r2, #2
 8003e50:	4013      	ands	r3, r2
 8003e52:	d1f1      	bne.n	8003e38 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d100      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2a8>
 8003e5e:	e084      	b.n	8003f6a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e60:	230f      	movs	r3, #15
 8003e62:	18fb      	adds	r3, r7, r3
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2238      	movs	r2, #56	; 0x38
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d000      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2c6>
 8003e7c:	e075      	b.n	8003f6a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e074      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d106      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2e0>
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	430a      	orrs	r2, r1
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x31a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x302>
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ea2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003eae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x31a>
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	438a      	bics	r2, r1
 8003ec4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x340>)
 8003ecc:	2104      	movs	r1, #4
 8003ece:	438a      	bics	r2, r1
 8003ed0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fe f815 	bl	8001f08 <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f810 	bl	8001f08 <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x364>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d915      	bls.n	8003f20 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e039      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	fffeffff 	.word	0xfffeffff
 8003f00:	fffbffff 	.word	0xfffbffff
 8003f04:	ffff80ff 	.word	0xffff80ff
 8003f08:	ffffc7ff 	.word	0xffffc7ff
 8003f0c:	02dc6c00 	.word	0x02dc6c00
 8003f10:	2000005c 	.word	0x2000005c
 8003f14:	20000060 	.word	0x20000060
 8003f18:	fffffeff 	.word	0xfffffeff
 8003f1c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_RCC_OscConfig+0x3bc>)
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	2202      	movs	r2, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	d0dc      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x32c>
 8003f2a:	e013      	b.n	8003f54 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ffec 	bl	8001f08 <HAL_GetTick>
 8003f30:	0003      	movs	r3, r0
 8003f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003f34:	e009      	b.n	8003f4a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd ffe7 	bl	8001f08 <HAL_GetTick>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <HAL_RCC_OscConfig+0x3c0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e010      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_OscConfig+0x3bc>)
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	2202      	movs	r2, #2
 8003f50:	4013      	ands	r3, r2
 8003f52:	d1f0      	bne.n	8003f36 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCC_OscConfig+0x3bc>)
 8003f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <HAL_RCC_OscConfig+0x3bc>)
 8003f64:	4905      	ldr	r1, [pc, #20]	; (8003f7c <HAL_RCC_OscConfig+0x3c4>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000
 8003f78:	00001388 	.word	0x00001388
 8003f7c:	efffffff 	.word	0xefffffff

08003f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0e9      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2207      	movs	r2, #7
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d91e      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b73      	ldr	r3, [pc, #460]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2207      	movs	r2, #7
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd ffa8 	bl	8001f08 <HAL_GetTick>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fbc:	e009      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbe:	f7fd ffa3 	bl	8001f08 <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0ca      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fd2:	4b67      	ldr	r3, [pc, #412]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	4013      	ands	r3, r2
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1ee      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d017      	beq.n	800401a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d008      	beq.n	8004006 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ff4:	4b60      	ldr	r3, [pc, #384]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a60      	ldr	r2, [pc, #384]	; (800417c <HAL_RCC_ClockConfig+0x1fc>)
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffe:	21b0      	movs	r1, #176	; 0xb0
 8004000:	0109      	lsls	r1, r1, #4
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004006:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4a5d      	ldr	r2, [pc, #372]	; (8004180 <HAL_RCC_ClockConfig+0x200>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d055      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004024:	4b54      	ldr	r3, [pc, #336]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	221c      	movs	r2, #28
 800402a:	4393      	bics	r3, r2
 800402c:	0019      	movs	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	4b51      	ldr	r3, [pc, #324]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004040:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	029b      	lsls	r3, r3, #10
 8004048:	4013      	ands	r3, r2
 800404a:	d11f      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e08b      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4013      	ands	r3, r2
 8004062:	d113      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e07f      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d106      	bne.n	800407e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e074      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800407e:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2202      	movs	r2, #2
 8004084:	4013      	ands	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e06d      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800408c:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2207      	movs	r2, #7
 8004092:	4393      	bics	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800409c:	430a      	orrs	r2, r1
 800409e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd ff32 	bl	8001f08 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a8:	e009      	b.n	80040be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040aa:	f7fd ff2d 	bl	8001f08 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e054      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2238      	movs	r2, #56	; 0x38
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1ec      	bne.n	80040aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2207      	movs	r2, #7
 80040d6:	4013      	ands	r3, r2
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d21e      	bcs.n	800411c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2207      	movs	r2, #7
 80040e4:	4393      	bics	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040f0:	f7fd ff0a 	bl	8001f08 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040f8:	e009      	b.n	800410e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040fa:	f7fd ff05 	bl	8001f08 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e02c      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2207      	movs	r2, #7
 8004114:	4013      	ands	r3, r2
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d1ee      	bne.n	80040fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2204      	movs	r2, #4
 8004122:	4013      	ands	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <HAL_RCC_ClockConfig+0x204>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800413a:	f000 f82b 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 800413e:	0001      	movs	r1, r0
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	220f      	movs	r2, #15
 8004148:	401a      	ands	r2, r3
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_RCC_ClockConfig+0x208>)
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	58d3      	ldr	r3, [r2, r3]
 8004150:	221f      	movs	r2, #31
 8004152:	4013      	ands	r3, r2
 8004154:	000a      	movs	r2, r1
 8004156:	40da      	lsrs	r2, r3
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <HAL_RCC_ClockConfig+0x20c>)
 800415a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <HAL_RCC_ClockConfig+0x210>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0018      	movs	r0, r3
 8004162:	f7fd fe75 	bl	8001e50 <HAL_InitTick>
 8004166:	0003      	movs	r3, r0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b004      	add	sp, #16
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40022000 	.word	0x40022000
 8004174:	00001388 	.word	0x00001388
 8004178:	40021000 	.word	0x40021000
 800417c:	ffff84ff 	.word	0xffff84ff
 8004180:	fffff0ff 	.word	0xfffff0ff
 8004184:	ffff8fff 	.word	0xffff8fff
 8004188:	08004d4c 	.word	0x08004d4c
 800418c:	2000005c 	.word	0x2000005c
 8004190:	20000060 	.word	0x20000060

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <HAL_RCC_GetSysClockFreq+0x78>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2238      	movs	r2, #56	; 0x38
 80041a0:	4013      	ands	r3, r2
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041a4:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_GetSysClockFreq+0x78>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0adb      	lsrs	r3, r3, #11
 80041aa:	2207      	movs	r2, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	2201      	movs	r2, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	0013      	movs	r3, r2
 80041b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	4815      	ldr	r0, [pc, #84]	; (8004210 <HAL_RCC_GetSysClockFreq+0x7c>)
 80041ba:	f7fb ffa5 	bl	8000108 <__udivsi3>
 80041be:	0003      	movs	r3, r0
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	e01e      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_RCC_GetSysClockFreq+0x78>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2238      	movs	r2, #56	; 0x38
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_RCC_GetSysClockFreq+0x80>)
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	e015      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80041d6:	4b0d      	ldr	r3, [pc, #52]	; (800420c <HAL_RCC_GetSysClockFreq+0x78>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2238      	movs	r2, #56	; 0x38
 80041dc:	4013      	ands	r3, r2
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d103      	bne.n	80041ea <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	e00b      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <HAL_RCC_GetSysClockFreq+0x78>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2238      	movs	r2, #56	; 0x38
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b18      	cmp	r3, #24
 80041f4:	d103      	bne.n	80041fe <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041f6:	23fa      	movs	r3, #250	; 0xfa
 80041f8:	01db      	lsls	r3, r3, #7
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	e001      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004202:	687b      	ldr	r3, [r7, #4]
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	02dc6c00 	.word	0x02dc6c00
 8004214:	007a1200 	.word	0x007a1200

08004218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004220:	2313      	movs	r3, #19
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004228:	2312      	movs	r3, #18
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	4013      	ands	r3, r2
 800423a:	d100      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800423c:	e079      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2011      	movs	r0, #17
 8004240:	183b      	adds	r3, r7, r0
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	055b      	lsls	r3, r3, #21
 800424e:	4013      	ands	r3, r2
 8004250:	d110      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004256:	4b60      	ldr	r3, [pc, #384]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0549      	lsls	r1, r1, #21
 800425c:	430a      	orrs	r2, r1
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004260:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	055b      	lsls	r3, r3, #21
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	183b      	adds	r3, r7, r0
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004274:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004278:	23c0      	movs	r3, #192	; 0xc0
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4013      	ands	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d019      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	429a      	cmp	r2, r3
 800428e:	d014      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004290:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004296:	4013      	ands	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800429c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	0249      	lsls	r1, r1, #9
 80042a4:	430a      	orrs	r2, r1
 80042a6:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a8:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042ae:	494c      	ldr	r1, [pc, #304]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2201      	movs	r2, #1
 80042be:	4013      	ands	r3, r2
 80042c0:	d016      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd fe21 	bl	8001f08 <HAL_GetTick>
 80042c6:	0003      	movs	r3, r0
 80042c8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80042ca:	e00c      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fd fe1c 	bl	8001f08 <HAL_GetTick>
 80042d0:	0002      	movs	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	4a43      	ldr	r2, [pc, #268]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d904      	bls.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80042dc:	2313      	movs	r3, #19
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	2203      	movs	r2, #3
 80042e2:	701a      	strb	r2, [r3, #0]
          break;
 80042e4:	e004      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80042e6:	4b3c      	ldr	r3, [pc, #240]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2202      	movs	r2, #2
 80042ec:	4013      	ands	r3, r2
 80042ee:	d0ed      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80042f0:	2313      	movs	r3, #19
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004300:	4013      	ands	r3, r2
 8004302:	0019      	movs	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800430a:	430a      	orrs	r2, r1
 800430c:	65da      	str	r2, [r3, #92]	; 0x5c
 800430e:	e005      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	2312      	movs	r3, #18
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2213      	movs	r2, #19
 8004316:	18ba      	adds	r2, r7, r2
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800431c:	2311      	movs	r3, #17
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800432a:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800432c:	492e      	ldr	r1, [pc, #184]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	400a      	ands	r2, r1
 8004330:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433c:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	2203      	movs	r2, #3
 8004342:	4393      	bics	r3, r2
 8004344:	0019      	movs	r1, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800434c:	430a      	orrs	r2, r1
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2240      	movs	r2, #64	; 0x40
 8004356:	4013      	ands	r3, r2
 8004358:	d009      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800435a:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800436a:	430a      	orrs	r2, r1
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	01db      	lsls	r3, r3, #7
 8004376:	4013      	ands	r3, r2
 8004378:	d008      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437a:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	0899      	lsrs	r1, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004388:	430a      	orrs	r2, r1
 800438a:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	4013      	ands	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800439e:	4013      	ands	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043a8:	430a      	orrs	r2, r1
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da09      	bge.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	22e0      	movs	r2, #224	; 0xe0
 80043ba:	4393      	bics	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80043c8:	2312      	movs	r3, #18
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	781b      	ldrb	r3, [r3, #0]
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b006      	add	sp, #24
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	40021000 	.word	0x40021000
 80043dc:	fffffcff 	.word	0xfffffcff
 80043e0:	fffeffff 	.word	0xfffeffff
 80043e4:	00001388 	.word	0x00001388
 80043e8:	efffffff 	.word	0xefffffff
 80043ec:	ffffcfff 	.word	0xffffcfff
 80043f0:	ffff3fff 	.word	0xffff3fff

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e04a      	b.n	800449c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	223d      	movs	r2, #61	; 0x3d
 800440a:	5c9b      	ldrb	r3, [r3, r2]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	223c      	movs	r2, #60	; 0x3c
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f7fd fb77 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	223d      	movs	r2, #61	; 0x3d
 8004426:	2102      	movs	r1, #2
 8004428:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	0019      	movs	r1, r3
 8004434:	0010      	movs	r0, r2
 8004436:	f000 fa83 	bl	8004940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2248      	movs	r2, #72	; 0x48
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	223e      	movs	r2, #62	; 0x3e
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	223f      	movs	r2, #63	; 0x3f
 800444e:	2101      	movs	r1, #1
 8004450:	5499      	strb	r1, [r3, r2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2240      	movs	r2, #64	; 0x40
 8004456:	2101      	movs	r1, #1
 8004458:	5499      	strb	r1, [r3, r2]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2241      	movs	r2, #65	; 0x41
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2242      	movs	r2, #66	; 0x42
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2243      	movs	r2, #67	; 0x43
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2244      	movs	r2, #68	; 0x44
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2245      	movs	r2, #69	; 0x45
 800447e:	2101      	movs	r1, #1
 8004480:	5499      	strb	r1, [r3, r2]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2246      	movs	r2, #70	; 0x46
 8004486:	2101      	movs	r1, #1
 8004488:	5499      	strb	r1, [r3, r2]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2247      	movs	r2, #71	; 0x47
 800448e:	2101      	movs	r1, #1
 8004490:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	223d      	movs	r2, #61	; 0x3d
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	223d      	movs	r2, #61	; 0x3d
 80044b0:	5c9b      	ldrb	r3, [r3, r2]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e037      	b.n	800452c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	223d      	movs	r2, #61	; 0x3d
 80044c0:	2102      	movs	r1, #2
 80044c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2101      	movs	r1, #1
 80044d0:	430a      	orrs	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <HAL_TIM_Base_Start_IT+0x90>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x44>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIM_Base_Start_IT+0x94>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d116      	bne.n	8004516 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_TIM_Base_Start_IT+0x98>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d016      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x84>
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	025b      	lsls	r3, r3, #9
 8004500:	429a      	cmp	r2, r3
 8004502:	d011      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2101      	movs	r1, #1
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004514:	e008      	b.n	8004528 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2101      	movs	r1, #1
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e000      	b.n	800452a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40000400 	.word	0x40000400
 800453c:	00010007 	.word	0x00010007

08004540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2202      	movs	r2, #2
 800455c:	4013      	ands	r3, r2
 800455e:	d021      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2202      	movs	r2, #2
 8004564:	4013      	ands	r3, r2
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2203      	movs	r2, #3
 800456e:	4252      	negs	r2, r2
 8004570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2203      	movs	r2, #3
 8004580:	4013      	ands	r3, r2
 8004582:	d004      	beq.n	800458e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	0018      	movs	r0, r3
 8004588:	f000 f9c2 	bl	8004910 <HAL_TIM_IC_CaptureCallback>
 800458c:	e007      	b.n	800459e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 f9b5 	bl	8004900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 f9c1 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2204      	movs	r2, #4
 80045a8:	4013      	ands	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2204      	movs	r2, #4
 80045b0:	4013      	ands	r3, r2
 80045b2:	d01e      	beq.n	80045f2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2205      	movs	r2, #5
 80045ba:	4252      	negs	r2, r2
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	23c0      	movs	r3, #192	; 0xc0
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4013      	ands	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 f99b 	bl	8004910 <HAL_TIM_IC_CaptureCallback>
 80045da:	e007      	b.n	80045ec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	0018      	movs	r0, r3
 80045e0:	f000 f98e 	bl	8004900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 f99a 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2208      	movs	r2, #8
 80045f6:	4013      	ands	r3, r2
 80045f8:	d021      	beq.n	800463e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2208      	movs	r2, #8
 80045fe:	4013      	ands	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2209      	movs	r2, #9
 8004608:	4252      	negs	r2, r2
 800460a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2204      	movs	r2, #4
 8004610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	2203      	movs	r2, #3
 800461a:	4013      	ands	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f000 f975 	bl	8004910 <HAL_TIM_IC_CaptureCallback>
 8004626:	e007      	b.n	8004638 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f968 	bl	8004900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	0018      	movs	r0, r3
 8004634:	f000 f974 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2210      	movs	r2, #16
 8004642:	4013      	ands	r3, r2
 8004644:	d022      	beq.n	800468c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2210      	movs	r2, #16
 800464a:	4013      	ands	r3, r2
 800464c:	d01e      	beq.n	800468c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2211      	movs	r2, #17
 8004654:	4252      	negs	r2, r2
 8004656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2208      	movs	r2, #8
 800465c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	23c0      	movs	r3, #192	; 0xc0
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f94e 	bl	8004910 <HAL_TIM_IC_CaptureCallback>
 8004674:	e007      	b.n	8004686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 f941 	bl	8004900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f94d 	bl	8004920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2201      	movs	r2, #1
 8004690:	4013      	ands	r3, r2
 8004692:	d00c      	beq.n	80046ae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	4013      	ands	r3, r2
 800469a:	d008      	beq.n	80046ae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2202      	movs	r2, #2
 80046a2:	4252      	negs	r2, r2
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 f921 	bl	80048f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	4013      	ands	r3, r2
 80046b4:	d00c      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2280      	movs	r2, #128	; 0x80
 80046ba:	4013      	ands	r3, r2
 80046bc:	d008      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2281      	movs	r2, #129	; 0x81
 80046c4:	4252      	negs	r2, r2
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 faaa 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4013      	ands	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	4013      	ands	r3, r2
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a16      	ldr	r2, [pc, #88]	; (8004740 <HAL_TIM_IRQHandler+0x200>)
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f000 faa1 	bl	8004c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	4013      	ands	r3, r2
 80046f8:	d00c      	beq.n	8004714 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2240      	movs	r2, #64	; 0x40
 80046fe:	4013      	ands	r3, r2
 8004700:	d008      	beq.n	8004714 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2241      	movs	r2, #65	; 0x41
 8004708:	4252      	negs	r2, r2
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0018      	movs	r0, r3
 8004710:	f000 f90e 	bl	8004930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2220      	movs	r2, #32
 8004718:	4013      	ands	r3, r2
 800471a:	d00c      	beq.n	8004736 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	4013      	ands	r3, r2
 8004722:	d008      	beq.n	8004736 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2221      	movs	r2, #33	; 0x21
 800472a:	4252      	negs	r2, r2
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 fa6f 	bl	8004c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b004      	add	sp, #16
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	fffffeff 	.word	0xfffffeff

08004744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	230f      	movs	r3, #15
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	223c      	movs	r2, #60	; 0x3c
 800475a:	5c9b      	ldrb	r3, [r3, r2]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIM_ConfigClockSource+0x20>
 8004760:	2302      	movs	r3, #2
 8004762:	e0bc      	b.n	80048de <HAL_TIM_ConfigClockSource+0x19a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	223c      	movs	r2, #60	; 0x3c
 8004768:	2101      	movs	r1, #1
 800476a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	223d      	movs	r2, #61	; 0x3d
 8004770:	2102      	movs	r1, #2
 8004772:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a5a      	ldr	r2, [pc, #360]	; (80048e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004780:	4013      	ands	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a59      	ldr	r2, [pc, #356]	; (80048ec <HAL_TIM_ConfigClockSource+0x1a8>)
 8004788:	4013      	ands	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2280      	movs	r2, #128	; 0x80
 800479a:	0192      	lsls	r2, r2, #6
 800479c:	4293      	cmp	r3, r2
 800479e:	d040      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xde>
 80047a0:	2280      	movs	r2, #128	; 0x80
 80047a2:	0192      	lsls	r2, r2, #6
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d900      	bls.n	80047aa <HAL_TIM_ConfigClockSource+0x66>
 80047a8:	e088      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	0152      	lsls	r2, r2, #5
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d100      	bne.n	80047b4 <HAL_TIM_ConfigClockSource+0x70>
 80047b2:	e088      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x182>
 80047b4:	2280      	movs	r2, #128	; 0x80
 80047b6:	0152      	lsls	r2, r2, #5
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d900      	bls.n	80047be <HAL_TIM_ConfigClockSource+0x7a>
 80047bc:	e07e      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047be:	2b70      	cmp	r3, #112	; 0x70
 80047c0:	d018      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xb0>
 80047c2:	d900      	bls.n	80047c6 <HAL_TIM_ConfigClockSource+0x82>
 80047c4:	e07a      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047c6:	2b60      	cmp	r3, #96	; 0x60
 80047c8:	d04f      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x126>
 80047ca:	d900      	bls.n	80047ce <HAL_TIM_ConfigClockSource+0x8a>
 80047cc:	e076      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047ce:	2b50      	cmp	r3, #80	; 0x50
 80047d0:	d03b      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x106>
 80047d2:	d900      	bls.n	80047d6 <HAL_TIM_ConfigClockSource+0x92>
 80047d4:	e072      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d057      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x146>
 80047da:	d900      	bls.n	80047de <HAL_TIM_ConfigClockSource+0x9a>
 80047dc:	e06e      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047de:	2b30      	cmp	r3, #48	; 0x30
 80047e0:	d063      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x166>
 80047e2:	d86b      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d060      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x166>
 80047e8:	d868      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d05d      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x166>
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d05b      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x166>
 80047f2:	e063      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	f000 f984 	bl	8004b10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2277      	movs	r2, #119	; 0x77
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
      break;
 8004820:	e052      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	f000 f96d 	bl	8004b10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	01c9      	lsls	r1, r1, #7
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
      break;
 8004848:	e03e      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	001a      	movs	r2, r3
 8004858:	f000 f8de 	bl	8004a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2150      	movs	r1, #80	; 0x50
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f938 	bl	8004ad8 <TIM_ITRx_SetConfig>
      break;
 8004868:	e02e      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004876:	001a      	movs	r2, r3
 8004878:	f000 f8fc 	bl	8004a74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2160      	movs	r1, #96	; 0x60
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f928 	bl	8004ad8 <TIM_ITRx_SetConfig>
      break;
 8004888:	e01e      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004896:	001a      	movs	r2, r3
 8004898:	f000 f8be 	bl	8004a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2140      	movs	r1, #64	; 0x40
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 f918 	bl	8004ad8 <TIM_ITRx_SetConfig>
      break;
 80048a8:	e00e      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	0019      	movs	r1, r3
 80048b4:	0010      	movs	r0, r2
 80048b6:	f000 f90f 	bl	8004ad8 <TIM_ITRx_SetConfig>
      break;
 80048ba:	e005      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80048bc:	230f      	movs	r3, #15
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
      break;
 80048c4:	e000      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80048c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	223d      	movs	r2, #61	; 0x3d
 80048cc:	2101      	movs	r1, #1
 80048ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	223c      	movs	r2, #60	; 0x3c
 80048d4:	2100      	movs	r1, #0
 80048d6:	5499      	strb	r1, [r3, r2]

  return status;
 80048d8:	230f      	movs	r3, #15
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	781b      	ldrb	r3, [r3, #0]
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b004      	add	sp, #16
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	ffceff88 	.word	0xffceff88
 80048ec:	ffff00ff 	.word	0xffff00ff

080048f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b002      	add	sp, #8
 800493e:	bd80      	pop	{r7, pc}

08004940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a2b      	ldr	r2, [pc, #172]	; (8004a00 <TIM_Base_SetConfig+0xc0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0x20>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <TIM_Base_SetConfig+0xc4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d108      	bne.n	8004972 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2270      	movs	r2, #112	; 0x70
 8004964:	4393      	bics	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <TIM_Base_SetConfig+0xc0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_Base_SetConfig+0x5a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <TIM_Base_SetConfig+0xc4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_Base_SetConfig+0x5a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <TIM_Base_SetConfig+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_Base_SetConfig+0x5a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <TIM_Base_SetConfig+0xcc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_Base_SetConfig+0x5a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <TIM_Base_SetConfig+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <TIM_Base_SetConfig+0xd4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	4393      	bics	r3, r2
 80049b2:	001a      	movs	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <TIM_Base_SetConfig+0xc0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0xaa>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <TIM_Base_SetConfig+0xcc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0xaa>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <TIM_Base_SetConfig+0xd0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d103      	bne.n	80049f2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	615a      	str	r2, [r3, #20]
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40002000 	.word	0x40002000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	fffffcff 	.word	0xfffffcff

08004a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4393      	bics	r3, r2
 8004a32:	001a      	movs	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	22f0      	movs	r2, #240	; 0xf0
 8004a42:	4393      	bics	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	220a      	movs	r2, #10
 8004a54:	4393      	bics	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b006      	add	sp, #24
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	2210      	movs	r2, #16
 8004a8c:	4393      	bics	r3, r2
 8004a8e:	001a      	movs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <TIM_TI2_ConfigInputStage+0x60>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	031b      	lsls	r3, r3, #12
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	22a0      	movs	r2, #160	; 0xa0
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b006      	add	sp, #24
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	ffff0fff 	.word	0xffff0fff

08004ad8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <TIM_ITRx_SetConfig+0x34>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	2207      	movs	r2, #7
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	609a      	str	r2, [r3, #8]
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b004      	add	sp, #16
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	ffcfff8f 	.word	0xffcfff8f

08004b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <TIM_ETR_SetConfig+0x3c>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	021a      	lsls	r2, r3, #8
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	609a      	str	r2, [r3, #8]
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b006      	add	sp, #24
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	ffff00ff 	.word	0xffff00ff

08004b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	223c      	movs	r2, #60	; 0x3c
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e04a      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	223c      	movs	r2, #60	; 0x3c
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	223d      	movs	r2, #61	; 0x3d
 8004b74:	2102      	movs	r1, #2
 8004b76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2270      	movs	r2, #112	; 0x70
 8004ba8:	4393      	bics	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2280      	movs	r2, #128	; 0x80
 8004bd6:	4393      	bics	r3, r2
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	223d      	movs	r2, #61	; 0x3d
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	223c      	movs	r2, #60	; 0x3c
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	ff0fffff 	.word	0xff0fffff
 8004c10:	40000400 	.word	0x40000400

08004c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b002      	add	sp, #8
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <memset>:
 8004c44:	0003      	movs	r3, r0
 8004c46:	1882      	adds	r2, r0, r2
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memset+0xa>
 8004c4c:	4770      	bx	lr
 8004c4e:	7019      	strb	r1, [r3, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	e7f9      	b.n	8004c48 <memset+0x4>

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	2600      	movs	r6, #0
 8004c58:	4c0c      	ldr	r4, [pc, #48]	; (8004c8c <__libc_init_array+0x38>)
 8004c5a:	4d0d      	ldr	r5, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	2600      	movs	r6, #0
 8004c66:	f000 f819 	bl	8004c9c <_init>
 8004c6a:	4c0a      	ldr	r4, [pc, #40]	; (8004c94 <__libc_init_array+0x40>)
 8004c6c:	4d0a      	ldr	r5, [pc, #40]	; (8004c98 <__libc_init_array+0x44>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	00b3      	lsls	r3, r6, #2
 8004c7a:	58eb      	ldr	r3, [r5, r3]
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	00b3      	lsls	r3, r6, #2
 8004c84:	58eb      	ldr	r3, [r5, r3]
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08004d8c 	.word	0x08004d8c
 8004c90:	08004d8c 	.word	0x08004d8c
 8004c94:	08004d90 	.word	0x08004d90
 8004c98:	08004d8c 	.word	0x08004d8c

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
