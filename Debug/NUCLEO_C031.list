
NUCLEO_C031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08006528  08006528  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006528  08006528  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08006530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200000d0  08006600  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08006600  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001222d  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002722  00000000  00000000  00032368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00034a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca9  00000000  00000000  00035ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015103  00000000  00000000  00036761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135b0  00000000  00000000  0004b864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a9b1  00000000  00000000  0005ee14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004160  00000000  00000000  000e97c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ed928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006380 	.word	0x08006380

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	08006380 	.word	0x08006380

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_f2uiz>:
 8000418:	219e      	movs	r1, #158	; 0x9e
 800041a:	b510      	push	{r4, lr}
 800041c:	05c9      	lsls	r1, r1, #23
 800041e:	1c04      	adds	r4, r0, #0
 8000420:	f000 fcbc 	bl	8000d9c <__aeabi_fcmpge>
 8000424:	2800      	cmp	r0, #0
 8000426:	d103      	bne.n	8000430 <__aeabi_f2uiz+0x18>
 8000428:	1c20      	adds	r0, r4, #0
 800042a:	f000 fc15 	bl	8000c58 <__aeabi_f2iz>
 800042e:	bd10      	pop	{r4, pc}
 8000430:	219e      	movs	r1, #158	; 0x9e
 8000432:	1c20      	adds	r0, r4, #0
 8000434:	05c9      	lsls	r1, r1, #23
 8000436:	f000 fa6f 	bl	8000918 <__aeabi_fsub>
 800043a:	f000 fc0d 	bl	8000c58 <__aeabi_f2iz>
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	061b      	lsls	r3, r3, #24
 8000442:	469c      	mov	ip, r3
 8000444:	4460      	add	r0, ip
 8000446:	e7f2      	b.n	800042e <__aeabi_f2uiz+0x16>

08000448 <__aeabi_fdiv>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	464f      	mov	r7, r9
 800044c:	4646      	mov	r6, r8
 800044e:	46d6      	mov	lr, sl
 8000450:	0245      	lsls	r5, r0, #9
 8000452:	b5c0      	push	{r6, r7, lr}
 8000454:	0047      	lsls	r7, r0, #1
 8000456:	1c0c      	adds	r4, r1, #0
 8000458:	0a6d      	lsrs	r5, r5, #9
 800045a:	0e3f      	lsrs	r7, r7, #24
 800045c:	0fc6      	lsrs	r6, r0, #31
 800045e:	2f00      	cmp	r7, #0
 8000460:	d100      	bne.n	8000464 <__aeabi_fdiv+0x1c>
 8000462:	e06f      	b.n	8000544 <__aeabi_fdiv+0xfc>
 8000464:	2fff      	cmp	r7, #255	; 0xff
 8000466:	d100      	bne.n	800046a <__aeabi_fdiv+0x22>
 8000468:	e074      	b.n	8000554 <__aeabi_fdiv+0x10c>
 800046a:	2300      	movs	r3, #0
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	4699      	mov	r9, r3
 8000470:	469a      	mov	sl, r3
 8000472:	00ed      	lsls	r5, r5, #3
 8000474:	04d2      	lsls	r2, r2, #19
 8000476:	4315      	orrs	r5, r2
 8000478:	3f7f      	subs	r7, #127	; 0x7f
 800047a:	0263      	lsls	r3, r4, #9
 800047c:	0a5b      	lsrs	r3, r3, #9
 800047e:	4698      	mov	r8, r3
 8000480:	0063      	lsls	r3, r4, #1
 8000482:	0e1b      	lsrs	r3, r3, #24
 8000484:	0fe4      	lsrs	r4, r4, #31
 8000486:	2b00      	cmp	r3, #0
 8000488:	d04d      	beq.n	8000526 <__aeabi_fdiv+0xde>
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d045      	beq.n	800051a <__aeabi_fdiv+0xd2>
 800048e:	4642      	mov	r2, r8
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	00d2      	lsls	r2, r2, #3
 8000494:	04c9      	lsls	r1, r1, #19
 8000496:	4311      	orrs	r1, r2
 8000498:	4688      	mov	r8, r1
 800049a:	2200      	movs	r2, #0
 800049c:	3b7f      	subs	r3, #127	; 0x7f
 800049e:	0031      	movs	r1, r6
 80004a0:	1aff      	subs	r7, r7, r3
 80004a2:	464b      	mov	r3, r9
 80004a4:	4061      	eors	r1, r4
 80004a6:	b2c9      	uxtb	r1, r1
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d900      	bls.n	80004ae <__aeabi_fdiv+0x66>
 80004ac:	e0b8      	b.n	8000620 <__aeabi_fdiv+0x1d8>
 80004ae:	4870      	ldr	r0, [pc, #448]	; (8000670 <__aeabi_fdiv+0x228>)
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	58c3      	ldr	r3, [r0, r3]
 80004b4:	469f      	mov	pc, r3
 80004b6:	2300      	movs	r3, #0
 80004b8:	4698      	mov	r8, r3
 80004ba:	0026      	movs	r6, r4
 80004bc:	4645      	mov	r5, r8
 80004be:	4692      	mov	sl, r2
 80004c0:	4653      	mov	r3, sl
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fdiv+0x80>
 80004c6:	e08d      	b.n	80005e4 <__aeabi_fdiv+0x19c>
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d100      	bne.n	80004ce <__aeabi_fdiv+0x86>
 80004cc:	e0a1      	b.n	8000612 <__aeabi_fdiv+0x1ca>
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d018      	beq.n	8000504 <__aeabi_fdiv+0xbc>
 80004d2:	003b      	movs	r3, r7
 80004d4:	337f      	adds	r3, #127	; 0x7f
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dd6d      	ble.n	80005b6 <__aeabi_fdiv+0x16e>
 80004da:	076a      	lsls	r2, r5, #29
 80004dc:	d004      	beq.n	80004e8 <__aeabi_fdiv+0xa0>
 80004de:	220f      	movs	r2, #15
 80004e0:	402a      	ands	r2, r5
 80004e2:	2a04      	cmp	r2, #4
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fdiv+0xa0>
 80004e6:	3504      	adds	r5, #4
 80004e8:	012a      	lsls	r2, r5, #4
 80004ea:	d503      	bpl.n	80004f4 <__aeabi_fdiv+0xac>
 80004ec:	4b61      	ldr	r3, [pc, #388]	; (8000674 <__aeabi_fdiv+0x22c>)
 80004ee:	401d      	ands	r5, r3
 80004f0:	003b      	movs	r3, r7
 80004f2:	3380      	adds	r3, #128	; 0x80
 80004f4:	2bfe      	cmp	r3, #254	; 0xfe
 80004f6:	dd00      	ble.n	80004fa <__aeabi_fdiv+0xb2>
 80004f8:	e074      	b.n	80005e4 <__aeabi_fdiv+0x19c>
 80004fa:	01aa      	lsls	r2, r5, #6
 80004fc:	0a52      	lsrs	r2, r2, #9
 80004fe:	b2d8      	uxtb	r0, r3
 8000500:	e002      	b.n	8000508 <__aeabi_fdiv+0xc0>
 8000502:	000e      	movs	r6, r1
 8000504:	2000      	movs	r0, #0
 8000506:	2200      	movs	r2, #0
 8000508:	05c0      	lsls	r0, r0, #23
 800050a:	07f6      	lsls	r6, r6, #31
 800050c:	4310      	orrs	r0, r2
 800050e:	4330      	orrs	r0, r6
 8000510:	bce0      	pop	{r5, r6, r7}
 8000512:	46ba      	mov	sl, r7
 8000514:	46b1      	mov	r9, r6
 8000516:	46a8      	mov	r8, r5
 8000518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13f      	bne.n	80005a0 <__aeabi_fdiv+0x158>
 8000520:	2202      	movs	r2, #2
 8000522:	3fff      	subs	r7, #255	; 0xff
 8000524:	e003      	b.n	800052e <__aeabi_fdiv+0xe6>
 8000526:	4643      	mov	r3, r8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d12d      	bne.n	8000588 <__aeabi_fdiv+0x140>
 800052c:	2201      	movs	r2, #1
 800052e:	0031      	movs	r1, r6
 8000530:	464b      	mov	r3, r9
 8000532:	4061      	eors	r1, r4
 8000534:	b2c9      	uxtb	r1, r1
 8000536:	4313      	orrs	r3, r2
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d838      	bhi.n	80005ae <__aeabi_fdiv+0x166>
 800053c:	484e      	ldr	r0, [pc, #312]	; (8000678 <__aeabi_fdiv+0x230>)
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	58c3      	ldr	r3, [r0, r3]
 8000542:	469f      	mov	pc, r3
 8000544:	2d00      	cmp	r5, #0
 8000546:	d113      	bne.n	8000570 <__aeabi_fdiv+0x128>
 8000548:	2304      	movs	r3, #4
 800054a:	4699      	mov	r9, r3
 800054c:	3b03      	subs	r3, #3
 800054e:	2700      	movs	r7, #0
 8000550:	469a      	mov	sl, r3
 8000552:	e792      	b.n	800047a <__aeabi_fdiv+0x32>
 8000554:	2d00      	cmp	r5, #0
 8000556:	d105      	bne.n	8000564 <__aeabi_fdiv+0x11c>
 8000558:	2308      	movs	r3, #8
 800055a:	4699      	mov	r9, r3
 800055c:	3b06      	subs	r3, #6
 800055e:	27ff      	movs	r7, #255	; 0xff
 8000560:	469a      	mov	sl, r3
 8000562:	e78a      	b.n	800047a <__aeabi_fdiv+0x32>
 8000564:	230c      	movs	r3, #12
 8000566:	4699      	mov	r9, r3
 8000568:	3b09      	subs	r3, #9
 800056a:	27ff      	movs	r7, #255	; 0xff
 800056c:	469a      	mov	sl, r3
 800056e:	e784      	b.n	800047a <__aeabi_fdiv+0x32>
 8000570:	0028      	movs	r0, r5
 8000572:	f000 fc1d 	bl	8000db0 <__clzsi2>
 8000576:	2776      	movs	r7, #118	; 0x76
 8000578:	1f43      	subs	r3, r0, #5
 800057a:	409d      	lsls	r5, r3
 800057c:	2300      	movs	r3, #0
 800057e:	427f      	negs	r7, r7
 8000580:	4699      	mov	r9, r3
 8000582:	469a      	mov	sl, r3
 8000584:	1a3f      	subs	r7, r7, r0
 8000586:	e778      	b.n	800047a <__aeabi_fdiv+0x32>
 8000588:	4640      	mov	r0, r8
 800058a:	f000 fc11 	bl	8000db0 <__clzsi2>
 800058e:	4642      	mov	r2, r8
 8000590:	1f43      	subs	r3, r0, #5
 8000592:	409a      	lsls	r2, r3
 8000594:	2376      	movs	r3, #118	; 0x76
 8000596:	425b      	negs	r3, r3
 8000598:	4690      	mov	r8, r2
 800059a:	1a1b      	subs	r3, r3, r0
 800059c:	2200      	movs	r2, #0
 800059e:	e77e      	b.n	800049e <__aeabi_fdiv+0x56>
 80005a0:	2303      	movs	r3, #3
 80005a2:	464a      	mov	r2, r9
 80005a4:	431a      	orrs	r2, r3
 80005a6:	4691      	mov	r9, r2
 80005a8:	33fc      	adds	r3, #252	; 0xfc
 80005aa:	2203      	movs	r2, #3
 80005ac:	e777      	b.n	800049e <__aeabi_fdiv+0x56>
 80005ae:	000e      	movs	r6, r1
 80005b0:	20ff      	movs	r0, #255	; 0xff
 80005b2:	2200      	movs	r2, #0
 80005b4:	e7a8      	b.n	8000508 <__aeabi_fdiv+0xc0>
 80005b6:	2201      	movs	r2, #1
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2b1b      	cmp	r3, #27
 80005bc:	dca2      	bgt.n	8000504 <__aeabi_fdiv+0xbc>
 80005be:	379e      	adds	r7, #158	; 0x9e
 80005c0:	002a      	movs	r2, r5
 80005c2:	40bd      	lsls	r5, r7
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	1e6b      	subs	r3, r5, #1
 80005c8:	419d      	sbcs	r5, r3
 80005ca:	4315      	orrs	r5, r2
 80005cc:	076a      	lsls	r2, r5, #29
 80005ce:	d004      	beq.n	80005da <__aeabi_fdiv+0x192>
 80005d0:	220f      	movs	r2, #15
 80005d2:	402a      	ands	r2, r5
 80005d4:	2a04      	cmp	r2, #4
 80005d6:	d000      	beq.n	80005da <__aeabi_fdiv+0x192>
 80005d8:	3504      	adds	r5, #4
 80005da:	016a      	lsls	r2, r5, #5
 80005dc:	d544      	bpl.n	8000668 <__aeabi_fdiv+0x220>
 80005de:	2001      	movs	r0, #1
 80005e0:	2200      	movs	r2, #0
 80005e2:	e791      	b.n	8000508 <__aeabi_fdiv+0xc0>
 80005e4:	20ff      	movs	r0, #255	; 0xff
 80005e6:	2200      	movs	r2, #0
 80005e8:	e78e      	b.n	8000508 <__aeabi_fdiv+0xc0>
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	2600      	movs	r6, #0
 80005ee:	20ff      	movs	r0, #255	; 0xff
 80005f0:	03d2      	lsls	r2, r2, #15
 80005f2:	e789      	b.n	8000508 <__aeabi_fdiv+0xc0>
 80005f4:	2300      	movs	r3, #0
 80005f6:	4698      	mov	r8, r3
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	03d2      	lsls	r2, r2, #15
 80005fc:	4215      	tst	r5, r2
 80005fe:	d008      	beq.n	8000612 <__aeabi_fdiv+0x1ca>
 8000600:	4643      	mov	r3, r8
 8000602:	4213      	tst	r3, r2
 8000604:	d105      	bne.n	8000612 <__aeabi_fdiv+0x1ca>
 8000606:	431a      	orrs	r2, r3
 8000608:	0252      	lsls	r2, r2, #9
 800060a:	0026      	movs	r6, r4
 800060c:	20ff      	movs	r0, #255	; 0xff
 800060e:	0a52      	lsrs	r2, r2, #9
 8000610:	e77a      	b.n	8000508 <__aeabi_fdiv+0xc0>
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	03d2      	lsls	r2, r2, #15
 8000616:	432a      	orrs	r2, r5
 8000618:	0252      	lsls	r2, r2, #9
 800061a:	20ff      	movs	r0, #255	; 0xff
 800061c:	0a52      	lsrs	r2, r2, #9
 800061e:	e773      	b.n	8000508 <__aeabi_fdiv+0xc0>
 8000620:	4642      	mov	r2, r8
 8000622:	016b      	lsls	r3, r5, #5
 8000624:	0155      	lsls	r5, r2, #5
 8000626:	42ab      	cmp	r3, r5
 8000628:	d21a      	bcs.n	8000660 <__aeabi_fdiv+0x218>
 800062a:	201b      	movs	r0, #27
 800062c:	2200      	movs	r2, #0
 800062e:	3f01      	subs	r7, #1
 8000630:	2601      	movs	r6, #1
 8000632:	001c      	movs	r4, r3
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	2c00      	cmp	r4, #0
 800063a:	db01      	blt.n	8000640 <__aeabi_fdiv+0x1f8>
 800063c:	429d      	cmp	r5, r3
 800063e:	d801      	bhi.n	8000644 <__aeabi_fdiv+0x1fc>
 8000640:	1b5b      	subs	r3, r3, r5
 8000642:	4332      	orrs	r2, r6
 8000644:	3801      	subs	r0, #1
 8000646:	2800      	cmp	r0, #0
 8000648:	d1f3      	bne.n	8000632 <__aeabi_fdiv+0x1ea>
 800064a:	1e58      	subs	r0, r3, #1
 800064c:	4183      	sbcs	r3, r0
 800064e:	4313      	orrs	r3, r2
 8000650:	001d      	movs	r5, r3
 8000652:	003b      	movs	r3, r7
 8000654:	337f      	adds	r3, #127	; 0x7f
 8000656:	000e      	movs	r6, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd00      	ble.n	800065e <__aeabi_fdiv+0x216>
 800065c:	e73d      	b.n	80004da <__aeabi_fdiv+0x92>
 800065e:	e7aa      	b.n	80005b6 <__aeabi_fdiv+0x16e>
 8000660:	201a      	movs	r0, #26
 8000662:	2201      	movs	r2, #1
 8000664:	1b5b      	subs	r3, r3, r5
 8000666:	e7e3      	b.n	8000630 <__aeabi_fdiv+0x1e8>
 8000668:	01aa      	lsls	r2, r5, #6
 800066a:	2000      	movs	r0, #0
 800066c:	0a52      	lsrs	r2, r2, #9
 800066e:	e74b      	b.n	8000508 <__aeabi_fdiv+0xc0>
 8000670:	080063dc 	.word	0x080063dc
 8000674:	f7ffffff 	.word	0xf7ffffff
 8000678:	0800641c 	.word	0x0800641c

0800067c <__aeabi_fmul>:
 800067c:	0243      	lsls	r3, r0, #9
 800067e:	0a5b      	lsrs	r3, r3, #9
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	4699      	mov	r9, r3
 8000688:	46d6      	mov	lr, sl
 800068a:	0fc3      	lsrs	r3, r0, #31
 800068c:	0045      	lsls	r5, r0, #1
 800068e:	4698      	mov	r8, r3
 8000690:	b5c0      	push	{r6, r7, lr}
 8000692:	464b      	mov	r3, r9
 8000694:	1c0f      	adds	r7, r1, #0
 8000696:	0e2d      	lsrs	r5, r5, #24
 8000698:	d100      	bne.n	800069c <__aeabi_fmul+0x20>
 800069a:	e0cb      	b.n	8000834 <__aeabi_fmul+0x1b8>
 800069c:	2dff      	cmp	r5, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fmul+0x26>
 80006a0:	e0cf      	b.n	8000842 <__aeabi_fmul+0x1c6>
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	04d2      	lsls	r2, r2, #19
 80006a8:	431a      	orrs	r2, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	4691      	mov	r9, r2
 80006ae:	2600      	movs	r6, #0
 80006b0:	469a      	mov	sl, r3
 80006b2:	3d7f      	subs	r5, #127	; 0x7f
 80006b4:	027c      	lsls	r4, r7, #9
 80006b6:	007b      	lsls	r3, r7, #1
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	0e1b      	lsrs	r3, r3, #24
 80006bc:	0fff      	lsrs	r7, r7, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x48>
 80006c2:	e0a9      	b.n	8000818 <__aeabi_fmul+0x19c>
 80006c4:	2bff      	cmp	r3, #255	; 0xff
 80006c6:	d011      	beq.n	80006ec <__aeabi_fmul+0x70>
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	00e4      	lsls	r4, r4, #3
 80006cc:	04d2      	lsls	r2, r2, #19
 80006ce:	4314      	orrs	r4, r2
 80006d0:	4642      	mov	r2, r8
 80006d2:	3b7f      	subs	r3, #127	; 0x7f
 80006d4:	195b      	adds	r3, r3, r5
 80006d6:	407a      	eors	r2, r7
 80006d8:	2000      	movs	r0, #0
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	1c5d      	adds	r5, r3, #1
 80006de:	2e0a      	cmp	r6, #10
 80006e0:	dd13      	ble.n	800070a <__aeabi_fmul+0x8e>
 80006e2:	003a      	movs	r2, r7
 80006e4:	2e0b      	cmp	r6, #11
 80006e6:	d047      	beq.n	8000778 <__aeabi_fmul+0xfc>
 80006e8:	4647      	mov	r7, r8
 80006ea:	e03f      	b.n	800076c <__aeabi_fmul+0xf0>
 80006ec:	002b      	movs	r3, r5
 80006ee:	33ff      	adds	r3, #255	; 0xff
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d11e      	bne.n	8000732 <__aeabi_fmul+0xb6>
 80006f4:	2202      	movs	r2, #2
 80006f6:	4316      	orrs	r6, r2
 80006f8:	4642      	mov	r2, r8
 80006fa:	3501      	adds	r5, #1
 80006fc:	407a      	eors	r2, r7
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	35ff      	adds	r5, #255	; 0xff
 8000702:	2e0a      	cmp	r6, #10
 8000704:	dd00      	ble.n	8000708 <__aeabi_fmul+0x8c>
 8000706:	e0e4      	b.n	80008d2 <__aeabi_fmul+0x256>
 8000708:	2002      	movs	r0, #2
 800070a:	2e02      	cmp	r6, #2
 800070c:	dc1c      	bgt.n	8000748 <__aeabi_fmul+0xcc>
 800070e:	3e01      	subs	r6, #1
 8000710:	2e01      	cmp	r6, #1
 8000712:	d842      	bhi.n	800079a <__aeabi_fmul+0x11e>
 8000714:	2802      	cmp	r0, #2
 8000716:	d03d      	beq.n	8000794 <__aeabi_fmul+0x118>
 8000718:	2801      	cmp	r0, #1
 800071a:	d166      	bne.n	80007ea <__aeabi_fmul+0x16e>
 800071c:	2000      	movs	r0, #0
 800071e:	2100      	movs	r1, #0
 8000720:	05c0      	lsls	r0, r0, #23
 8000722:	4308      	orrs	r0, r1
 8000724:	07d2      	lsls	r2, r2, #31
 8000726:	4310      	orrs	r0, r2
 8000728:	bce0      	pop	{r5, r6, r7}
 800072a:	46ba      	mov	sl, r7
 800072c:	46b1      	mov	r9, r6
 800072e:	46a8      	mov	r8, r5
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	2203      	movs	r2, #3
 8000734:	4316      	orrs	r6, r2
 8000736:	4642      	mov	r2, r8
 8000738:	3501      	adds	r5, #1
 800073a:	407a      	eors	r2, r7
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	35ff      	adds	r5, #255	; 0xff
 8000740:	2e0a      	cmp	r6, #10
 8000742:	dd00      	ble.n	8000746 <__aeabi_fmul+0xca>
 8000744:	e0e4      	b.n	8000910 <__aeabi_fmul+0x294>
 8000746:	2003      	movs	r0, #3
 8000748:	2101      	movs	r1, #1
 800074a:	40b1      	lsls	r1, r6
 800074c:	26a6      	movs	r6, #166	; 0xa6
 800074e:	00f6      	lsls	r6, r6, #3
 8000750:	4231      	tst	r1, r6
 8000752:	d10a      	bne.n	800076a <__aeabi_fmul+0xee>
 8000754:	2690      	movs	r6, #144	; 0x90
 8000756:	00b6      	lsls	r6, r6, #2
 8000758:	4231      	tst	r1, r6
 800075a:	d116      	bne.n	800078a <__aeabi_fmul+0x10e>
 800075c:	3eb9      	subs	r6, #185	; 0xb9
 800075e:	3eff      	subs	r6, #255	; 0xff
 8000760:	420e      	tst	r6, r1
 8000762:	d01a      	beq.n	800079a <__aeabi_fmul+0x11e>
 8000764:	46a1      	mov	r9, r4
 8000766:	4682      	mov	sl, r0
 8000768:	e000      	b.n	800076c <__aeabi_fmul+0xf0>
 800076a:	0017      	movs	r7, r2
 800076c:	4653      	mov	r3, sl
 800076e:	003a      	movs	r2, r7
 8000770:	2b02      	cmp	r3, #2
 8000772:	d00f      	beq.n	8000794 <__aeabi_fmul+0x118>
 8000774:	464c      	mov	r4, r9
 8000776:	4650      	mov	r0, sl
 8000778:	2803      	cmp	r0, #3
 800077a:	d1cd      	bne.n	8000718 <__aeabi_fmul+0x9c>
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	03c9      	lsls	r1, r1, #15
 8000780:	4321      	orrs	r1, r4
 8000782:	0249      	lsls	r1, r1, #9
 8000784:	20ff      	movs	r0, #255	; 0xff
 8000786:	0a49      	lsrs	r1, r1, #9
 8000788:	e7ca      	b.n	8000720 <__aeabi_fmul+0xa4>
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	2200      	movs	r2, #0
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	03c9      	lsls	r1, r1, #15
 8000792:	e7c5      	b.n	8000720 <__aeabi_fmul+0xa4>
 8000794:	20ff      	movs	r0, #255	; 0xff
 8000796:	2100      	movs	r1, #0
 8000798:	e7c2      	b.n	8000720 <__aeabi_fmul+0xa4>
 800079a:	0c20      	lsrs	r0, r4, #16
 800079c:	4649      	mov	r1, r9
 800079e:	0424      	lsls	r4, r4, #16
 80007a0:	0c24      	lsrs	r4, r4, #16
 80007a2:	0027      	movs	r7, r4
 80007a4:	0c0e      	lsrs	r6, r1, #16
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	0c09      	lsrs	r1, r1, #16
 80007aa:	4374      	muls	r4, r6
 80007ac:	434f      	muls	r7, r1
 80007ae:	4346      	muls	r6, r0
 80007b0:	4348      	muls	r0, r1
 80007b2:	0c39      	lsrs	r1, r7, #16
 80007b4:	1900      	adds	r0, r0, r4
 80007b6:	1809      	adds	r1, r1, r0
 80007b8:	428c      	cmp	r4, r1
 80007ba:	d903      	bls.n	80007c4 <__aeabi_fmul+0x148>
 80007bc:	2080      	movs	r0, #128	; 0x80
 80007be:	0240      	lsls	r0, r0, #9
 80007c0:	4684      	mov	ip, r0
 80007c2:	4466      	add	r6, ip
 80007c4:	043f      	lsls	r7, r7, #16
 80007c6:	0408      	lsls	r0, r1, #16
 80007c8:	0c3f      	lsrs	r7, r7, #16
 80007ca:	19c0      	adds	r0, r0, r7
 80007cc:	0184      	lsls	r4, r0, #6
 80007ce:	1e67      	subs	r7, r4, #1
 80007d0:	41bc      	sbcs	r4, r7
 80007d2:	0c09      	lsrs	r1, r1, #16
 80007d4:	0e80      	lsrs	r0, r0, #26
 80007d6:	1989      	adds	r1, r1, r6
 80007d8:	4304      	orrs	r4, r0
 80007da:	0189      	lsls	r1, r1, #6
 80007dc:	430c      	orrs	r4, r1
 80007de:	0109      	lsls	r1, r1, #4
 80007e0:	d571      	bpl.n	80008c6 <__aeabi_fmul+0x24a>
 80007e2:	2301      	movs	r3, #1
 80007e4:	0861      	lsrs	r1, r4, #1
 80007e6:	401c      	ands	r4, r3
 80007e8:	430c      	orrs	r4, r1
 80007ea:	002b      	movs	r3, r5
 80007ec:	337f      	adds	r3, #127	; 0x7f
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dd51      	ble.n	8000896 <__aeabi_fmul+0x21a>
 80007f2:	0761      	lsls	r1, r4, #29
 80007f4:	d004      	beq.n	8000800 <__aeabi_fmul+0x184>
 80007f6:	210f      	movs	r1, #15
 80007f8:	4021      	ands	r1, r4
 80007fa:	2904      	cmp	r1, #4
 80007fc:	d000      	beq.n	8000800 <__aeabi_fmul+0x184>
 80007fe:	3404      	adds	r4, #4
 8000800:	0121      	lsls	r1, r4, #4
 8000802:	d503      	bpl.n	800080c <__aeabi_fmul+0x190>
 8000804:	4b43      	ldr	r3, [pc, #268]	; (8000914 <__aeabi_fmul+0x298>)
 8000806:	401c      	ands	r4, r3
 8000808:	002b      	movs	r3, r5
 800080a:	3380      	adds	r3, #128	; 0x80
 800080c:	2bfe      	cmp	r3, #254	; 0xfe
 800080e:	dcc1      	bgt.n	8000794 <__aeabi_fmul+0x118>
 8000810:	01a1      	lsls	r1, r4, #6
 8000812:	0a49      	lsrs	r1, r1, #9
 8000814:	b2d8      	uxtb	r0, r3
 8000816:	e783      	b.n	8000720 <__aeabi_fmul+0xa4>
 8000818:	2c00      	cmp	r4, #0
 800081a:	d12c      	bne.n	8000876 <__aeabi_fmul+0x1fa>
 800081c:	2301      	movs	r3, #1
 800081e:	4642      	mov	r2, r8
 8000820:	431e      	orrs	r6, r3
 8000822:	002b      	movs	r3, r5
 8000824:	407a      	eors	r2, r7
 8000826:	2001      	movs	r0, #1
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	1c5d      	adds	r5, r3, #1
 800082c:	2e0a      	cmp	r6, #10
 800082e:	dd00      	ble.n	8000832 <__aeabi_fmul+0x1b6>
 8000830:	e757      	b.n	80006e2 <__aeabi_fmul+0x66>
 8000832:	e76a      	b.n	800070a <__aeabi_fmul+0x8e>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d110      	bne.n	800085a <__aeabi_fmul+0x1de>
 8000838:	2301      	movs	r3, #1
 800083a:	2604      	movs	r6, #4
 800083c:	2500      	movs	r5, #0
 800083e:	469a      	mov	sl, r3
 8000840:	e738      	b.n	80006b4 <__aeabi_fmul+0x38>
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <__aeabi_fmul+0x1d4>
 8000846:	2302      	movs	r3, #2
 8000848:	2608      	movs	r6, #8
 800084a:	25ff      	movs	r5, #255	; 0xff
 800084c:	469a      	mov	sl, r3
 800084e:	e731      	b.n	80006b4 <__aeabi_fmul+0x38>
 8000850:	2303      	movs	r3, #3
 8000852:	260c      	movs	r6, #12
 8000854:	25ff      	movs	r5, #255	; 0xff
 8000856:	469a      	mov	sl, r3
 8000858:	e72c      	b.n	80006b4 <__aeabi_fmul+0x38>
 800085a:	4648      	mov	r0, r9
 800085c:	f000 faa8 	bl	8000db0 <__clzsi2>
 8000860:	464a      	mov	r2, r9
 8000862:	1f43      	subs	r3, r0, #5
 8000864:	2576      	movs	r5, #118	; 0x76
 8000866:	409a      	lsls	r2, r3
 8000868:	2300      	movs	r3, #0
 800086a:	426d      	negs	r5, r5
 800086c:	4691      	mov	r9, r2
 800086e:	2600      	movs	r6, #0
 8000870:	469a      	mov	sl, r3
 8000872:	1a2d      	subs	r5, r5, r0
 8000874:	e71e      	b.n	80006b4 <__aeabi_fmul+0x38>
 8000876:	0020      	movs	r0, r4
 8000878:	f000 fa9a 	bl	8000db0 <__clzsi2>
 800087c:	4642      	mov	r2, r8
 800087e:	1f43      	subs	r3, r0, #5
 8000880:	409c      	lsls	r4, r3
 8000882:	1a2b      	subs	r3, r5, r0
 8000884:	3b76      	subs	r3, #118	; 0x76
 8000886:	407a      	eors	r2, r7
 8000888:	2000      	movs	r0, #0
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	1c5d      	adds	r5, r3, #1
 800088e:	2e0a      	cmp	r6, #10
 8000890:	dd00      	ble.n	8000894 <__aeabi_fmul+0x218>
 8000892:	e726      	b.n	80006e2 <__aeabi_fmul+0x66>
 8000894:	e739      	b.n	800070a <__aeabi_fmul+0x8e>
 8000896:	2101      	movs	r1, #1
 8000898:	1acb      	subs	r3, r1, r3
 800089a:	2b1b      	cmp	r3, #27
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fmul+0x224>
 800089e:	e73d      	b.n	800071c <__aeabi_fmul+0xa0>
 80008a0:	359e      	adds	r5, #158	; 0x9e
 80008a2:	0021      	movs	r1, r4
 80008a4:	40ac      	lsls	r4, r5
 80008a6:	40d9      	lsrs	r1, r3
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4321      	orrs	r1, r4
 80008ae:	074b      	lsls	r3, r1, #29
 80008b0:	d004      	beq.n	80008bc <__aeabi_fmul+0x240>
 80008b2:	230f      	movs	r3, #15
 80008b4:	400b      	ands	r3, r1
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d000      	beq.n	80008bc <__aeabi_fmul+0x240>
 80008ba:	3104      	adds	r1, #4
 80008bc:	014b      	lsls	r3, r1, #5
 80008be:	d504      	bpl.n	80008ca <__aeabi_fmul+0x24e>
 80008c0:	2001      	movs	r0, #1
 80008c2:	2100      	movs	r1, #0
 80008c4:	e72c      	b.n	8000720 <__aeabi_fmul+0xa4>
 80008c6:	001d      	movs	r5, r3
 80008c8:	e78f      	b.n	80007ea <__aeabi_fmul+0x16e>
 80008ca:	0189      	lsls	r1, r1, #6
 80008cc:	2000      	movs	r0, #0
 80008ce:	0a49      	lsrs	r1, r1, #9
 80008d0:	e726      	b.n	8000720 <__aeabi_fmul+0xa4>
 80008d2:	2302      	movs	r3, #2
 80008d4:	2e0f      	cmp	r6, #15
 80008d6:	d10c      	bne.n	80008f2 <__aeabi_fmul+0x276>
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	464b      	mov	r3, r9
 80008dc:	03c9      	lsls	r1, r1, #15
 80008de:	420b      	tst	r3, r1
 80008e0:	d00d      	beq.n	80008fe <__aeabi_fmul+0x282>
 80008e2:	420c      	tst	r4, r1
 80008e4:	d10b      	bne.n	80008fe <__aeabi_fmul+0x282>
 80008e6:	4321      	orrs	r1, r4
 80008e8:	0249      	lsls	r1, r1, #9
 80008ea:	003a      	movs	r2, r7
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	0a49      	lsrs	r1, r1, #9
 80008f0:	e716      	b.n	8000720 <__aeabi_fmul+0xa4>
 80008f2:	2e0b      	cmp	r6, #11
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fmul+0x27c>
 80008f6:	e6f7      	b.n	80006e8 <__aeabi_fmul+0x6c>
 80008f8:	46a1      	mov	r9, r4
 80008fa:	469a      	mov	sl, r3
 80008fc:	e736      	b.n	800076c <__aeabi_fmul+0xf0>
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	464b      	mov	r3, r9
 8000902:	03c9      	lsls	r1, r1, #15
 8000904:	4319      	orrs	r1, r3
 8000906:	0249      	lsls	r1, r1, #9
 8000908:	4642      	mov	r2, r8
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	0a49      	lsrs	r1, r1, #9
 800090e:	e707      	b.n	8000720 <__aeabi_fmul+0xa4>
 8000910:	2303      	movs	r3, #3
 8000912:	e7df      	b.n	80008d4 <__aeabi_fmul+0x258>
 8000914:	f7ffffff 	.word	0xf7ffffff

08000918 <__aeabi_fsub>:
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	46c6      	mov	lr, r8
 800091c:	0243      	lsls	r3, r0, #9
 800091e:	0a5b      	lsrs	r3, r3, #9
 8000920:	0045      	lsls	r5, r0, #1
 8000922:	00da      	lsls	r2, r3, #3
 8000924:	0fc4      	lsrs	r4, r0, #31
 8000926:	0248      	lsls	r0, r1, #9
 8000928:	004f      	lsls	r7, r1, #1
 800092a:	4694      	mov	ip, r2
 800092c:	0a42      	lsrs	r2, r0, #9
 800092e:	001e      	movs	r6, r3
 8000930:	4690      	mov	r8, r2
 8000932:	b500      	push	{lr}
 8000934:	0e2d      	lsrs	r5, r5, #24
 8000936:	0e3f      	lsrs	r7, r7, #24
 8000938:	0fc9      	lsrs	r1, r1, #31
 800093a:	0980      	lsrs	r0, r0, #6
 800093c:	2fff      	cmp	r7, #255	; 0xff
 800093e:	d059      	beq.n	80009f4 <__aeabi_fsub+0xdc>
 8000940:	2201      	movs	r2, #1
 8000942:	4051      	eors	r1, r2
 8000944:	428c      	cmp	r4, r1
 8000946:	d039      	beq.n	80009bc <__aeabi_fsub+0xa4>
 8000948:	1bea      	subs	r2, r5, r7
 800094a:	2a00      	cmp	r2, #0
 800094c:	dd58      	ble.n	8000a00 <__aeabi_fsub+0xe8>
 800094e:	2f00      	cmp	r7, #0
 8000950:	d068      	beq.n	8000a24 <__aeabi_fsub+0x10c>
 8000952:	2dff      	cmp	r5, #255	; 0xff
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x40>
 8000956:	e0d1      	b.n	8000afc <__aeabi_fsub+0x1e4>
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	04db      	lsls	r3, r3, #19
 800095c:	4318      	orrs	r0, r3
 800095e:	2a1b      	cmp	r2, #27
 8000960:	dc00      	bgt.n	8000964 <__aeabi_fsub+0x4c>
 8000962:	e0e3      	b.n	8000b2c <__aeabi_fsub+0x214>
 8000964:	2301      	movs	r3, #1
 8000966:	4662      	mov	r2, ip
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	015a      	lsls	r2, r3, #5
 800096c:	d400      	bmi.n	8000970 <__aeabi_fsub+0x58>
 800096e:	e0ac      	b.n	8000aca <__aeabi_fsub+0x1b2>
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	099e      	lsrs	r6, r3, #6
 8000974:	0030      	movs	r0, r6
 8000976:	f000 fa1b 	bl	8000db0 <__clzsi2>
 800097a:	0033      	movs	r3, r6
 800097c:	3805      	subs	r0, #5
 800097e:	4083      	lsls	r3, r0
 8000980:	4285      	cmp	r5, r0
 8000982:	dc00      	bgt.n	8000986 <__aeabi_fsub+0x6e>
 8000984:	e0c6      	b.n	8000b14 <__aeabi_fsub+0x1fc>
 8000986:	4ab2      	ldr	r2, [pc, #712]	; (8000c50 <__aeabi_fsub+0x338>)
 8000988:	1a2d      	subs	r5, r5, r0
 800098a:	4013      	ands	r3, r2
 800098c:	075a      	lsls	r2, r3, #29
 800098e:	d004      	beq.n	800099a <__aeabi_fsub+0x82>
 8000990:	220f      	movs	r2, #15
 8000992:	401a      	ands	r2, r3
 8000994:	2a04      	cmp	r2, #4
 8000996:	d000      	beq.n	800099a <__aeabi_fsub+0x82>
 8000998:	3304      	adds	r3, #4
 800099a:	015a      	lsls	r2, r3, #5
 800099c:	d400      	bmi.n	80009a0 <__aeabi_fsub+0x88>
 800099e:	e097      	b.n	8000ad0 <__aeabi_fsub+0x1b8>
 80009a0:	1c6a      	adds	r2, r5, #1
 80009a2:	2dfe      	cmp	r5, #254	; 0xfe
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x90>
 80009a6:	e084      	b.n	8000ab2 <__aeabi_fsub+0x19a>
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	0a5e      	lsrs	r6, r3, #9
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	05d0      	lsls	r0, r2, #23
 80009b0:	4330      	orrs	r0, r6
 80009b2:	07e4      	lsls	r4, r4, #31
 80009b4:	4320      	orrs	r0, r4
 80009b6:	bc80      	pop	{r7}
 80009b8:	46b8      	mov	r8, r7
 80009ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009bc:	1bea      	subs	r2, r5, r7
 80009be:	2a00      	cmp	r2, #0
 80009c0:	dd41      	ble.n	8000a46 <__aeabi_fsub+0x12e>
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d06b      	beq.n	8000a9e <__aeabi_fsub+0x186>
 80009c6:	2dff      	cmp	r5, #255	; 0xff
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0xb4>
 80009ca:	e097      	b.n	8000afc <__aeabi_fsub+0x1e4>
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	04db      	lsls	r3, r3, #19
 80009d0:	4318      	orrs	r0, r3
 80009d2:	2a1b      	cmp	r2, #27
 80009d4:	dc00      	bgt.n	80009d8 <__aeabi_fsub+0xc0>
 80009d6:	e0cc      	b.n	8000b72 <__aeabi_fsub+0x25a>
 80009d8:	2301      	movs	r3, #1
 80009da:	4463      	add	r3, ip
 80009dc:	015a      	lsls	r2, r3, #5
 80009de:	d574      	bpl.n	8000aca <__aeabi_fsub+0x1b2>
 80009e0:	3501      	adds	r5, #1
 80009e2:	2dff      	cmp	r5, #255	; 0xff
 80009e4:	d065      	beq.n	8000ab2 <__aeabi_fsub+0x19a>
 80009e6:	2201      	movs	r2, #1
 80009e8:	499a      	ldr	r1, [pc, #616]	; (8000c54 <__aeabi_fsub+0x33c>)
 80009ea:	401a      	ands	r2, r3
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	400b      	ands	r3, r1
 80009f0:	4313      	orrs	r3, r2
 80009f2:	e7cb      	b.n	800098c <__aeabi_fsub+0x74>
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d01f      	beq.n	8000a38 <__aeabi_fsub+0x120>
 80009f8:	428c      	cmp	r4, r1
 80009fa:	d022      	beq.n	8000a42 <__aeabi_fsub+0x12a>
 80009fc:	002a      	movs	r2, r5
 80009fe:	3aff      	subs	r2, #255	; 0xff
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	d035      	beq.n	8000a70 <__aeabi_fsub+0x158>
 8000a04:	1b7a      	subs	r2, r7, r5
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fsub+0xf4>
 8000a0a:	e099      	b.n	8000b40 <__aeabi_fsub+0x228>
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fsub+0xfc>
 8000a12:	e0dd      	b.n	8000bd0 <__aeabi_fsub+0x2b8>
 8000a14:	1e53      	subs	r3, r2, #1
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x104>
 8000a1a:	e105      	b.n	8000c28 <__aeabi_fsub+0x310>
 8000a1c:	2aff      	cmp	r2, #255	; 0xff
 8000a1e:	d06b      	beq.n	8000af8 <__aeabi_fsub+0x1e0>
 8000a20:	001a      	movs	r2, r3
 8000a22:	e094      	b.n	8000b4e <__aeabi_fsub+0x236>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d073      	beq.n	8000b10 <__aeabi_fsub+0x1f8>
 8000a28:	1e51      	subs	r1, r2, #1
 8000a2a:	2a01      	cmp	r2, #1
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x118>
 8000a2e:	e0df      	b.n	8000bf0 <__aeabi_fsub+0x2d8>
 8000a30:	2aff      	cmp	r2, #255	; 0xff
 8000a32:	d063      	beq.n	8000afc <__aeabi_fsub+0x1e4>
 8000a34:	000a      	movs	r2, r1
 8000a36:	e792      	b.n	800095e <__aeabi_fsub+0x46>
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4051      	eors	r1, r2
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fsub+0x12a>
 8000a40:	e782      	b.n	8000948 <__aeabi_fsub+0x30>
 8000a42:	002a      	movs	r2, r5
 8000a44:	3aff      	subs	r2, #255	; 0xff
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d036      	beq.n	8000ab8 <__aeabi_fsub+0x1a0>
 8000a4a:	1b7a      	subs	r2, r7, r5
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fsub+0x13a>
 8000a50:	e0aa      	b.n	8000ba8 <__aeabi_fsub+0x290>
 8000a52:	2fff      	cmp	r7, #255	; 0xff
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fsub+0x140>
 8000a56:	e0da      	b.n	8000c0e <__aeabi_fsub+0x2f6>
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	4661      	mov	r1, ip
 8000a5c:	04db      	lsls	r3, r3, #19
 8000a5e:	4319      	orrs	r1, r3
 8000a60:	468c      	mov	ip, r1
 8000a62:	2a1b      	cmp	r2, #27
 8000a64:	dc00      	bgt.n	8000a68 <__aeabi_fsub+0x150>
 8000a66:	e0d4      	b.n	8000c12 <__aeabi_fsub+0x2fa>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	003d      	movs	r5, r7
 8000a6c:	181b      	adds	r3, r3, r0
 8000a6e:	e7b5      	b.n	80009dc <__aeabi_fsub+0xc4>
 8000a70:	27fe      	movs	r7, #254	; 0xfe
 8000a72:	1c6a      	adds	r2, r5, #1
 8000a74:	4217      	tst	r7, r2
 8000a76:	d171      	bne.n	8000b5c <__aeabi_fsub+0x244>
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fsub+0x166>
 8000a7c:	e09e      	b.n	8000bbc <__aeabi_fsub+0x2a4>
 8000a7e:	4663      	mov	r3, ip
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d100      	bne.n	8000a86 <__aeabi_fsub+0x16e>
 8000a84:	e0d5      	b.n	8000c32 <__aeabi_fsub+0x31a>
 8000a86:	2200      	movs	r2, #0
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fsub+0x176>
 8000a8c:	e78f      	b.n	80009ae <__aeabi_fsub+0x96>
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	015e      	lsls	r6, r3, #5
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_fsub+0x17e>
 8000a94:	e0d6      	b.n	8000c44 <__aeabi_fsub+0x32c>
 8000a96:	4663      	mov	r3, ip
 8000a98:	000c      	movs	r4, r1
 8000a9a:	1ac3      	subs	r3, r0, r3
 8000a9c:	e776      	b.n	800098c <__aeabi_fsub+0x74>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d036      	beq.n	8000b10 <__aeabi_fsub+0x1f8>
 8000aa2:	1e51      	subs	r1, r2, #1
 8000aa4:	2a01      	cmp	r2, #1
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x192>
 8000aa8:	e09a      	b.n	8000be0 <__aeabi_fsub+0x2c8>
 8000aaa:	2aff      	cmp	r2, #255	; 0xff
 8000aac:	d026      	beq.n	8000afc <__aeabi_fsub+0x1e4>
 8000aae:	000a      	movs	r2, r1
 8000ab0:	e78f      	b.n	80009d2 <__aeabi_fsub+0xba>
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	e77a      	b.n	80009ae <__aeabi_fsub+0x96>
 8000ab8:	27fe      	movs	r7, #254	; 0xfe
 8000aba:	1c6a      	adds	r2, r5, #1
 8000abc:	4217      	tst	r7, r2
 8000abe:	d062      	beq.n	8000b86 <__aeabi_fsub+0x26e>
 8000ac0:	2aff      	cmp	r2, #255	; 0xff
 8000ac2:	d0f6      	beq.n	8000ab2 <__aeabi_fsub+0x19a>
 8000ac4:	0015      	movs	r5, r2
 8000ac6:	4460      	add	r0, ip
 8000ac8:	0843      	lsrs	r3, r0, #1
 8000aca:	075a      	lsls	r2, r3, #29
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fsub+0x1b8>
 8000ace:	e75f      	b.n	8000990 <__aeabi_fsub+0x78>
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	2dff      	cmp	r5, #255	; 0xff
 8000ad4:	d012      	beq.n	8000afc <__aeabi_fsub+0x1e4>
 8000ad6:	025b      	lsls	r3, r3, #9
 8000ad8:	0a5e      	lsrs	r6, r3, #9
 8000ada:	b2ea      	uxtb	r2, r5
 8000adc:	e767      	b.n	80009ae <__aeabi_fsub+0x96>
 8000ade:	4662      	mov	r2, ip
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fsub+0x1ce>
 8000ae4:	e093      	b.n	8000c0e <__aeabi_fsub+0x2f6>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d008      	beq.n	8000afc <__aeabi_fsub+0x1e4>
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	03d2      	lsls	r2, r2, #15
 8000aee:	4213      	tst	r3, r2
 8000af0:	d004      	beq.n	8000afc <__aeabi_fsub+0x1e4>
 8000af2:	4640      	mov	r0, r8
 8000af4:	4210      	tst	r0, r2
 8000af6:	d101      	bne.n	8000afc <__aeabi_fsub+0x1e4>
 8000af8:	000c      	movs	r4, r1
 8000afa:	4643      	mov	r3, r8
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0d8      	beq.n	8000ab2 <__aeabi_fsub+0x19a>
 8000b00:	2680      	movs	r6, #128	; 0x80
 8000b02:	03f6      	lsls	r6, r6, #15
 8000b04:	431e      	orrs	r6, r3
 8000b06:	0276      	lsls	r6, r6, #9
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	0a76      	lsrs	r6, r6, #9
 8000b0c:	e74f      	b.n	80009ae <__aeabi_fsub+0x96>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	0015      	movs	r5, r2
 8000b12:	e7de      	b.n	8000ad2 <__aeabi_fsub+0x1ba>
 8000b14:	2220      	movs	r2, #32
 8000b16:	1b40      	subs	r0, r0, r5
 8000b18:	3001      	adds	r0, #1
 8000b1a:	1a12      	subs	r2, r2, r0
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	40c1      	lsrs	r1, r0
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	4193      	sbcs	r3, r2
 8000b26:	2500      	movs	r5, #0
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	e72f      	b.n	800098c <__aeabi_fsub+0x74>
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	1a9b      	subs	r3, r3, r2
 8000b30:	0001      	movs	r1, r0
 8000b32:	4098      	lsls	r0, r3
 8000b34:	0003      	movs	r3, r0
 8000b36:	40d1      	lsrs	r1, r2
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	4193      	sbcs	r3, r2
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	e712      	b.n	8000966 <__aeabi_fsub+0x4e>
 8000b40:	2fff      	cmp	r7, #255	; 0xff
 8000b42:	d0d9      	beq.n	8000af8 <__aeabi_fsub+0x1e0>
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	4664      	mov	r4, ip
 8000b48:	04db      	lsls	r3, r3, #19
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	46a4      	mov	ip, r4
 8000b4e:	2a1b      	cmp	r2, #27
 8000b50:	dd52      	ble.n	8000bf8 <__aeabi_fsub+0x2e0>
 8000b52:	2301      	movs	r3, #1
 8000b54:	000c      	movs	r4, r1
 8000b56:	003d      	movs	r5, r7
 8000b58:	1ac3      	subs	r3, r0, r3
 8000b5a:	e706      	b.n	800096a <__aeabi_fsub+0x52>
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	1a1e      	subs	r6, r3, r0
 8000b60:	0173      	lsls	r3, r6, #5
 8000b62:	d439      	bmi.n	8000bd8 <__aeabi_fsub+0x2c0>
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0x252>
 8000b68:	e704      	b.n	8000974 <__aeabi_fsub+0x5c>
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2600      	movs	r6, #0
 8000b70:	e71d      	b.n	80009ae <__aeabi_fsub+0x96>
 8000b72:	2320      	movs	r3, #32
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	0001      	movs	r1, r0
 8000b78:	4098      	lsls	r0, r3
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	40d1      	lsrs	r1, r2
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	4193      	sbcs	r3, r2
 8000b82:	430b      	orrs	r3, r1
 8000b84:	e729      	b.n	80009da <__aeabi_fsub+0xc2>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d1a9      	bne.n	8000ade <__aeabi_fsub+0x1c6>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d056      	beq.n	8000c3e <__aeabi_fsub+0x326>
 8000b90:	2200      	movs	r2, #0
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fsub+0x280>
 8000b96:	e70a      	b.n	80009ae <__aeabi_fsub+0x96>
 8000b98:	0003      	movs	r3, r0
 8000b9a:	4463      	add	r3, ip
 8000b9c:	015a      	lsls	r2, r3, #5
 8000b9e:	d594      	bpl.n	8000aca <__aeabi_fsub+0x1b2>
 8000ba0:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <__aeabi_fsub+0x338>)
 8000ba2:	3501      	adds	r5, #1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	e790      	b.n	8000aca <__aeabi_fsub+0x1b2>
 8000ba8:	4663      	mov	r3, ip
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0af      	beq.n	8000b0e <__aeabi_fsub+0x1f6>
 8000bae:	1e53      	subs	r3, r2, #1
 8000bb0:	2a01      	cmp	r2, #1
 8000bb2:	d015      	beq.n	8000be0 <__aeabi_fsub+0x2c8>
 8000bb4:	2aff      	cmp	r2, #255	; 0xff
 8000bb6:	d02a      	beq.n	8000c0e <__aeabi_fsub+0x2f6>
 8000bb8:	001a      	movs	r2, r3
 8000bba:	e752      	b.n	8000a62 <__aeabi_fsub+0x14a>
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d191      	bne.n	8000ae6 <__aeabi_fsub+0x1ce>
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d198      	bne.n	8000af8 <__aeabi_fsub+0x1e0>
 8000bc6:	2680      	movs	r6, #128	; 0x80
 8000bc8:	2400      	movs	r4, #0
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	03f6      	lsls	r6, r6, #15
 8000bce:	e6ee      	b.n	80009ae <__aeabi_fsub+0x96>
 8000bd0:	000c      	movs	r4, r1
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	0015      	movs	r5, r2
 8000bd6:	e77c      	b.n	8000ad2 <__aeabi_fsub+0x1ba>
 8000bd8:	4663      	mov	r3, ip
 8000bda:	000c      	movs	r4, r1
 8000bdc:	1ac6      	subs	r6, r0, r3
 8000bde:	e6c9      	b.n	8000974 <__aeabi_fsub+0x5c>
 8000be0:	0003      	movs	r3, r0
 8000be2:	4463      	add	r3, ip
 8000be4:	2501      	movs	r5, #1
 8000be6:	015a      	lsls	r2, r3, #5
 8000be8:	d400      	bmi.n	8000bec <__aeabi_fsub+0x2d4>
 8000bea:	e76e      	b.n	8000aca <__aeabi_fsub+0x1b2>
 8000bec:	2502      	movs	r5, #2
 8000bee:	e6fa      	b.n	80009e6 <__aeabi_fsub+0xce>
 8000bf0:	4663      	mov	r3, ip
 8000bf2:	2501      	movs	r5, #1
 8000bf4:	1a1b      	subs	r3, r3, r0
 8000bf6:	e6b8      	b.n	800096a <__aeabi_fsub+0x52>
 8000bf8:	4664      	mov	r4, ip
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	40d4      	lsrs	r4, r2
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	4662      	mov	r2, ip
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	4193      	sbcs	r3, r2
 8000c0a:	4323      	orrs	r3, r4
 8000c0c:	e7a2      	b.n	8000b54 <__aeabi_fsub+0x23c>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	e774      	b.n	8000afc <__aeabi_fsub+0x1e4>
 8000c12:	4661      	mov	r1, ip
 8000c14:	2320      	movs	r3, #32
 8000c16:	40d1      	lsrs	r1, r2
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	4662      	mov	r2, ip
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	4193      	sbcs	r3, r2
 8000c24:	430b      	orrs	r3, r1
 8000c26:	e720      	b.n	8000a6a <__aeabi_fsub+0x152>
 8000c28:	4663      	mov	r3, ip
 8000c2a:	000c      	movs	r4, r1
 8000c2c:	2501      	movs	r5, #1
 8000c2e:	1ac3      	subs	r3, r0, r3
 8000c30:	e69b      	b.n	800096a <__aeabi_fsub+0x52>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d099      	beq.n	8000b6a <__aeabi_fsub+0x252>
 8000c36:	000c      	movs	r4, r1
 8000c38:	4646      	mov	r6, r8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	e6b7      	b.n	80009ae <__aeabi_fsub+0x96>
 8000c3e:	4646      	mov	r6, r8
 8000c40:	2200      	movs	r2, #0
 8000c42:	e6b4      	b.n	80009ae <__aeabi_fsub+0x96>
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_fsub+0x332>
 8000c48:	e73f      	b.n	8000aca <__aeabi_fsub+0x1b2>
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e6ae      	b.n	80009ae <__aeabi_fsub+0x96>
 8000c50:	fbffffff 	.word	0xfbffffff
 8000c54:	7dffffff 	.word	0x7dffffff

08000c58 <__aeabi_f2iz>:
 8000c58:	0241      	lsls	r1, r0, #9
 8000c5a:	0042      	lsls	r2, r0, #1
 8000c5c:	0fc3      	lsrs	r3, r0, #31
 8000c5e:	0a49      	lsrs	r1, r1, #9
 8000c60:	2000      	movs	r0, #0
 8000c62:	0e12      	lsrs	r2, r2, #24
 8000c64:	2a7e      	cmp	r2, #126	; 0x7e
 8000c66:	dd03      	ble.n	8000c70 <__aeabi_f2iz+0x18>
 8000c68:	2a9d      	cmp	r2, #157	; 0x9d
 8000c6a:	dd02      	ble.n	8000c72 <__aeabi_f2iz+0x1a>
 8000c6c:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <__aeabi_f2iz+0x3c>)
 8000c6e:	1898      	adds	r0, r3, r2
 8000c70:	4770      	bx	lr
 8000c72:	2080      	movs	r0, #128	; 0x80
 8000c74:	0400      	lsls	r0, r0, #16
 8000c76:	4301      	orrs	r1, r0
 8000c78:	2a95      	cmp	r2, #149	; 0x95
 8000c7a:	dc07      	bgt.n	8000c8c <__aeabi_f2iz+0x34>
 8000c7c:	2096      	movs	r0, #150	; 0x96
 8000c7e:	1a82      	subs	r2, r0, r2
 8000c80:	40d1      	lsrs	r1, r2
 8000c82:	4248      	negs	r0, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f3      	bne.n	8000c70 <__aeabi_f2iz+0x18>
 8000c88:	0008      	movs	r0, r1
 8000c8a:	e7f1      	b.n	8000c70 <__aeabi_f2iz+0x18>
 8000c8c:	3a96      	subs	r2, #150	; 0x96
 8000c8e:	4091      	lsls	r1, r2
 8000c90:	e7f7      	b.n	8000c82 <__aeabi_f2iz+0x2a>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	7fffffff 	.word	0x7fffffff

08000c98 <__aeabi_i2f>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d013      	beq.n	8000cc6 <__aeabi_i2f+0x2e>
 8000c9e:	17c3      	asrs	r3, r0, #31
 8000ca0:	18c5      	adds	r5, r0, r3
 8000ca2:	405d      	eors	r5, r3
 8000ca4:	0fc4      	lsrs	r4, r0, #31
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	f000 f882 	bl	8000db0 <__clzsi2>
 8000cac:	239e      	movs	r3, #158	; 0x9e
 8000cae:	0001      	movs	r1, r0
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	2b96      	cmp	r3, #150	; 0x96
 8000cb4:	dc0f      	bgt.n	8000cd6 <__aeabi_i2f+0x3e>
 8000cb6:	2808      	cmp	r0, #8
 8000cb8:	d031      	beq.n	8000d1e <__aeabi_i2f+0x86>
 8000cba:	3908      	subs	r1, #8
 8000cbc:	408d      	lsls	r5, r1
 8000cbe:	026d      	lsls	r5, r5, #9
 8000cc0:	0a6d      	lsrs	r5, r5, #9
 8000cc2:	b2d8      	uxtb	r0, r3
 8000cc4:	e002      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	2000      	movs	r0, #0
 8000cca:	2500      	movs	r5, #0
 8000ccc:	05c0      	lsls	r0, r0, #23
 8000cce:	4328      	orrs	r0, r5
 8000cd0:	07e4      	lsls	r4, r4, #31
 8000cd2:	4320      	orrs	r0, r4
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2b99      	cmp	r3, #153	; 0x99
 8000cd8:	dd0c      	ble.n	8000cf4 <__aeabi_i2f+0x5c>
 8000cda:	2205      	movs	r2, #5
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	0028      	movs	r0, r5
 8000ce0:	40d0      	lsrs	r0, r2
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	0008      	movs	r0, r1
 8000ce6:	301b      	adds	r0, #27
 8000ce8:	4085      	lsls	r5, r0
 8000cea:	0028      	movs	r0, r5
 8000cec:	1e45      	subs	r5, r0, #1
 8000cee:	41a8      	sbcs	r0, r5
 8000cf0:	4302      	orrs	r2, r0
 8000cf2:	0015      	movs	r5, r2
 8000cf4:	2905      	cmp	r1, #5
 8000cf6:	dc16      	bgt.n	8000d26 <__aeabi_i2f+0x8e>
 8000cf8:	002a      	movs	r2, r5
 8000cfa:	480f      	ldr	r0, [pc, #60]	; (8000d38 <__aeabi_i2f+0xa0>)
 8000cfc:	4002      	ands	r2, r0
 8000cfe:	076e      	lsls	r6, r5, #29
 8000d00:	d009      	beq.n	8000d16 <__aeabi_i2f+0x7e>
 8000d02:	260f      	movs	r6, #15
 8000d04:	4035      	ands	r5, r6
 8000d06:	2d04      	cmp	r5, #4
 8000d08:	d005      	beq.n	8000d16 <__aeabi_i2f+0x7e>
 8000d0a:	3204      	adds	r2, #4
 8000d0c:	0155      	lsls	r5, r2, #5
 8000d0e:	d502      	bpl.n	8000d16 <__aeabi_i2f+0x7e>
 8000d10:	239f      	movs	r3, #159	; 0x9f
 8000d12:	4002      	ands	r2, r0
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	0192      	lsls	r2, r2, #6
 8000d18:	0a55      	lsrs	r5, r2, #9
 8000d1a:	b2d8      	uxtb	r0, r3
 8000d1c:	e7d6      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000d1e:	026d      	lsls	r5, r5, #9
 8000d20:	2096      	movs	r0, #150	; 0x96
 8000d22:	0a6d      	lsrs	r5, r5, #9
 8000d24:	e7d2      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000d26:	1f4a      	subs	r2, r1, #5
 8000d28:	4095      	lsls	r5, r2
 8000d2a:	002a      	movs	r2, r5
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <__aeabi_i2f+0xa0>)
 8000d2e:	4002      	ands	r2, r0
 8000d30:	076e      	lsls	r6, r5, #29
 8000d32:	d0f0      	beq.n	8000d16 <__aeabi_i2f+0x7e>
 8000d34:	e7e5      	b.n	8000d02 <__aeabi_i2f+0x6a>
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	fbffffff 	.word	0xfbffffff

08000d3c <__aeabi_cfrcmple>:
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	0008      	movs	r0, r1
 8000d40:	4661      	mov	r1, ip
 8000d42:	e7ff      	b.n	8000d44 <__aeabi_cfcmpeq>

08000d44 <__aeabi_cfcmpeq>:
 8000d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000d46:	f000 f8bd 	bl	8000ec4 <__lesf2>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d401      	bmi.n	8000d52 <__aeabi_cfcmpeq+0xe>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	42c8      	cmn	r0, r1
 8000d52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000d54 <__aeabi_fcmpeq>:
 8000d54:	b510      	push	{r4, lr}
 8000d56:	f000 f849 	bl	8000dec <__eqsf2>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	3001      	adds	r0, #1
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <__aeabi_fcmplt>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	f000 f8af 	bl	8000ec4 <__lesf2>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	db01      	blt.n	8000d6e <__aeabi_fcmplt+0xe>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	bd10      	pop	{r4, pc}
 8000d6e:	2001      	movs	r0, #1
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)

08000d74 <__aeabi_fcmple>:
 8000d74:	b510      	push	{r4, lr}
 8000d76:	f000 f8a5 	bl	8000ec4 <__lesf2>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	dd01      	ble.n	8000d82 <__aeabi_fcmple+0xe>
 8000d7e:	2000      	movs	r0, #0
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	2001      	movs	r0, #1
 8000d84:	bd10      	pop	{r4, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)

08000d88 <__aeabi_fcmpgt>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	f000 f855 	bl	8000e38 <__gesf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	dc01      	bgt.n	8000d96 <__aeabi_fcmpgt+0xe>
 8000d92:	2000      	movs	r0, #0
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	2001      	movs	r0, #1
 8000d98:	bd10      	pop	{r4, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)

08000d9c <__aeabi_fcmpge>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	f000 f84b 	bl	8000e38 <__gesf2>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	da01      	bge.n	8000daa <__aeabi_fcmpge+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2001      	movs	r0, #1
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)

08000db0 <__clzsi2>:
 8000db0:	211c      	movs	r1, #28
 8000db2:	2301      	movs	r3, #1
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d301      	bcc.n	8000dbe <__clzsi2+0xe>
 8000dba:	0c00      	lsrs	r0, r0, #16
 8000dbc:	3910      	subs	r1, #16
 8000dbe:	0a1b      	lsrs	r3, r3, #8
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	d301      	bcc.n	8000dc8 <__clzsi2+0x18>
 8000dc4:	0a00      	lsrs	r0, r0, #8
 8000dc6:	3908      	subs	r1, #8
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d301      	bcc.n	8000dd2 <__clzsi2+0x22>
 8000dce:	0900      	lsrs	r0, r0, #4
 8000dd0:	3904      	subs	r1, #4
 8000dd2:	a202      	add	r2, pc, #8	; (adr r2, 8000ddc <__clzsi2+0x2c>)
 8000dd4:	5c10      	ldrb	r0, [r2, r0]
 8000dd6:	1840      	adds	r0, r0, r1
 8000dd8:	4770      	bx	lr
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	02020304 	.word	0x02020304
 8000de0:	01010101 	.word	0x01010101
	...

08000dec <__eqsf2>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	0042      	lsls	r2, r0, #1
 8000df0:	0245      	lsls	r5, r0, #9
 8000df2:	024e      	lsls	r6, r1, #9
 8000df4:	004c      	lsls	r4, r1, #1
 8000df6:	0fc3      	lsrs	r3, r0, #31
 8000df8:	0a6d      	lsrs	r5, r5, #9
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	0e12      	lsrs	r2, r2, #24
 8000dfe:	0a76      	lsrs	r6, r6, #9
 8000e00:	0e24      	lsrs	r4, r4, #24
 8000e02:	0fc9      	lsrs	r1, r1, #31
 8000e04:	2aff      	cmp	r2, #255	; 0xff
 8000e06:	d006      	beq.n	8000e16 <__eqsf2+0x2a>
 8000e08:	2cff      	cmp	r4, #255	; 0xff
 8000e0a:	d003      	beq.n	8000e14 <__eqsf2+0x28>
 8000e0c:	42a2      	cmp	r2, r4
 8000e0e:	d101      	bne.n	8000e14 <__eqsf2+0x28>
 8000e10:	42b5      	cmp	r5, r6
 8000e12:	d006      	beq.n	8000e22 <__eqsf2+0x36>
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d1fc      	bne.n	8000e14 <__eqsf2+0x28>
 8000e1a:	2cff      	cmp	r4, #255	; 0xff
 8000e1c:	d1fa      	bne.n	8000e14 <__eqsf2+0x28>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d1f8      	bne.n	8000e14 <__eqsf2+0x28>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d006      	beq.n	8000e34 <__eqsf2+0x48>
 8000e26:	2001      	movs	r0, #1
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d1f3      	bne.n	8000e14 <__eqsf2+0x28>
 8000e2c:	0028      	movs	r0, r5
 8000e2e:	1e43      	subs	r3, r0, #1
 8000e30:	4198      	sbcs	r0, r3
 8000e32:	e7ef      	b.n	8000e14 <__eqsf2+0x28>
 8000e34:	2000      	movs	r0, #0
 8000e36:	e7ed      	b.n	8000e14 <__eqsf2+0x28>

08000e38 <__gesf2>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	0042      	lsls	r2, r0, #1
 8000e3c:	0245      	lsls	r5, r0, #9
 8000e3e:	024e      	lsls	r6, r1, #9
 8000e40:	004c      	lsls	r4, r1, #1
 8000e42:	0fc3      	lsrs	r3, r0, #31
 8000e44:	0a6d      	lsrs	r5, r5, #9
 8000e46:	0e12      	lsrs	r2, r2, #24
 8000e48:	0a76      	lsrs	r6, r6, #9
 8000e4a:	0e24      	lsrs	r4, r4, #24
 8000e4c:	0fc8      	lsrs	r0, r1, #31
 8000e4e:	2aff      	cmp	r2, #255	; 0xff
 8000e50:	d01b      	beq.n	8000e8a <__gesf2+0x52>
 8000e52:	2cff      	cmp	r4, #255	; 0xff
 8000e54:	d00e      	beq.n	8000e74 <__gesf2+0x3c>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d11b      	bne.n	8000e92 <__gesf2+0x5a>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d101      	bne.n	8000e62 <__gesf2+0x2a>
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	d01c      	beq.n	8000e9c <__gesf2+0x64>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d00c      	beq.n	8000e80 <__gesf2+0x48>
 8000e66:	4283      	cmp	r3, r0
 8000e68:	d01c      	beq.n	8000ea4 <__gesf2+0x6c>
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	1e58      	subs	r0, r3, #1
 8000e6e:	4008      	ands	r0, r1
 8000e70:	3801      	subs	r0, #1
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	2e00      	cmp	r6, #0
 8000e76:	d122      	bne.n	8000ebe <__gesf2+0x86>
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d1f4      	bne.n	8000e66 <__gesf2+0x2e>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d1f2      	bne.n	8000e66 <__gesf2+0x2e>
 8000e80:	2800      	cmp	r0, #0
 8000e82:	d1f6      	bne.n	8000e72 <__gesf2+0x3a>
 8000e84:	2001      	movs	r0, #1
 8000e86:	4240      	negs	r0, r0
 8000e88:	e7f3      	b.n	8000e72 <__gesf2+0x3a>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d117      	bne.n	8000ebe <__gesf2+0x86>
 8000e8e:	2cff      	cmp	r4, #255	; 0xff
 8000e90:	d0f0      	beq.n	8000e74 <__gesf2+0x3c>
 8000e92:	2c00      	cmp	r4, #0
 8000e94:	d1e7      	bne.n	8000e66 <__gesf2+0x2e>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d1e5      	bne.n	8000e66 <__gesf2+0x2e>
 8000e9a:	e7e6      	b.n	8000e6a <__gesf2+0x32>
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0e7      	beq.n	8000e72 <__gesf2+0x3a>
 8000ea2:	e7e2      	b.n	8000e6a <__gesf2+0x32>
 8000ea4:	42a2      	cmp	r2, r4
 8000ea6:	dc05      	bgt.n	8000eb4 <__gesf2+0x7c>
 8000ea8:	dbea      	blt.n	8000e80 <__gesf2+0x48>
 8000eaa:	42b5      	cmp	r5, r6
 8000eac:	d802      	bhi.n	8000eb4 <__gesf2+0x7c>
 8000eae:	d3e7      	bcc.n	8000e80 <__gesf2+0x48>
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	e7de      	b.n	8000e72 <__gesf2+0x3a>
 8000eb4:	4243      	negs	r3, r0
 8000eb6:	4158      	adcs	r0, r3
 8000eb8:	0040      	lsls	r0, r0, #1
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7d9      	b.n	8000e72 <__gesf2+0x3a>
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	e7d6      	b.n	8000e72 <__gesf2+0x3a>

08000ec4 <__lesf2>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	0042      	lsls	r2, r0, #1
 8000ec8:	0245      	lsls	r5, r0, #9
 8000eca:	024e      	lsls	r6, r1, #9
 8000ecc:	004c      	lsls	r4, r1, #1
 8000ece:	0fc3      	lsrs	r3, r0, #31
 8000ed0:	0a6d      	lsrs	r5, r5, #9
 8000ed2:	0e12      	lsrs	r2, r2, #24
 8000ed4:	0a76      	lsrs	r6, r6, #9
 8000ed6:	0e24      	lsrs	r4, r4, #24
 8000ed8:	0fc8      	lsrs	r0, r1, #31
 8000eda:	2aff      	cmp	r2, #255	; 0xff
 8000edc:	d00b      	beq.n	8000ef6 <__lesf2+0x32>
 8000ede:	2cff      	cmp	r4, #255	; 0xff
 8000ee0:	d00d      	beq.n	8000efe <__lesf2+0x3a>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d11f      	bne.n	8000f26 <__lesf2+0x62>
 8000ee6:	2c00      	cmp	r4, #0
 8000ee8:	d116      	bne.n	8000f18 <__lesf2+0x54>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d114      	bne.n	8000f18 <__lesf2+0x54>
 8000eee:	2000      	movs	r0, #0
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d010      	beq.n	8000f16 <__lesf2+0x52>
 8000ef4:	e009      	b.n	8000f0a <__lesf2+0x46>
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d10c      	bne.n	8000f14 <__lesf2+0x50>
 8000efa:	2cff      	cmp	r4, #255	; 0xff
 8000efc:	d113      	bne.n	8000f26 <__lesf2+0x62>
 8000efe:	2e00      	cmp	r6, #0
 8000f00:	d108      	bne.n	8000f14 <__lesf2+0x50>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	d008      	beq.n	8000f18 <__lesf2+0x54>
 8000f06:	4283      	cmp	r3, r0
 8000f08:	d012      	beq.n	8000f30 <__lesf2+0x6c>
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	1e58      	subs	r0, r3, #1
 8000f0e:	4008      	ands	r0, r1
 8000f10:	3801      	subs	r0, #1
 8000f12:	e000      	b.n	8000f16 <__lesf2+0x52>
 8000f14:	2002      	movs	r0, #2
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	d1f4      	bne.n	8000f06 <__lesf2+0x42>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d1fa      	bne.n	8000f16 <__lesf2+0x52>
 8000f20:	2001      	movs	r0, #1
 8000f22:	4240      	negs	r0, r0
 8000f24:	e7f7      	b.n	8000f16 <__lesf2+0x52>
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d1ed      	bne.n	8000f06 <__lesf2+0x42>
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d1eb      	bne.n	8000f06 <__lesf2+0x42>
 8000f2e:	e7ec      	b.n	8000f0a <__lesf2+0x46>
 8000f30:	42a2      	cmp	r2, r4
 8000f32:	dc05      	bgt.n	8000f40 <__lesf2+0x7c>
 8000f34:	dbf2      	blt.n	8000f1c <__lesf2+0x58>
 8000f36:	42b5      	cmp	r5, r6
 8000f38:	d802      	bhi.n	8000f40 <__lesf2+0x7c>
 8000f3a:	d3ef      	bcc.n	8000f1c <__lesf2+0x58>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e7ea      	b.n	8000f16 <__lesf2+0x52>
 8000f40:	4243      	negs	r3, r0
 8000f42:	4158      	adcs	r0, r3
 8000f44:	0040      	lsls	r0, r0, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7e5      	b.n	8000f16 <__lesf2+0x52>
 8000f4a:	46c0      	nop			; (mov r8, r8)

08000f4c <led_init>:
{
	uint32_t odr = READ_REG(GPIOx->ODR);
	WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
}

void led_init(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]

	for (i=0; i< LED_undefined; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	e007      	b.n	8000f6c <led_init+0x20>
		LEDs[i] = LEDstate_SLOW;
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <led_init+0x34>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	2202      	movs	r2, #2
 8000f64:	701a      	strb	r2, [r3, #0]
	for (i=0; i< LED_undefined; i++) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d9f4      	bls.n	8000f5c <led_init+0x10>
	}

	led_update();
 8000f72:	f000 f807 	bl	8000f84 <led_update>
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	200000ec 	.word	0x200000ec

08000f84 <led_update>:

void led_update(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]


	/* calculate 3 independet cycle tickers for LED signaling */
	if (fastTick >= ONTIME_FAST) {
 8000f8e:	4bd3      	ldr	r3, [pc, #844]	; (80012dc <led_update+0x358>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d902      	bls.n	8000f9c <led_update+0x18>
		fastTick = 0;
 8000f96:	4bd1      	ldr	r3, [pc, #836]	; (80012dc <led_update+0x358>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		//fastTick++;
	}
	if (slowTick >= BLINK_CYCLE_SLOW) {
 8000f9c:	4bd0      	ldr	r3, [pc, #832]	; (80012e0 <led_update+0x35c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b12      	cmp	r3, #18
 8000fa2:	d902      	bls.n	8000faa <led_update+0x26>
		slowTick = 0;
 8000fa4:	4bce      	ldr	r3, [pc, #824]	; (80012e0 <led_update+0x35c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
	} else
	{
		//slowTick++;
	}
	if (ultraTick >= BLINK_CYCLE_ULTRA)
 8000faa:	4bce      	ldr	r3, [pc, #824]	; (80012e4 <led_update+0x360>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b07      	cmp	r3, #7
 8000fb0:	d902      	bls.n	8000fb8 <led_update+0x34>
	{
		ultraTick = 0;
 8000fb2:	4bcc      	ldr	r3, [pc, #816]	; (80012e4 <led_update+0x360>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
    }
	else
    {
        //ultraTick++;
    }
	if (flashTick >= BLINK_CYCLE_FLASH) {
 8000fb8:	4bcb      	ldr	r3, [pc, #812]	; (80012e8 <led_update+0x364>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b1a      	cmp	r3, #26
 8000fbe:	d902      	bls.n	8000fc6 <led_update+0x42>
		flashTick = 0;
 8000fc0:	4bc9      	ldr	r3, [pc, #804]	; (80012e8 <led_update+0x364>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

	/*
	 * enumerate all LEDs and set controlling IO Pin depending on IO Mapping table
	 * we have to consider IO Direction here (normally setting IO to 1 sets LED on
	 */
	for (i=0; i<LED_undefined; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	e1db      	b.n	8001384 <led_update+0x400>
	{
		switch (LEDs[i])
 8000fcc:	4ac7      	ldr	r2, [pc, #796]	; (80012ec <led_update+0x368>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d900      	bls.n	8000fda <led_update+0x56>
 8000fd8:	e1d0      	b.n	800137c <led_update+0x3f8>
 8000fda:	009a      	lsls	r2, r3, #2
 8000fdc:	4bc4      	ldr	r3, [pc, #784]	; (80012f0 <led_update+0x36c>)
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	469f      	mov	pc, r3
		{
			/* permanent on */
			case LEDstate_ON:
				if(LED_mapping[i].direction  == GPIO_NORMAL)
 8000fe4:	4ac3      	ldr	r2, [pc, #780]	; (80012f4 <led_update+0x370>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	18d3      	adds	r3, r2, r3
 8000fec:	3301      	adds	r3, #1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10a      	bne.n	800100a <led_update+0x86>
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8000ff4:	4bbf      	ldr	r3, [pc, #764]	; (80012f4 <led_update+0x370>)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	0052      	lsls	r2, r2, #1
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	48be      	ldr	r0, [pc, #760]	; (80012f8 <led_update+0x374>)
 8001000:	2201      	movs	r2, #1
 8001002:	0019      	movs	r1, r3
 8001004:	f002 ff87 	bl	8003f16 <HAL_GPIO_WritePin>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
				}
				break;
 8001008:	e1b9      	b.n	800137e <led_update+0x3fa>
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800100a:	4bba      	ldr	r3, [pc, #744]	; (80012f4 <led_update+0x370>)
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	b29b      	uxth	r3, r3
 8001014:	48b8      	ldr	r0, [pc, #736]	; (80012f8 <led_update+0x374>)
 8001016:	2200      	movs	r2, #0
 8001018:	0019      	movs	r1, r3
 800101a:	f002 ff7c 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800101e:	e1ae      	b.n	800137e <led_update+0x3fa>
			/* permanent off */
			case LEDstate_OFF:
				if(LED_mapping[i].direction == GPIO_NORMAL)
 8001020:	4ab4      	ldr	r2, [pc, #720]	; (80012f4 <led_update+0x370>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	18d3      	adds	r3, r2, r3
 8001028:	3301      	adds	r3, #1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10a      	bne.n	8001046 <led_update+0xc2>
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001030:	4bb0      	ldr	r3, [pc, #704]	; (80012f4 <led_update+0x370>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	0052      	lsls	r2, r2, #1
 8001036:	5cd3      	ldrb	r3, [r2, r3]
 8001038:	b29b      	uxth	r3, r3
 800103a:	48af      	ldr	r0, [pc, #700]	; (80012f8 <led_update+0x374>)
 800103c:	2200      	movs	r2, #0
 800103e:	0019      	movs	r1, r3
 8001040:	f002 ff69 	bl	8003f16 <HAL_GPIO_WritePin>
				}
				else
				{
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
				}
				break;
 8001044:	e19b      	b.n	800137e <led_update+0x3fa>
					HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001046:	4bab      	ldr	r3, [pc, #684]	; (80012f4 <led_update+0x370>)
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	0052      	lsls	r2, r2, #1
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	b29b      	uxth	r3, r3
 8001050:	48a9      	ldr	r0, [pc, #676]	; (80012f8 <led_update+0x374>)
 8001052:	2201      	movs	r2, #1
 8001054:	0019      	movs	r1, r3
 8001056:	f002 ff5e 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800105a:	e190      	b.n	800137e <led_update+0x3fa>
			/* slow blinking ON/OFF 1:1 1,4s */
			case LEDstate_SLOW:
				/* one half is on the other off */
				if (slowTick < ONTIME_SLOW)
 800105c:	4ba0      	ldr	r3, [pc, #640]	; (80012e0 <led_update+0x35c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b09      	cmp	r3, #9
 8001062:	d81d      	bhi.n	80010a0 <led_update+0x11c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 8001064:	4aa3      	ldr	r2, [pc, #652]	; (80012f4 <led_update+0x370>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	18d3      	adds	r3, r2, r3
 800106c:	3301      	adds	r3, #1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10a      	bne.n	800108a <led_update+0x106>
					{

						//gpio->BSRR = LED_mapping[i].gpio;
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001074:	4b9f      	ldr	r3, [pc, #636]	; (80012f4 <led_update+0x370>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	0052      	lsls	r2, r2, #1
 800107a:	5cd3      	ldrb	r3, [r2, r3]
 800107c:	b29b      	uxth	r3, r3
 800107e:	489e      	ldr	r0, [pc, #632]	; (80012f8 <led_update+0x374>)
 8001080:	2201      	movs	r2, #1
 8001082:	0019      	movs	r1, r3
 8001084:	f002 ff47 	bl	8003f16 <HAL_GPIO_WritePin>
						//gpio->BSRR = LED_mapping[i].gpio;
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
						//HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin, RESET);
					}
				}
				break;
 8001088:	e179      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800108a:	4b9a      	ldr	r3, [pc, #616]	; (80012f4 <led_update+0x370>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4898      	ldr	r0, [pc, #608]	; (80012f8 <led_update+0x374>)
 8001096:	2200      	movs	r2, #0
 8001098:	0019      	movs	r1, r3
 800109a:	f002 ff3c 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800109e:	e16e      	b.n	800137e <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80010a0:	4a94      	ldr	r2, [pc, #592]	; (80012f4 <led_update+0x370>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	18d3      	adds	r3, r2, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10a      	bne.n	80010c6 <led_update+0x142>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80010b0:	4b90      	ldr	r3, [pc, #576]	; (80012f4 <led_update+0x370>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	0052      	lsls	r2, r2, #1
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	488f      	ldr	r0, [pc, #572]	; (80012f8 <led_update+0x374>)
 80010bc:	2200      	movs	r2, #0
 80010be:	0019      	movs	r1, r3
 80010c0:	f002 ff29 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 80010c4:	e15b      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80010c6:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <led_update+0x370>)
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	0052      	lsls	r2, r2, #1
 80010cc:	5cd3      	ldrb	r3, [r2, r3]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4889      	ldr	r0, [pc, #548]	; (80012f8 <led_update+0x374>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	0019      	movs	r1, r3
 80010d6:	f002 ff1e 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 80010da:	e150      	b.n	800137e <led_update+0x3fa>
				/* slow blinking OFF/ON 1:1 1,4s */
			case LEDstate_SLOW_ALT:
				if (slowTick < ONTIME_SLOW)
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <led_update+0x35c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d81d      	bhi.n	8001120 <led_update+0x19c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80010e4:	4a83      	ldr	r2, [pc, #524]	; (80012f4 <led_update+0x370>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	18d3      	adds	r3, r2, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10a      	bne.n	800110a <led_update+0x186>
					{

						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80010f4:	4b7f      	ldr	r3, [pc, #508]	; (80012f4 <led_update+0x370>)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	487e      	ldr	r0, [pc, #504]	; (80012f8 <led_update+0x374>)
 8001100:	2200      	movs	r2, #0
 8001102:	0019      	movs	r1, r3
 8001104:	f002 ff07 	bl	8003f16 <HAL_GPIO_WritePin>
					else
					{	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
						//HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin, SET);
					}
				}
				break;
 8001108:	e139      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 800110a:	4b7a      	ldr	r3, [pc, #488]	; (80012f4 <led_update+0x370>)
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	0052      	lsls	r2, r2, #1
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4878      	ldr	r0, [pc, #480]	; (80012f8 <led_update+0x374>)
 8001116:	2201      	movs	r2, #1
 8001118:	0019      	movs	r1, r3
 800111a:	f002 fefc 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800111e:	e12e      	b.n	800137e <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 8001120:	4a74      	ldr	r2, [pc, #464]	; (80012f4 <led_update+0x370>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	3301      	adds	r3, #1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10a      	bne.n	8001146 <led_update+0x1c2>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001130:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <led_update+0x370>)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	0052      	lsls	r2, r2, #1
 8001136:	5cd3      	ldrb	r3, [r2, r3]
 8001138:	b29b      	uxth	r3, r3
 800113a:	486f      	ldr	r0, [pc, #444]	; (80012f8 <led_update+0x374>)
 800113c:	2201      	movs	r2, #1
 800113e:	0019      	movs	r1, r3
 8001140:	f002 fee9 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 8001144:	e11b      	b.n	800137e <led_update+0x3fa>
					{	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001146:	4b6b      	ldr	r3, [pc, #428]	; (80012f4 <led_update+0x370>)
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	0052      	lsls	r2, r2, #1
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4869      	ldr	r0, [pc, #420]	; (80012f8 <led_update+0x374>)
 8001152:	2200      	movs	r2, #0
 8001154:	0019      	movs	r1, r3
 8001156:	f002 fede 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800115a:	e110      	b.n	800137e <led_update+0x3fa>
			/* fast blinking ON/OFF 1:1 200ms */
			case LEDstate_FAST:
				if (fastTick < ONTIME_FLASH)
 800115c:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <led_update+0x358>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d11d      	bne.n	80011a0 <led_update+0x21c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 8001164:	4a63      	ldr	r2, [pc, #396]	; (80012f4 <led_update+0x370>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	18d3      	adds	r3, r2, r3
 800116c:	3301      	adds	r3, #1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10a      	bne.n	800118a <led_update+0x206>
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001174:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <led_update+0x370>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	0052      	lsls	r2, r2, #1
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	b29b      	uxth	r3, r3
 800117e:	485e      	ldr	r0, [pc, #376]	; (80012f8 <led_update+0x374>)
 8001180:	2201      	movs	r2, #1
 8001182:	0019      	movs	r1, r3
 8001184:	f002 fec7 	bl	8003f16 <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
					}
				}
				break;
 8001188:	e0f9      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800118a:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <led_update+0x370>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	b29b      	uxth	r3, r3
 8001194:	4858      	ldr	r0, [pc, #352]	; (80012f8 <led_update+0x374>)
 8001196:	2200      	movs	r2, #0
 8001198:	0019      	movs	r1, r3
 800119a:	f002 febc 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800119e:	e0ee      	b.n	800137e <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80011a0:	4a54      	ldr	r2, [pc, #336]	; (80012f4 <led_update+0x370>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <led_update+0x242>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <led_update+0x370>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	0052      	lsls	r2, r2, #1
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	484f      	ldr	r0, [pc, #316]	; (80012f8 <led_update+0x374>)
 80011bc:	2200      	movs	r2, #0
 80011be:	0019      	movs	r1, r3
 80011c0:	f002 fea9 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 80011c4:	e0db      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <led_update+0x370>)
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	0052      	lsls	r2, r2, #1
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4849      	ldr	r0, [pc, #292]	; (80012f8 <led_update+0x374>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	0019      	movs	r1, r3
 80011d6:	f002 fe9e 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 80011da:	e0d0      	b.n	800137e <led_update+0x3fa>

			/* fast blinking OFF/ON 1:1 200ms */
			case LEDstate_FAST_ALT:
				if (fastTick < ONTIME_FAST)
 80011dc:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <led_update+0x358>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d81d      	bhi.n	8001220 <led_update+0x29c>
				{
					if (LED_mapping[i].direction == GPIO_NORMAL)
 80011e4:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <led_update+0x370>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	18d3      	adds	r3, r2, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10a      	bne.n	800120a <led_update+0x286>
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <led_update+0x370>)
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	0052      	lsls	r2, r2, #1
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	483e      	ldr	r0, [pc, #248]	; (80012f8 <led_update+0x374>)
 8001200:	2201      	movs	r2, #1
 8001202:	0019      	movs	r1, r3
 8001204:	f002 fe87 	bl	8003f16 <HAL_GPIO_WritePin>
					else
					{
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
					}
				}
				break;
 8001208:	e0b9      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <led_update+0x370>)
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4838      	ldr	r0, [pc, #224]	; (80012f8 <led_update+0x374>)
 8001216:	2200      	movs	r2, #0
 8001218:	0019      	movs	r1, r3
 800121a:	f002 fe7c 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800121e:	e0ae      	b.n	800137e <led_update+0x3fa>
					if (LED_mapping[i].direction == GPIO_NORMAL)
 8001220:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <led_update+0x370>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	18d3      	adds	r3, r2, r3
 8001228:	3301      	adds	r3, #1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10a      	bne.n	8001246 <led_update+0x2c2>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <led_update+0x370>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	0052      	lsls	r2, r2, #1
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	b29b      	uxth	r3, r3
 800123a:	482f      	ldr	r0, [pc, #188]	; (80012f8 <led_update+0x374>)
 800123c:	2200      	movs	r2, #0
 800123e:	0019      	movs	r1, r3
 8001240:	f002 fe69 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 8001244:	e09b      	b.n	800137e <led_update+0x3fa>
						HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <led_update+0x370>)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4829      	ldr	r0, [pc, #164]	; (80012f8 <led_update+0x374>)
 8001252:	2201      	movs	r2, #1
 8001254:	0019      	movs	r1, r3
 8001256:	f002 fe5e 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800125a:	e090      	b.n	800137e <led_update+0x3fa>
				 /* fast blinking OFF/ON 1:1 200ms */
			case LEDstate_ULTRA:
				if (ultraTick < ONTIME_ULTRA)
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <led_update+0x360>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b06      	cmp	r3, #6
 8001262:	d81d      	bhi.n	80012a0 <led_update+0x31c>
				{
				    if (LED_mapping[i].direction == GPIO_NORMAL)
 8001264:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <led_update+0x370>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	3301      	adds	r3, #1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10a      	bne.n	800128a <led_update+0x306>
				    {
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <led_update+0x370>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	b29b      	uxth	r3, r3
 800127e:	481e      	ldr	r0, [pc, #120]	; (80012f8 <led_update+0x374>)
 8001280:	2201      	movs	r2, #1
 8001282:	0019      	movs	r1, r3
 8001284:	f002 fe47 	bl	8003f16 <HAL_GPIO_WritePin>
				    else
				    {
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
				    }
				}
				break;
 8001288:	e079      	b.n	800137e <led_update+0x3fa>
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <led_update+0x370>)
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0052      	lsls	r2, r2, #1
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <led_update+0x374>)
 8001296:	2200      	movs	r2, #0
 8001298:	0019      	movs	r1, r3
 800129a:	f002 fe3c 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 800129e:	e06e      	b.n	800137e <led_update+0x3fa>
				    if (LED_mapping[i].direction == GPIO_NORMAL)
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <led_update+0x370>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	18d3      	adds	r3, r2, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <led_update+0x342>
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <led_update+0x370>)
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	0052      	lsls	r2, r2, #1
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <led_update+0x374>)
 80012bc:	2200      	movs	r2, #0
 80012be:	0019      	movs	r1, r3
 80012c0:	f002 fe29 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 80012c4:	e05b      	b.n	800137e <led_update+0x3fa>
				    	HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <led_update+0x370>)
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	0052      	lsls	r2, r2, #1
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <led_update+0x374>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	0019      	movs	r1, r3
 80012d6:	f002 fe1e 	bl	8003f16 <HAL_GPIO_WritePin>
				break;
 80012da:	e050      	b.n	800137e <led_update+0x3fa>
 80012dc:	200002c0 	.word	0x200002c0
 80012e0:	200002c8 	.word	0x200002c8
 80012e4:	200002c4 	.word	0x200002c4
 80012e8:	200002cc 	.word	0x200002cc
 80012ec:	200000ec 	.word	0x200000ec
 80012f0:	0800645c 	.word	0x0800645c
 80012f4:	20000000 	.word	0x20000000
 80012f8:	50000400 	.word	0x50000400
				/* flashing 1:40 2s */
				case LEDstate_FLASH:
					if (flashTick < ONTIME_FLASH)
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <led_update+0x414>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11d      	bne.n	8001340 <led_update+0x3bc>
					{
						if (LED_mapping[i].direction == GPIO_NORMAL)
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <led_update+0x418>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	18d3      	adds	r3, r2, r3
 800130c:	3301      	adds	r3, #1
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10a      	bne.n	800132a <led_update+0x3a6>
						{
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <led_update+0x418>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	0052      	lsls	r2, r2, #1
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4820      	ldr	r0, [pc, #128]	; (80013a0 <led_update+0x41c>)
 8001320:	2201      	movs	r2, #1
 8001322:	0019      	movs	r1, r3
 8001324:	f002 fdf7 	bl	8003f16 <HAL_GPIO_WritePin>
						else
						{
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
						}
					}
					break;
 8001328:	e029      	b.n	800137e <led_update+0x3fa>
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <led_update+0x418>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	0052      	lsls	r2, r2, #1
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	b29b      	uxth	r3, r3
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <led_update+0x41c>)
 8001336:	2200      	movs	r2, #0
 8001338:	0019      	movs	r1, r3
 800133a:	f002 fdec 	bl	8003f16 <HAL_GPIO_WritePin>
					break;
 800133e:	e01e      	b.n	800137e <led_update+0x3fa>
						if (LED_mapping[i].direction == GPIO_NORMAL) {
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <led_update+0x418>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	18d3      	adds	r3, r2, r3
 8001348:	3301      	adds	r3, #1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10a      	bne.n	8001366 <led_update+0x3e2>
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, RESET);
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <led_update+0x418>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	0052      	lsls	r2, r2, #1
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <led_update+0x41c>)
 800135c:	2200      	movs	r2, #0
 800135e:	0019      	movs	r1, r3
 8001360:	f002 fdd9 	bl	8003f16 <HAL_GPIO_WritePin>
					break;
 8001364:	e00b      	b.n	800137e <led_update+0x3fa>
							HAL_GPIO_WritePin(GPIOB, LED_mapping[i].gpio, SET);
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <led_update+0x418>)
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	0052      	lsls	r2, r2, #1
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	b29b      	uxth	r3, r3
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <led_update+0x41c>)
 8001372:	2201      	movs	r2, #1
 8001374:	0019      	movs	r1, r3
 8001376:	f002 fdce 	bl	8003f16 <HAL_GPIO_WritePin>
					break;
 800137a:	e000      	b.n	800137e <led_update+0x3fa>
			default:
				//ASSERT(false);
				break;
 800137c:	46c0      	nop			; (mov r8, r8)
	for (i=0; i<LED_undefined; i++)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d800      	bhi.n	800138c <led_update+0x408>
 800138a:	e61f      	b.n	8000fcc <led_update+0x48>
		}
	}
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	200002cc 	.word	0x200002cc
 800139c:	20000000 	.word	0x20000000
 80013a0:	50000400 	.word	0x50000400

080013a4 <led_setON>:

void led_setON(const LED_Name LED) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]

	//ASSERT(LED < LED_undefined);
	assert_param(LED<LED_undefined);
	LEDs[LED] = LEDstate_ON;
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <led_setON+0x20>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	54d1      	strb	r1, [r2, r3]
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	200000ec 	.word	0x200000ec

080013c8 <led_setOFF>:

void led_setOFF(const LED_Name LED) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	0002      	movs	r2, r0
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	701a      	strb	r2, [r3, #0]

	//ASSERT(LED < LED_undefined);
	assert_param(LED<LED_undefined);
	LEDs[LED] = LEDstate_OFF;
 80013d4:	1dfb      	adds	r3, r7, #7
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <led_setOFF+0x20>)
 80013da:	2100      	movs	r1, #0
 80013dc:	54d1      	strb	r1, [r2, r3]
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	200000ec 	.word	0x200000ec

080013ec <adcCalibration>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adcCalibration()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	// Start calibration
	if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <adcCalibration+0x38>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 ff7d 	bl	80032f4 <HAL_ADCEx_Calibration_Start>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d001      	beq.n	8001402 <adcCalibration+0x16>
	    // Calibration failed
	    Error_Handler();
 80013fe:	f000 fab9 	bl	8001974 <Error_Handler>
	}

	// Wait for calibration to finish (you can use HAL_Delay or a timer)
	HAL_Delay(100); // Adjust the delay time as needed
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f000 fec8 	bl	8002198 <HAL_Delay>

	// Read calibration values (typically stored in ADC->CALFACT)

	uint32_t calibrationValue = ADC1->CALFACT;
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <adcCalibration+0x3c>)
 800140a:	23b4      	movs	r3, #180	; 0xb4
 800140c:	58d3      	ldr	r3, [r2, r3]
 800140e:	607b      	str	r3, [r7, #4]

	// Apply calibration values
	if (HAL_ADCEx_Calibration_SetValue(&hadc1, calibrationValue) != HAL_OK) {
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <adcCalibration+0x38>)
 8001414:	0011      	movs	r1, r2
 8001416:	0018      	movs	r0, r3
 8001418:	f002 f866 	bl	80034e8 <HAL_ADCEx_Calibration_SetValue>
	    // Setting calibration values failed
		return 0;
	   // Error_Handler();
	}
}
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	200000f0 	.word	0x200000f0
 8001428:	40012400 	.word	0x40012400

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 fe35 	bl	800209e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f8aa 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f000 fa04 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 800143c:	f000 f9e4 	bl	8001808 <MX_DMA_Init>
  MX_ADC1_Init();
 8001440:	f000 f8e8 	bl	8001614 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001444:	f000 f950 	bl	80016e8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001448:	f000 f9aa 	bl	80017a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <main+0x13c>)
 800144e:	0018      	movs	r0, r3
 8001450:	f003 fa66 	bl	8004920 <HAL_TIM_Base_Start_IT>



  HAL_ADC_Init(&hadc1);
 8001454:	4b45      	ldr	r3, [pc, #276]	; (800156c <main+0x140>)
 8001456:	0018      	movs	r0, r3
 8001458:	f001 f82c 	bl	80024b4 <HAL_ADC_Init>
  adcCalibration();
 800145c:	f7ff ffc6 	bl	80013ec <adcCalibration>
 HAL_DMA_Init(&hdma_adc1);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <main+0x144>)
 8001462:	0018      	movs	r0, r3
 8001464:	f002 f974 	bl	8003750 <HAL_DMA_Init>
  //LL_DMA_Init(&hdma_adc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 10);
 8001468:	4942      	ldr	r1, [pc, #264]	; (8001574 <main+0x148>)
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <main+0x140>)
 800146c:	220a      	movs	r2, #10
 800146e:	0018      	movs	r0, r3
 8001470:	f001 fa84 	bl	800297c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <main+0x140>)
 8001476:	0018      	movs	r0, r3
 8001478:	f001 f9c2 	bl	8002800 <HAL_ADC_Start_IT>
  led_init();
 800147c:	f7ff fd66 	bl	8000f4c <led_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc1);
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <main+0x140>)
 8001482:	0018      	movs	r0, r3
 8001484:	f001 f9bc 	bl	8002800 <HAL_ADC_Start_IT>
	 /* while(*ptr_dia)
	  {
		  printf("%s\r",*ptr_dia);
		  ptr_dia++;
	  }*/
	  if(Channel_0.isPressed)
 8001488:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <main+0x14c>)
 800148a:	7c9b      	ldrb	r3, [r3, #18]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d013      	beq.n	80014ba <main+0x8e>
	  //if(Channel_0.count!=0)
	  {
		  Channel_0.isPressed = false;
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <main+0x14c>)
 8001494:	2200      	movs	r2, #0
 8001496:	749a      	strb	r2, [r3, #18]
		  Channel_0.count =0;
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <main+0x14c>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
		  if(counterButton<=2)counterButton++;
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <main+0x150>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	dc04      	bgt.n	80014b0 <main+0x84>
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <main+0x150>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <main+0x150>)
 80014ae:	601a      	str	r2, [r3, #0]
		  ptr_dia++;
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <main+0x154>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	1d1a      	adds	r2, r3, #4
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <main+0x154>)
 80014b8:	601a      	str	r2, [r3, #0]
	  }
	  if(Channel_1.isPressed)
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <main+0x158>)
 80014bc:	7c9b      	ldrb	r3, [r3, #18]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <main+0xc0>
	  //if(Channel_1.count!=0)
	  {
		  Channel_1.isPressed = false;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <main+0x158>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	749a      	strb	r2, [r3, #18]
		  Channel_1.count =0;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <main+0x158>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
		  if(counterButton >0)counterButton--;
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <main+0x150>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd04      	ble.n	80014e2 <main+0xb6>
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <main+0x150>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <main+0x150>)
 80014e0:	601a      	str	r2, [r3, #0]
		  ptr_dia--;
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <main+0x154>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	1f1a      	subs	r2, r3, #4
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <main+0x154>)
 80014ea:	601a      	str	r2, [r3, #0]
	  }
	  if(Channel_2.isPressed){
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <main+0x15c>)
 80014ee:	7c9b      	ldrb	r3, [r3, #18]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <main+0xd6>
		  Channel_2.isPressed = false;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <main+0x15c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	749a      	strb	r2, [r3, #18]
		  Channel_2.count =0;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <main+0x15c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
	  }
	  switch(counterButton)
 8001502:	4b1e      	ldr	r3, [pc, #120]	; (800157c <main+0x150>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d026      	beq.n	8001558 <main+0x12c>
 800150a:	dc29      	bgt.n	8001560 <main+0x134>
 800150c:	2b03      	cmp	r3, #3
 800150e:	d019      	beq.n	8001544 <main+0x118>
 8001510:	dc26      	bgt.n	8001560 <main+0x134>
 8001512:	2b01      	cmp	r3, #1
 8001514:	d002      	beq.n	800151c <main+0xf0>
 8001516:	2b02      	cmp	r3, #2
 8001518:	d00a      	beq.n	8001530 <main+0x104>
	  	  	  	  led_setOFF(LED_RED);
	  		  	  led_setOFF(LED_GREEN);
	  		  	  break;
	  	  case 4: counterButton =0;
	  	  	  	  break;
	  	  default: break;
 800151a:	e021      	b.n	8001560 <main+0x134>
	  	  case 1: led_setON(LED_GREEN);
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff ff41 	bl	80013a4 <led_setON>
	  	  	  	  led_setOFF(LED_RED);
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff ff50 	bl	80013c8 <led_setOFF>
	  	  	  	  led_setOFF(LED_YELLOW);
 8001528:	2002      	movs	r0, #2
 800152a:	f7ff ff4d 	bl	80013c8 <led_setOFF>
	  	  	  	  break;
 800152e:	e018      	b.n	8001562 <main+0x136>
	  	  case 2: led_setON(LED_RED);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff ff37 	bl	80013a4 <led_setON>
	  	  	  	  led_setOFF(LED_YELLOW);
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff ff46 	bl	80013c8 <led_setOFF>
	  	  	  	  led_setOFF(LED_GREEN);
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff ff43 	bl	80013c8 <led_setOFF>
	  		  	  break;
 8001542:	e00e      	b.n	8001562 <main+0x136>
	  	  case 3: led_setON(LED_YELLOW);
 8001544:	2002      	movs	r0, #2
 8001546:	f7ff ff2d 	bl	80013a4 <led_setON>
	  	  	  	  led_setOFF(LED_RED);
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ff3c 	bl	80013c8 <led_setOFF>
	  		  	  led_setOFF(LED_GREEN);
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff39 	bl	80013c8 <led_setOFF>
	  		  	  break;
 8001556:	e004      	b.n	8001562 <main+0x136>
	  	  case 4: counterButton =0;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <main+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
	  	  	  	  break;
 800155e:	e000      	b.n	8001562 <main+0x136>
	  	  default: break;
 8001560:	46c0      	nop			; (mov r8, r8)

	  }
	  led_update();
 8001562:	f7ff fd0f 	bl	8000f84 <led_update>
	  HAL_ADC_Start_IT(&hadc1);
 8001566:	e78b      	b.n	8001480 <main+0x54>
 8001568:	200001b0 	.word	0x200001b0
 800156c:	200000f0 	.word	0x200000f0
 8001570:	20000154 	.word	0x20000154
 8001574:	20000290 	.word	0x20000290
 8001578:	2000002c 	.word	0x2000002c
 800157c:	200002b8 	.word	0x200002b8
 8001580:	20000028 	.word	0x20000028
 8001584:	20000044 	.word	0x20000044
 8001588:	2000005c 	.word	0x2000005c

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08d      	sub	sp, #52	; 0x34
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	2414      	movs	r4, #20
 8001594:	193b      	adds	r3, r7, r4
 8001596:	0018      	movs	r0, r3
 8001598:	231c      	movs	r3, #28
 800159a:	001a      	movs	r2, r3
 800159c:	2100      	movs	r1, #0
 800159e:	f004 fa69 	bl	8005a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a2:	003b      	movs	r3, r7
 80015a4:	0018      	movs	r0, r3
 80015a6:	2314      	movs	r3, #20
 80015a8:	001a      	movs	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	f004 fa62 	bl	8005a74 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	0052      	lsls	r2, r2, #1
 80015bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	2240      	movs	r2, #64	; 0x40
 80015c8:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	0018      	movs	r0, r3
 80015ce:	f002 fd0f 	bl	8003ff0 <HAL_RCC_OscConfig>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80015d6:	f000 f9cd 	bl	8001974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	003b      	movs	r3, r7
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015e0:	003b      	movs	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	003b      	movs	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015ec:	003b      	movs	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80015f2:	003b      	movs	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015f8:	003b      	movs	r3, r7
 80015fa:	2101      	movs	r1, #1
 80015fc:	0018      	movs	r0, r3
 80015fe:	f002 fedb 	bl	80043b8 <HAL_RCC_ClockConfig>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001606:	f000 f9b5 	bl	8001974 <Error_Handler>
  }
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b00d      	add	sp, #52	; 0x34
 8001610:	bd90      	pop	{r4, r7, pc}
	...

08001614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	0018      	movs	r0, r3
 800161e:	230c      	movs	r3, #12
 8001620:	001a      	movs	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	f004 fa26 	bl	8005a74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800162a:	4a2e      	ldr	r2, [pc, #184]	; (80016e4 <MX_ADC1_Init+0xd0>)
 800162c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	05d2      	lsls	r2, r2, #23
 8001634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800164a:	2204      	movs	r2, #4
 800164c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001650:	2200      	movs	r2, #0
 8001652:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001656:	2200      	movs	r2, #0
 8001658:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800165c:	2200      	movs	r2, #0
 800165e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001662:	2201      	movs	r2, #1
 8001664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001668:	2220      	movs	r2, #32
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800167c:	222c      	movs	r2, #44	; 0x2c
 800167e:	2101      	movs	r1, #1
 8001680:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800168a:	2200      	movs	r2, #0
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001690:	2200      	movs	r2, #0
 8001692:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_ADC1_Init+0xcc>)
 8001696:	223c      	movs	r2, #60	; 0x3c
 8001698:	2100      	movs	r1, #0
 800169a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <MX_ADC1_Init+0xcc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_ADC1_Init+0xcc>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 ff05 	bl	80024b4 <HAL_ADC_Init>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80016ae:	f000 f961 	bl	8001974 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	1d3a      	adds	r2, r7, #4
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_ADC1_Init+0xcc>)
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f001 f9f4 	bl	8002ab8 <HAL_ADC_ConfigChannel>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80016d4:	f000 f94e 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000f0 	.word	0x200000f0
 80016e4:	40012400 	.word	0x40012400

080016e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	2310      	movs	r3, #16
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	0018      	movs	r0, r3
 80016f4:	2310      	movs	r3, #16
 80016f6:	001a      	movs	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f004 f9bb 	bl	8005a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	0018      	movs	r0, r3
 8001702:	230c      	movs	r3, #12
 8001704:	001a      	movs	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	f004 f9b4 	bl	8005a74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_TIM1_Init+0xac>)
 800170e:	4a22      	ldr	r2, [pc, #136]	; (8001798 <MX_TIM1_Init+0xb0>)
 8001710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1399;
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_TIM1_Init+0xac>)
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <MX_TIM1_Init+0xb4>)
 8001716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_TIM1_Init+0xac>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM1_Init+0xac>)
 8001720:	2263      	movs	r2, #99	; 0x63
 8001722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_TIM1_Init+0xac>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM1_Init+0xac>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_TIM1_Init+0xac>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_TIM1_Init+0xac>)
 8001738:	0018      	movs	r0, r3
 800173a:	f003 f899 	bl	8004870 <HAL_TIM_Base_Init>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001742:	f000 f917 	bl	8001974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	2110      	movs	r1, #16
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	0152      	lsls	r2, r2, #5
 800174e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001750:	187a      	adds	r2, r7, r1
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_TIM1_Init+0xac>)
 8001754:	0011      	movs	r1, r2
 8001756:	0018      	movs	r0, r3
 8001758:	f003 fa32 	bl	8004bc0 <HAL_TIM_ConfigClockSource>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001760:	f000 f908 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001776:	1d3a      	adds	r2, r7, #4
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_TIM1_Init+0xac>)
 800177a:	0011      	movs	r1, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f003 fc25 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001786:	f000 f8f5 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b008      	add	sp, #32
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	200001b0 	.word	0x200001b0
 8001798:	40012c00 	.word	0x40012c00
 800179c:	00000577 	.word	0x00000577

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <MX_USART2_UART_Init+0x64>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017ac:	22e1      	movs	r2, #225	; 0xe1
 80017ae:	0252      	lsls	r2, r2, #9
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <MX_USART2_UART_Init+0x60>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f003 fc68 	bl	80050c0 <HAL_UART_Init>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017f4:	f000 f8be 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	200001fc 	.word	0x200001fc
 8001804:	40004400 	.word	0x40004400

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_DMA_Init+0x38>)
 8001810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_DMA_Init+0x38>)
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	639a      	str	r2, [r3, #56]	; 0x38
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_DMA_Init+0x38>)
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2009      	movs	r0, #9
 800182c:	f001 ff5e 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001830:	2009      	movs	r0, #9
 8001832:	f001 ff70 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	240c      	movs	r4, #12
 800184c:	193b      	adds	r3, r7, r4
 800184e:	0018      	movs	r0, r3
 8001850:	2314      	movs	r3, #20
 8001852:	001a      	movs	r2, r3
 8001854:	2100      	movs	r1, #0
 8001856:	f004 f90d 	bl	8005a74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <MX_GPIO_Init+0x120>)
 800185c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <MX_GPIO_Init+0x120>)
 8001860:	2104      	movs	r1, #4
 8001862:	430a      	orrs	r2, r1
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <MX_GPIO_Init+0x120>)
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	2204      	movs	r2, #4
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <MX_GPIO_Init+0x120>)
 8001874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <MX_GPIO_Init+0x120>)
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
 800187e:	4b39      	ldr	r3, [pc, #228]	; (8001964 <MX_GPIO_Init+0x120>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b36      	ldr	r3, [pc, #216]	; (8001964 <MX_GPIO_Init+0x120>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	4b35      	ldr	r3, [pc, #212]	; (8001964 <MX_GPIO_Init+0x120>)
 8001890:	2102      	movs	r1, #2
 8001892:	430a      	orrs	r2, r1
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
 8001896:	4b33      	ldr	r3, [pc, #204]	; (8001964 <MX_GPIO_Init+0x120>)
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GREEN_GPIO_Port, LD4_GREEN_Pin, GPIO_PIN_RESET);
 80018a2:	23a0      	movs	r3, #160	; 0xa0
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	2200      	movs	r2, #0
 80018a8:	2120      	movs	r1, #32
 80018aa:	0018      	movs	r0, r3
 80018ac:	f002 fb33 	bl	8003f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_B_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <MX_GPIO_Init+0x124>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	2138      	movs	r1, #56	; 0x38
 80018b6:	0018      	movs	r0, r3
 80018b8:	f002 fb2d 	bl	8003f16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_BLUE_Pin */
  GPIO_InitStruct.Pin = BTN_BLUE_Pin;
 80018bc:	193b      	adds	r3, r7, r4
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	0192      	lsls	r2, r2, #6
 80018c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c4:	193b      	adds	r3, r7, r4
 80018c6:	4a29      	ldr	r2, [pc, #164]	; (800196c <MX_GPIO_Init+0x128>)
 80018c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_BLUE_GPIO_Port, &GPIO_InitStruct);
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <MX_GPIO_Init+0x12c>)
 80018d4:	0019      	movs	r1, r3
 80018d6:	0010      	movs	r0, r2
 80018d8:	f002 f98e 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_GREEN_Pin */
  GPIO_InitStruct.Pin = LD4_GREEN_Pin;
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	2220      	movs	r2, #32
 80018e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2201      	movs	r2, #1
 80018e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GREEN_GPIO_Port, &GPIO_InitStruct);
 80018f4:	193a      	adds	r2, r7, r4
 80018f6:	23a0      	movs	r3, #160	; 0xa0
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f002 f97b 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	22c0      	movs	r2, #192	; 0xc0
 8001906:	00d2      	lsls	r2, r2, #3
 8001908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <MX_GPIO_Init+0x128>)
 800190e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	193a      	adds	r2, r7, r4
 8001918:	23a0      	movs	r3, #160	; 0xa0
 800191a:	05db      	lsls	r3, r3, #23
 800191c:	0011      	movs	r1, r2
 800191e:	0018      	movs	r0, r3
 8001920:	f002 f96a 	bl	8003bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_B_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin|LED_G_Pin;
 8001924:	0021      	movs	r1, r4
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2238      	movs	r2, #56	; 0x38
 800192a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2201      	movs	r2, #1
 8001930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	187b      	adds	r3, r7, r1
 8001940:	4a09      	ldr	r2, [pc, #36]	; (8001968 <MX_GPIO_Init+0x124>)
 8001942:	0019      	movs	r1, r3
 8001944:	0010      	movs	r0, r2
 8001946:	f002 f957 	bl	8003bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2007      	movs	r0, #7
 8001950:	f001 fecc 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001954:	2007      	movs	r0, #7
 8001956:	f001 fede 	bl	8003716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b009      	add	sp, #36	; 0x24
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	50000400 	.word	0x50000400
 800196c:	10210000 	.word	0x10210000
 8001970:	50000800 	.word	0x50000800

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197c:	e7fe      	b.n	800197c <Error_Handler+0x8>
	...

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x44>)
 8001988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_MspInit+0x44>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x44>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2201      	movs	r2, #1
 8001998:	4013      	ands	r3, r2
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x44>)
 80019a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_MspInit+0x44>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0549      	lsls	r1, r1, #21
 80019a8:	430a      	orrs	r2, r1
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_MspInit+0x44>)
 80019ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	055b      	lsls	r3, r3, #21
 80019b4:	4013      	ands	r3, r2
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b091      	sub	sp, #68	; 0x44
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	232c      	movs	r3, #44	; 0x2c
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	0018      	movs	r0, r3
 80019d6:	2314      	movs	r3, #20
 80019d8:	001a      	movs	r2, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	f004 f84a 	bl	8005a74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e0:	2410      	movs	r4, #16
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	0018      	movs	r0, r3
 80019e6:	231c      	movs	r3, #28
 80019e8:	001a      	movs	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	f004 f842 	bl	8005a74 <memset>
  if(hadc->Instance==ADC1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a35      	ldr	r2, [pc, #212]	; (8001acc <HAL_ADC_MspInit+0x104>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d164      	bne.n	8001ac4 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	01d2      	lsls	r2, r2, #7
 8001a00:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001a02:	193b      	adds	r3, r7, r4
 8001a04:	2200      	movs	r2, #0
 8001a06:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f002 fe42 	bl	8004694 <HAL_RCCEx_PeriphCLKConfig>
 8001a10:	1e03      	subs	r3, r0, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001a14:	f7ff ffae 	bl	8001974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_ADC_MspInit+0x108>)
 8001a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_ADC_MspInit+0x108>)
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0349      	lsls	r1, r1, #13
 8001a22:	430a      	orrs	r2, r1
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_ADC_MspInit+0x108>)
 8001a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	035b      	lsls	r3, r3, #13
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_ADC_MspInit+0x108>)
 8001a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_ADC_MspInit+0x108>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_ADC_MspInit+0x108>)
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2203      	movs	r2, #3
 8001a58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	187a      	adds	r2, r7, r1
 8001a62:	23a0      	movs	r3, #160	; 0xa0
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f002 f8c5 	bl	8003bf8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_ADC_MspInit+0x110>)
 8001a72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a76:	2205      	movs	r2, #5
 8001a78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f001 fe50 	bl	8003750 <HAL_DMA_Init>
 8001ab0:	1e03      	subs	r3, r0, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001ab4:	f7ff ff5e 	bl	8001974 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_ADC_MspInit+0x10c>)
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b011      	add	sp, #68	; 0x44
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	40012400 	.word	0x40012400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	20000154 	.word	0x20000154
 8001ad8:	40020008 	.word	0x40020008

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d115      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_TIM_Base_MspInit+0x4c>)
 8001af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_TIM_Base_MspInit+0x4c>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	0109      	lsls	r1, r1, #4
 8001af8:	430a      	orrs	r2, r1
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_TIM_Base_MspInit+0x4c>)
 8001afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	200d      	movs	r0, #13
 8001b10:	f001 fdec 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001b14:	200d      	movs	r0, #13
 8001b16:	f001 fdfe 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b004      	add	sp, #16
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b08b      	sub	sp, #44	; 0x2c
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	2414      	movs	r4, #20
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	0018      	movs	r0, r3
 8001b3a:	2314      	movs	r3, #20
 8001b3c:	001a      	movs	r2, r3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	f003 ff98 	bl	8005a74 <memset>
  if(huart->Instance==USART2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <HAL_UART_MspInit+0x8c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d130      	bne.n	8001bb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0289      	lsls	r1, r1, #10
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	029b      	lsls	r3, r3, #10
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_UART_MspInit+0x90>)
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b82:	0021      	movs	r1, r4
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	187a      	adds	r2, r7, r1
 8001ba4:	23a0      	movs	r3, #160	; 0xa0
 8001ba6:	05db      	lsls	r3, r3, #23
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f002 f824 	bl	8003bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b00b      	add	sp, #44	; 0x2c
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	40004400 	.word	0x40004400
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <UART_TransmitString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to transmit a string over UART
void UART_TransmitString(const char *str) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7fe fa9c 	bl	8000108 <strlen>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	425b      	negs	r3, r3
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <UART_TransmitString+0x28>)
 8001bdc:	f003 fac6 	bl	800516c <HAL_UART_Transmit>
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200001fc 	.word	0x200001fc

08001bec <UART_TransmitInteger>:

// Function to transmit an integer value over UART
void UART_TransmitInteger(int value) {
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b09d      	sub	sp, #116	; 0x74
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    char buffer[100];  // Adjust the buffer size as needed for your integer size

    // Convert integer to string
    snprintf(buffer, sizeof(buffer), "VOLTS %d\r\n", value);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <UART_TransmitInteger+0x28>)
 8001bf8:	240c      	movs	r4, #12
 8001bfa:	1938      	adds	r0, r7, r4
 8001bfc:	2164      	movs	r1, #100	; 0x64
 8001bfe:	f003 ff05 	bl	8005a0c <sniprintf>

    // Transmit the string over UART
    UART_TransmitString(buffer);
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff ffdb 	bl	8001bc0 <UART_TransmitString>
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b01d      	add	sp, #116	; 0x74
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	080063d0 	.word	0x080063d0

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <NMI_Handler+0x4>

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f000 fa90 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f002 f99a 	bl	8003f88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f002 f995 	bl	8003f88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_BLUE_Pin);
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	0018      	movs	r0, r3
 8001c64:	f002 f990 	bl	8003f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  //counterButton+=1;
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <DMA1_Channel1_IRQHandler+0x14>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f001 fe7c 	bl	8003974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	20000154 	.word	0x20000154

08001c88 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x198>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f002 fe94 	bl	80049bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */
  timer1Sec++;
 8001c94:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x19c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x19c>)
 8001c9c:	601a      	str	r2, [r3, #0]
  timerUart++;
 8001c9e:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a0>)
 8001ca6:	601a      	str	r2, [r3, #0]
  if(timerUart>=500){
 8001ca8:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a0>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	23fa      	movs	r3, #250	; 0xfa
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d307      	bcc.n	8001cc4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x3c>
	  timerUart =0;
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
	  UART_TransmitInteger(voltage_mv);
 8001cba:	4b5c      	ldr	r3, [pc, #368]	; (8001e2c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff ff94 	bl	8001bec <UART_TransmitInteger>
  }
  if(timer1Sec>=50){
 8001cc4:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x19c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b31      	cmp	r3, #49	; 0x31
 8001cca:	d908      	bls.n	8001cde <TIM1_BRK_UP_TRG_COM_IRQHandler+0x56>
	  HAL_GPIO_TogglePin(GPIOA, LD4_GREEN_Pin);
 8001ccc:	23a0      	movs	r3, #160	; 0xa0
 8001cce:	05db      	lsls	r3, r3, #23
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f002 f93c 	bl	8003f50 <HAL_GPIO_TogglePin>
	  timer1Sec =0;
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x19c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
  }
  if(Channel_0.debounce > 0)
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	dd30      	ble.n	8001d48 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc0>
  {
	  Channel_0.debounce++;
 8001ce6:	4b52      	ldr	r3, [pc, #328]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001cee:	609a      	str	r2, [r3, #8]
	  if (Channel_0.debounce >= Channel_0.debounce_target)
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	db25      	blt.n	8001d48 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc0>
	      {

	     	 Channel_0.current_state = HAL_GPIO_ReadPin(GPIOA, RIGHT_Pin);
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	00da      	lsls	r2, r3, #3
 8001d00:	23a0      	movs	r3, #160	; 0xa0
 8001d02:	05db      	lsls	r3, r3, #23
 8001d04:	0011      	movs	r1, r2
 8001d06:	0018      	movs	r0, r3
 8001d08:	f002 f8e8 	bl	8003edc <HAL_GPIO_ReadPin>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	4193      	sbcs	r3, r2
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d16:	745a      	strb	r2, [r3, #17]

	     	 if (Channel_0.last_state == Channel_0.current_state)
 8001d18:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d1a:	7c1b      	ldrb	r3, [r3, #16]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d20:	7c5b      	ldrb	r3, [r3, #17]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d10f      	bne.n	8001d48 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc0>
	     	 {

	                 Channel_0.last_state = Channel_0.current_state;
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d2a:	7c5b      	ldrb	r3, [r3, #17]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d30:	741a      	strb	r2, [r3, #16]
	                 Channel_0.count++;
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d3a:	605a      	str	r2, [r3, #4]
	                 Channel_0.debounce = 0;
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
	                 Channel_0.isPressed = true;
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	749a      	strb	r2, [r3, #18]

	       }


  }
  if(Channel_1.debounce > 0)
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dd30      	ble.n	8001db2 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12a>
    {
  	  Channel_1.debounce++;
 8001d50:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d58:	609a      	str	r2, [r3, #8]
  	  if (Channel_1.debounce >= Channel_1.debounce_target)
 8001d5a:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	db25      	blt.n	8001db2 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12a>
  	      {

  	     	 Channel_1.current_state = HAL_GPIO_ReadPin(GPIOA, LEFT_Pin);
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	23a0      	movs	r3, #160	; 0xa0
 8001d6c:	05db      	lsls	r3, r3, #23
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f002 f8b3 	bl	8003edc <HAL_GPIO_ReadPin>
 8001d76:	0003      	movs	r3, r0
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	4193      	sbcs	r3, r2
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d80:	745a      	strb	r2, [r3, #17]

  	     	 if (Channel_1.last_state == Channel_1.current_state)
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d84:	7c1b      	ldrb	r3, [r3, #16]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d8a:	7c5b      	ldrb	r3, [r3, #17]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d10f      	bne.n	8001db2 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x12a>
  	     	 {

  	                 Channel_1.last_state = Channel_1.current_state;
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d94:	7c5b      	ldrb	r3, [r3, #17]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d9a:	741a      	strb	r2, [r3, #16]
  	                 Channel_1.count++;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001da4:	605a      	str	r2, [r3, #4]
  	                 Channel_1.debounce = 0;
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  	                 Channel_1.isPressed = true;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1ac>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	749a      	strb	r2, [r3, #18]

  	       }


    }
  if(Channel_2.debounce > 0){
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	dd2f      	ble.n	8001e1a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x192>
    	  Channel_2.debounce++;
 8001dba:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001dc2:	609a      	str	r2, [r3, #8]

    	  if (Channel_2.debounce >= Channel_2.debounce_target){
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	db24      	blt.n	8001e1a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x192>

    	     	 Channel_2.current_state = HAL_GPIO_ReadPin(GPIOC, BTN_BLUE_Pin);
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	019b      	lsls	r3, r3, #6
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b4>)
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	0010      	movs	r0, r2
 8001dda:	f002 f87f 	bl	8003edc <HAL_GPIO_ReadPin>
 8001dde:	0003      	movs	r3, r0
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	4193      	sbcs	r3, r2
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001de8:	745a      	strb	r2, [r3, #17]

    	     	 if (Channel_2.last_state == Channel_2.current_state){
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001dec:	7c1b      	ldrb	r3, [r3, #16]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001df2:	7c5b      	ldrb	r3, [r3, #17]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d10f      	bne.n	8001e1a <TIM1_BRK_UP_TRG_COM_IRQHandler+0x192>

    	                 Channel_2.last_state = Channel_2.current_state;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001dfc:	7c5b      	ldrb	r3, [r3, #17]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001e02:	741a      	strb	r2, [r3, #16]
    	                 Channel_2.count++;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001e0c:	605a      	str	r2, [r3, #4]
    	                 Channel_2.debounce = 0;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
    	                 Channel_2.isPressed = true;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1b0>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	749a      	strb	r2, [r3, #18]
    	  }


      }
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200001b0 	.word	0x200001b0
 8001e24:	200002bc 	.word	0x200002bc
 8001e28:	200002d0 	.word	0x200002d0
 8001e2c:	200002d4 	.word	0x200002d4
 8001e30:	2000002c 	.word	0x2000002c
 8001e34:	20000044 	.word	0x20000044
 8001e38:	2000005c 	.word	0x2000005c
 8001e3c:	50000800 	.word	0x50000800

08001e40 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
#define ADC_REFERENCE_VOLTAGE 3.3f

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b09b      	sub	sp, #108	; 0x6c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    // Data processing code here using adc_buffer
    HAL_ADC_Stop_IT(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fd50 	bl	80028f0 <HAL_ADC_Stop_IT>

    int sum = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t movingAverage[WINDOW_SIZE];
    uint32_t samples[ADC_BUFFER_SIZE];
    int idx = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	663b      	str	r3, [r7, #96]	; 0x60

    // Inicialização dos valores da janela de média móvel
    for (int i = 0; i < WINDOW_SIZE; ++i) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e5c:	e008      	b.n	8001e70 <HAL_ADC_ConvCpltCallback+0x30>
        movingAverage[i] = 0;
 8001e5e:	2330      	movs	r3, #48	; 0x30
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	2100      	movs	r1, #0
 8001e68:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < WINDOW_SIZE; ++i) {
 8001e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	ddf3      	ble.n	8001e5e <HAL_ADC_ConvCpltCallback+0x1e>
    }

    // Copy values from adc_buffer to samples
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e7a:	e02a      	b.n	8001ed2 <HAL_ADC_ConvCpltCallback+0x92>
        samples[i] = adc_buffer[i];
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_ADC_ConvCpltCallback+0xfc>)
 8001e7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	58d1      	ldr	r1, [r2, r3]
 8001e84:	2008      	movs	r0, #8
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	50d1      	str	r1, [r2, r3]

        // Atualiza a janela de média móvel
        sum -= movingAverage[idx]; // Remove o valor mais antigo da soma
 8001e8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e90:	2430      	movs	r4, #48	; 0x30
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001e96:	0089      	lsls	r1, r1, #2
 8001e98:	58cb      	ldr	r3, [r1, r3]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	667b      	str	r3, [r7, #100]	; 0x64
        sum += samples[i]; // Adiciona o novo valor à soma
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	58d2      	ldr	r2, [r2, r3]
 8001ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	667b      	str	r3, [r7, #100]	; 0x64
        movingAverage[idx] = samples[i]; // Atualiza o valor na janela
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	58d1      	ldr	r1, [r2, r3]
 8001eb4:	193b      	adds	r3, r7, r4
 8001eb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	50d1      	str	r1, [r2, r3]
        idx = (idx + 1) % WINDOW_SIZE; // Atualiza o índice da janela circular
 8001ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	210a      	movs	r1, #10
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7fe faa2 	bl	800040c <__aeabi_idivmod>
 8001ec8:	000b      	movs	r3, r1
 8001eca:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 8001ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ece:	3301      	adds	r3, #1
 8001ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	ddd1      	ble.n	8001e7c <HAL_ADC_ConvCpltCallback+0x3c>
    }

    // Calcula a média móvel
    average = (float)sum / WINDOW_SIZE;
 8001ed8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001eda:	f7fe fedd 	bl	8000c98 <__aeabi_i2f>
 8001ede:	1c03      	adds	r3, r0, #0
 8001ee0:	4917      	ldr	r1, [pc, #92]	; (8001f40 <HAL_ADC_ConvCpltCallback+0x100>)
 8001ee2:	1c18      	adds	r0, r3, #0
 8001ee4:	f7fe fab0 	bl	8000448 <__aeabi_fdiv>
 8001ee8:	1c03      	adds	r3, r0, #0
 8001eea:	1c1a      	adds	r2, r3, #0
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_ADC_ConvCpltCallback+0x104>)
 8001eee:	601a      	str	r2, [r3, #0]

    // Convert ADC average to voltage
    voltage = (average / (float)4095) * ADC_REFERENCE_VOLTAGE;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_ADC_ConvCpltCallback+0x104>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4914      	ldr	r1, [pc, #80]	; (8001f48 <HAL_ADC_ConvCpltCallback+0x108>)
 8001ef6:	1c18      	adds	r0, r3, #0
 8001ef8:	f7fe faa6 	bl	8000448 <__aeabi_fdiv>
 8001efc:	1c03      	adds	r3, r0, #0
 8001efe:	4913      	ldr	r1, [pc, #76]	; (8001f4c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001f00:	1c18      	adds	r0, r3, #0
 8001f02:	f7fe fbbb 	bl	800067c <__aeabi_fmul>
 8001f06:	1c03      	adds	r3, r0, #0
 8001f08:	1c1a      	adds	r2, r3, #0
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_ADC_ConvCpltCallback+0x110>)
 8001f0c:	601a      	str	r2, [r3, #0]
    voltage_mv = (average * 3300) / 4095;  // Scaled to millivolts
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_ADC_ConvCpltCallback+0x104>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4910      	ldr	r1, [pc, #64]	; (8001f54 <HAL_ADC_ConvCpltCallback+0x114>)
 8001f14:	1c18      	adds	r0, r3, #0
 8001f16:	f7fe fbb1 	bl	800067c <__aeabi_fmul>
 8001f1a:	1c03      	adds	r3, r0, #0
 8001f1c:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_ADC_ConvCpltCallback+0x108>)
 8001f1e:	1c18      	adds	r0, r3, #0
 8001f20:	f7fe fa92 	bl	8000448 <__aeabi_fdiv>
 8001f24:	1c03      	adds	r3, r0, #0
 8001f26:	1c18      	adds	r0, r3, #0
 8001f28:	f7fe fa76 	bl	8000418 <__aeabi_f2uiz>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_ADC_ConvCpltCallback+0x118>)
 8001f30:	601a      	str	r2, [r3, #0]
    // Now 'voltage' contains the voltage value in the range [0, 3.3] volts
    // You can use it as needed for further processing.
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b01b      	add	sp, #108	; 0x6c
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	20000290 	.word	0x20000290
 8001f40:	41200000 	.word	0x41200000
 8001f44:	200002dc 	.word	0x200002dc
 8001f48:	457ff000 	.word	0x457ff000
 8001f4c:	40533333 	.word	0x40533333
 8001f50:	200002d8 	.word	0x200002d8
 8001f54:	454e4000 	.word	0x454e4000
 8001f58:	200002d4 	.word	0x200002d4

08001f5c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	0002      	movs	r2, r0
 8001f64:	1dbb      	adds	r3, r7, #6
 8001f66:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == Channel_0.pin)
 8001f68:	1dbb      	adds	r3, r7, #6
 8001f6a:	881a      	ldrh	r2, [r3, #0]
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_GPIO_EXTI_Falling_Callback+0x26>
	{
		Channel_0.last_state =LOW;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	741a      	strb	r2, [r3, #16]
		Channel_0.debounce = 1;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	609a      	str	r2, [r3, #8]
	else if(GPIO_Pin == Channel_2.pin)
			{
				Channel_2.last_state =LOW;
				Channel_2.debounce = 1;
			}
}
 8001f80:	e018      	b.n	8001fb4 <HAL_GPIO_EXTI_Falling_Callback+0x58>
	else if(GPIO_Pin == Channel_1.pin)
 8001f82:	1dbb      	adds	r3, r7, #6
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d106      	bne.n	8001f9c <HAL_GPIO_EXTI_Falling_Callback+0x40>
			Channel_1.last_state =LOW;
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	741a      	strb	r2, [r3, #16]
			Channel_1.debounce = 1;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	e00b      	b.n	8001fb4 <HAL_GPIO_EXTI_Falling_Callback+0x58>
	else if(GPIO_Pin == Channel_2.pin)
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d105      	bne.n	8001fb4 <HAL_GPIO_EXTI_Falling_Callback+0x58>
				Channel_2.last_state =LOW;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	741a      	strb	r2, [r3, #16]
				Channel_2.debounce = 1;
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000002c 	.word	0x2000002c
 8001fc0:	20000044 	.word	0x20000044
 8001fc4:	2000005c 	.word	0x2000005c

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f003 fd44 	bl	8005a84 <__errno>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	2301      	movs	r3, #1
 8002004:	425b      	negs	r3, r3
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	18d2      	adds	r2, r2, r3
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <_sbrk+0x64>)
 8002018:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b006      	add	sp, #24
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20003000 	.word	0x20003000
 8002028:	00000400 	.word	0x00000400
 800202c:	200002e0 	.word	0x200002e0
 8002030:	20000430 	.word	0x20000430

08002034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <SystemInit+0x14>)
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	0512      	lsls	r2, r2, #20
 800203e:	609a      	str	r2, [r3, #8]
#endif
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800204e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002050:	f7ff fff0 	bl	8002034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002054:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002056:	e003      	b.n	8002060 <LoopCopyDataInit>

08002058 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800205a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800205c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800205e:	3104      	adds	r1, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <LoopForever+0xa>)
  ldr r3, =_edata
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <LoopForever+0xe>)
  adds r2, r0, r1
 8002064:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002066:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002068:	d3f6      	bcc.n	8002058 <CopyDataInit>
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <LoopForever+0x12>)
  b LoopFillZerobss
 800206c:	e002      	b.n	8002074 <LoopFillZerobss>

0800206e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002070:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002072:	3204      	adds	r2, #4

08002074 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <LoopForever+0x16>)
  cmp r2, r3
 8002076:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002078:	d3f9      	bcc.n	800206e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800207a:	f003 fd09 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207e:	f7ff f9d5 	bl	800142c <main>

08002082 <LoopForever>:

LoopForever:
    b LoopForever
 8002082:	e7fe      	b.n	8002082 <LoopForever>
  ldr   r0, =_estack
 8002084:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002088:	08006530 	.word	0x08006530
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002090:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 8002094:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 8002098:	20000430 	.word	0x20000430

0800209c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_IRQHandler>

0800209e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020aa:	2003      	movs	r0, #3
 80020ac:	f000 f80e 	bl	80020cc <HAL_InitTick>
 80020b0:	1e03      	subs	r3, r0, #0
 80020b2:	d003      	beq.n	80020bc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e001      	b.n	80020c0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020bc:	f7ff fc60 	bl	8001980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	781b      	ldrb	r3, [r3, #0]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d4:	230f      	movs	r3, #15
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_InitTick+0x88>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02b      	beq.n	800213c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_InitTick+0x8c>)
 80020e6:	681c      	ldr	r4, [r3, #0]
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_InitTick+0x88>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	0019      	movs	r1, r3
 80020ee:	23fa      	movs	r3, #250	; 0xfa
 80020f0:	0098      	lsls	r0, r3, #2
 80020f2:	f7fe f81b 	bl	800012c <__udivsi3>
 80020f6:	0003      	movs	r3, r0
 80020f8:	0019      	movs	r1, r3
 80020fa:	0020      	movs	r0, r4
 80020fc:	f7fe f816 	bl	800012c <__udivsi3>
 8002100:	0003      	movs	r3, r0
 8002102:	0018      	movs	r0, r3
 8002104:	f001 fb17 	bl	8003736 <HAL_SYSTICK_Config>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d112      	bne.n	8002132 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d80a      	bhi.n	8002128 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	2301      	movs	r3, #1
 8002116:	425b      	negs	r3, r3
 8002118:	2200      	movs	r2, #0
 800211a:	0018      	movs	r0, r3
 800211c:	f001 fae6 	bl	80036ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_InitTick+0x90>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00d      	b.n	8002144 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002128:	230f      	movs	r3, #15
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e008      	b.n	8002144 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002132:	230f      	movs	r3, #15
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	e003      	b.n	8002144 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800213c:	230f      	movs	r3, #15
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b005      	add	sp, #20
 8002150:	bd90      	pop	{r4, r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	2000007c 	.word	0x2000007c
 8002158:	20000074 	.word	0x20000074
 800215c:	20000078 	.word	0x20000078

08002160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_IncTick+0x1c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	001a      	movs	r2, r3
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x20>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	18d2      	adds	r2, r2, r3
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_IncTick+0x20>)
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	2000007c 	.word	0x2000007c
 8002180:	200002e4 	.word	0x200002e4

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <HAL_GetTick+0x10>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	200002e4 	.word	0x200002e4

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fff0 	bl	8002184 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	001a      	movs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	f7ff ffe0 	bl	8002184 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	2000007c 	.word	0x2000007c

080021e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80021f0:	401a      	ands	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	ff3fffff 	.word	0xff3fffff

08002208 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	23c0      	movs	r3, #192	; 0xc0
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	4013      	ands	r3, r2
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b002      	add	sp, #8
 8002220:	bd80      	pop	{r7, pc}

08002222 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	2104      	movs	r1, #4
 8002236:	400a      	ands	r2, r1
 8002238:	2107      	movs	r1, #7
 800223a:	4091      	lsls	r1, r2
 800223c:	000a      	movs	r2, r1
 800223e:	43d2      	mvns	r2, r2
 8002240:	401a      	ands	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2104      	movs	r1, #4
 8002246:	400b      	ands	r3, r1
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4099      	lsls	r1, r3
 800224c:	000b      	movs	r3, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}

0800225c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	2104      	movs	r1, #4
 800226e:	400a      	ands	r2, r1
 8002270:	2107      	movs	r1, #7
 8002272:	4091      	lsls	r1, r2
 8002274:	000a      	movs	r2, r1
 8002276:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2104      	movs	r1, #4
 800227c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800227e:	40da      	lsrs	r2, r3
 8002280:	0013      	movs	r3, r2
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}

0800228a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4013      	ands	r3, r2
 800229c:	d101      	bne.n	80022a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}

080022ac <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	211f      	movs	r1, #31
 80022c0:	400a      	ands	r2, r1
 80022c2:	210f      	movs	r1, #15
 80022c4:	4091      	lsls	r1, r2
 80022c6:	000a      	movs	r2, r1
 80022c8:	43d2      	mvns	r2, r2
 80022ca:	401a      	ands	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	210f      	movs	r1, #15
 80022d2:	4019      	ands	r1, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	201f      	movs	r0, #31
 80022d8:	4003      	ands	r3, r0
 80022da:	4099      	lsls	r1, r3
 80022dc:	000b      	movs	r3, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}

080022ec <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	025b      	lsls	r3, r3, #9
 80022fe:	0a5b      	lsrs	r3, r3, #9
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b002      	add	sp, #8
 800230c:	bd80      	pop	{r7, pc}

0800230e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	0252      	lsls	r2, r2, #9
 8002320:	0a52      	lsrs	r2, r2, #9
 8002322:	43d2      	mvns	r2, r2
 8002324:	401a      	ands	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	0212      	lsls	r2, r2, #8
 8002348:	43d2      	mvns	r2, r2
 800234a:	401a      	ands	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	400b      	ands	r3, r1
 8002354:	4904      	ldr	r1, [pc, #16]	; (8002368 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002356:	400b      	ands	r3, r1
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b004      	add	sp, #16
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	7fffff00 	.word	0x7fffff00

0800236c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a05      	ldr	r2, [pc, #20]	; (8002390 <LL_ADC_EnableInternalRegulator+0x24>)
 800237a:	4013      	ands	r3, r2
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	0552      	lsls	r2, r2, #21
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	6fffffe8 	.word	0x6fffffe8

08002394 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	401a      	ands	r2, r3
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	055b      	lsls	r3, r3, #21
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d101      	bne.n	80023b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	0018      	movs	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}

080023bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <LL_ADC_Enable+0x20>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	2201      	movs	r2, #1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	7fffffe8 	.word	0x7fffffe8

080023e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <LL_ADC_Disable+0x20>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	2202      	movs	r2, #2
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	7fffffe8 	.word	0x7fffffe8

08002404 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <LL_ADC_IsEnabled+0x18>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <LL_ADC_IsEnabled+0x1a>
 800241c:	2300      	movs	r3, #0
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}

08002426 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d101      	bne.n	800243e <LL_ADC_IsDisableOngoing+0x18>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <LL_ADC_IsDisableOngoing+0x1a>
 800243e:	2300      	movs	r3, #0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <LL_ADC_REG_StartConversion+0x20>)
 8002456:	4013      	ands	r3, r2
 8002458:	2204      	movs	r2, #4
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}
 8002468:	7fffffe8 	.word	0x7fffffe8

0800246c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <LL_ADC_REG_StopConversion+0x20>)
 800247a:	4013      	ands	r3, r2
 800247c:	2210      	movs	r2, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}
 800248c:	7fffffe8 	.word	0x7fffffe8

08002490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e17e      	b.n	80027d8 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff fa6f 	bl	80019c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2254      	movs	r2, #84	; 0x54
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff ff49 	bl	8002394 <LL_ADC_IsInternalRegulatorEnabled>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d114      	bne.n	8002530 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0018      	movs	r0, r3
 800250c:	f7ff ff2e 	bl	800236c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002510:	4bb3      	ldr	r3, [pc, #716]	; (80027e0 <HAL_ADC_Init+0x32c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	49b3      	ldr	r1, [pc, #716]	; (80027e4 <HAL_ADC_Init+0x330>)
 8002516:	0018      	movs	r0, r3
 8002518:	f7fd fe08 	bl	800012c <__udivsi3>
 800251c:	0003      	movs	r3, r0
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002522:	e002      	b.n	800252a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3b01      	subs	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff ff2d 	bl	8002394 <LL_ADC_IsInternalRegulatorEnabled>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d10f      	bne.n	800255e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	2210      	movs	r2, #16
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2201      	movs	r2, #1
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002556:	231f      	movs	r3, #31
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0018      	movs	r0, r3
 8002564:	f7ff ff94 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002568:	0003      	movs	r3, r0
 800256a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	2210      	movs	r2, #16
 8002572:	4013      	ands	r3, r2
 8002574:	d000      	beq.n	8002578 <HAL_ADC_Init+0xc4>
 8002576:	e122      	b.n	80027be <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d000      	beq.n	8002580 <HAL_ADC_Init+0xcc>
 800257e:	e11e      	b.n	80027be <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	4a98      	ldr	r2, [pc, #608]	; (80027e8 <HAL_ADC_Init+0x334>)
 8002586:	4013      	ands	r3, r2
 8002588:	2202      	movs	r2, #2
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff ff35 	bl	8002404 <LL_ADC_IsEnabled>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d000      	beq.n	80025a0 <HAL_ADC_Init+0xec>
 800259e:	e0ad      	b.n	80026fc <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e1b      	ldrb	r3, [r3, #24]
 80025a8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80025aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e5b      	ldrb	r3, [r3, #25]
 80025b0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80025b2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e9b      	ldrb	r3, [r3, #26]
 80025b8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80025ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_ADC_Init+0x116>
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	015b      	lsls	r3, r3, #5
 80025c8:	e000      	b.n	80025cc <HAL_ADC_Init+0x118>
 80025ca:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80025cc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80025d2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da04      	bge.n	80025e6 <HAL_ADC_Init+0x132>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	e001      	b.n	80025ea <HAL_ADC_Init+0x136>
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80025ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	5c5b      	ldrb	r3, [r3, r1]
 80025f2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80025f4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d115      	bne.n	8002632 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7e9b      	ldrb	r3, [r3, #26]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	0252      	lsls	r2, r2, #9
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e00b      	b.n	8002632 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	2220      	movs	r2, #32
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2201      	movs	r2, #1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263e:	23e0      	movs	r3, #224	; 0xe0
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002648:	4313      	orrs	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a65      	ldr	r2, [pc, #404]	; (80027ec <HAL_ADC_Init+0x338>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	430a      	orrs	r2, r1
 8002664:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	0f9b      	lsrs	r3, r3, #30
 800266c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002672:	4313      	orrs	r3, r2
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223c      	movs	r2, #60	; 0x3c
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d111      	bne.n	80026a8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	0f9b      	lsrs	r3, r3, #30
 800268a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002690:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002696:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800269c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	2201      	movs	r2, #1
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	4a50      	ldr	r2, [pc, #320]	; (80027f0 <HAL_ADC_Init+0x33c>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	23c0      	movs	r3, #192	; 0xc0
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d018      	beq.n	80026fc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d012      	beq.n	80026fc <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	429a      	cmp	r2, r3
 80026e0:	d00c      	beq.n	80026fc <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80026e2:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_ADC_Init+0x340>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a44      	ldr	r2, [pc, #272]	; (80027f8 <HAL_ADC_Init+0x344>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	23f0      	movs	r3, #240	; 0xf0
 80026f2:	039b      	lsls	r3, r3, #14
 80026f4:	401a      	ands	r2, r3
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_ADC_Init+0x340>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	001a      	movs	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	f7ff fd8b 	bl	8002222 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	4939      	ldr	r1, [pc, #228]	; (80027fc <HAL_ADC_Init+0x348>)
 8002716:	001a      	movs	r2, r3
 8002718:	f7ff fd83 	bl	8002222 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2110      	movs	r1, #16
 8002730:	4249      	negs	r1, r1
 8002732:	430a      	orrs	r2, r1
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
 8002736:	e018      	b.n	800276a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	039b      	lsls	r3, r3, #14
 8002740:	429a      	cmp	r2, r3
 8002742:	d112      	bne.n	800276a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	3b01      	subs	r3, #1
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	221c      	movs	r2, #28
 8002754:	4013      	ands	r3, r2
 8002756:	2210      	movs	r2, #16
 8002758:	4252      	negs	r2, r2
 800275a:	409a      	lsls	r2, r3
 800275c:	0011      	movs	r1, r2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff fd73 	bl	800225c <LL_ADC_GetSamplingTimeCommonChannels>
 8002776:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800277c:	429a      	cmp	r2, r3
 800277e:	d10b      	bne.n	8002798 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	2203      	movs	r2, #3
 800278c:	4393      	bics	r3, r2
 800278e:	2201      	movs	r2, #1
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002796:	e01c      	b.n	80027d2 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	2212      	movs	r2, #18
 800279e:	4393      	bics	r3, r2
 80027a0:	2210      	movs	r2, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2201      	movs	r2, #1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80027b4:	231f      	movs	r3, #31
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80027bc:	e009      	b.n	80027d2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	2210      	movs	r2, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027ca:	231f      	movs	r3, #31
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80027d2:	231f      	movs	r3, #31
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	781b      	ldrb	r3, [r3, #0]
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b008      	add	sp, #32
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000074 	.word	0x20000074
 80027e4:	00030d40 	.word	0x00030d40
 80027e8:	fffffefd 	.word	0xfffffefd
 80027ec:	ffde0201 	.word	0xffde0201
 80027f0:	1ffffc02 	.word	0x1ffffc02
 80027f4:	40012708 	.word	0x40012708
 80027f8:	ffc3ffff 	.word	0xffc3ffff
 80027fc:	7fffff04 	.word	0x7fffff04

08002800 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff fe3f 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d15f      	bne.n	80028d6 <HAL_ADC_Start_IT+0xd6>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2254      	movs	r2, #84	; 0x54
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_ADC_Start_IT+0x24>
 8002820:	2302      	movs	r3, #2
 8002822:	e05f      	b.n	80028e4 <HAL_ADC_Start_IT+0xe4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2254      	movs	r2, #84	; 0x54
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800282c:	250f      	movs	r5, #15
 800282e:	197c      	adds	r4, r7, r5
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 fb52 	bl	8002edc <ADC_Enable>
 8002838:	0003      	movs	r3, r0
 800283a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800283c:	197b      	adds	r3, r7, r5
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d143      	bne.n	80028cc <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <HAL_ADC_Start_IT+0xec>)
 800284a:	4013      	ands	r3, r2
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	221c      	movs	r2, #28
 8002862:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2254      	movs	r2, #84	; 0x54
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	211c      	movs	r1, #28
 8002878:	438a      	bics	r2, r1
 800287a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d108      	bne.n	8002896 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2108      	movs	r1, #8
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
          break;
 8002894:	e008      	b.n	80028a8 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2104      	movs	r1, #4
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
          break;
 80028a6:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2110      	movs	r1, #16
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff fdbf 	bl	8002448 <LL_ADC_REG_StartConversion>
 80028ca:	e008      	b.n	80028de <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2254      	movs	r2, #84	; 0x54
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]
 80028d4:	e003      	b.n	80028de <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028d6:	230f      	movs	r3, #15
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80028de:	230f      	movs	r3, #15
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bdb0      	pop	{r4, r5, r7, pc}
 80028ec:	fffff0fe 	.word	0xfffff0fe

080028f0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2254      	movs	r2, #84	; 0x54
 80028fc:	5c9b      	ldrb	r3, [r3, r2]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADC_Stop_IT+0x16>
 8002902:	2302      	movs	r3, #2
 8002904:	e033      	b.n	800296e <HAL_ADC_Stop_IT+0x7e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2254      	movs	r2, #84	; 0x54
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800290e:	250f      	movs	r5, #15
 8002910:	197c      	adds	r4, r7, r5
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 faa5 	bl	8002e64 <ADC_ConversionStop>
 800291a:	0003      	movs	r3, r0
 800291c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800291e:	0028      	movs	r0, r5
 8002920:	183b      	adds	r3, r7, r0
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11b      	bne.n	8002960 <HAL_ADC_Stop_IT+0x70>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	211c      	movs	r1, #28
 8002934:	438a      	bics	r2, r1
 8002936:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002938:	0005      	movs	r5, r0
 800293a:	183c      	adds	r4, r7, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 fb4a 	bl	8002fd8 <ADC_Disable>
 8002944:	0003      	movs	r3, r0
 8002946:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002948:	197b      	adds	r3, r7, r5
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <HAL_ADC_Stop_IT+0x70>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_ADC_Stop_IT+0x88>)
 8002956:	4013      	ands	r3, r2
 8002958:	2201      	movs	r2, #1
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2254      	movs	r2, #84	; 0x54
 8002964:	2100      	movs	r1, #0
 8002966:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002968:	230f      	movs	r3, #15
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	781b      	ldrb	r3, [r3, #0]
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b004      	add	sp, #16
 8002974:	bdb0      	pop	{r4, r5, r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	fffffefe 	.word	0xfffffefe

0800297c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800297c:	b5b0      	push	{r4, r5, r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff fd7f 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d16c      	bne.n	8002a70 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2254      	movs	r2, #84	; 0x54
 800299a:	5c9b      	ldrb	r3, [r3, r2]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_Start_DMA+0x28>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e06c      	b.n	8002a7e <HAL_ADC_Start_DMA+0x102>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2254      	movs	r2, #84	; 0x54
 80029a8:	2101      	movs	r1, #1
 80029aa:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d113      	bne.n	80029e0 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0018      	movs	r0, r3
 80029be:	f7ff fd21 	bl	8002404 <LL_ADC_IsEnabled>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff fd08 	bl	80023e0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	430a      	orrs	r2, r1
 80029de:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029e0:	2517      	movs	r5, #23
 80029e2:	197c      	adds	r4, r7, r5
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fa78 	bl	8002edc <ADC_Enable>
 80029ec:	0003      	movs	r3, r0
 80029ee:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029f0:	002c      	movs	r4, r5
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d13e      	bne.n	8002a78 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_ADC_Start_DMA+0x10c>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	0052      	lsls	r2, r2, #1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_ADC_Start_DMA+0x110>)
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_ADC_Start_DMA+0x114>)
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_ADC_Start_DMA+0x118>)
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	221c      	movs	r2, #28
 8002a30:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2254      	movs	r2, #84	; 0x54
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2110      	movs	r1, #16
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3340      	adds	r3, #64	; 0x40
 8002a54:	0019      	movs	r1, r3
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	193c      	adds	r4, r7, r4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f000 ff02 	bl	8003864 <HAL_DMA_Start_IT>
 8002a60:	0003      	movs	r3, r0
 8002a62:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff fced 	bl	8002448 <LL_ADC_REG_StartConversion>
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a70:	2317      	movs	r3, #23
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a78:	2317      	movs	r3, #23
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	781b      	ldrb	r3, [r3, #0]
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b006      	add	sp, #24
 8002a84:	bdb0      	pop	{r4, r5, r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	fffff0fe 	.word	0xfffff0fe
 8002a8c:	08003089 	.word	0x08003089
 8002a90:	08003151 	.word	0x08003151
 8002a94:	0800316f 	.word	0x0800316f

08002a98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac2:	2317      	movs	r3, #23
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2254      	movs	r2, #84	; 0x54
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x24>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e1be      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x3a2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2254      	movs	r2, #84	; 0x54
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff fcd1 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d000      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x3c>
 8002af2:	e1a1      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d100      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x46>
 8002afc:	e152      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b0e:	4ac2      	ldr	r2, [pc, #776]	; (8002e18 <HAL_ADC_ConfigChannel+0x360>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0010      	movs	r0, r2
 8002b20:	f7ff fbe4 	bl	80022ec <LL_ADC_REG_SetSequencerChAdd>
 8002b24:	e0ed      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	211f      	movs	r1, #31
 8002b30:	400b      	ands	r3, r1
 8002b32:	210f      	movs	r1, #15
 8002b34:	4099      	lsls	r1, r3
 8002b36:	000b      	movs	r3, r1
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	0a5b      	lsrs	r3, r3, #9
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x9c>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	221f      	movs	r2, #31
 8002b50:	4013      	ands	r3, r2
 8002b52:	e0bc      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d000      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0xa8>
 8002b5e:	e0b5      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x214>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d000      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0xb4>
 8002b6a:	e0ad      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x210>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2204      	movs	r2, #4
 8002b72:	4013      	ands	r3, r2
 8002b74:	d000      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0xc0>
 8002b76:	e0a5      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x20c>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0xcc>
 8002b82:	e09d      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x208>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d000      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0xd8>
 8002b8e:	e095      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x204>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2220      	movs	r2, #32
 8002b96:	4013      	ands	r3, r2
 8002b98:	d000      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0xe4>
 8002b9a:	e08d      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x200>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d000      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0xf0>
 8002ba6:	e085      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x1fc>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d000      	beq.n	8002bb4 <HAL_ADC_ConfigChannel+0xfc>
 8002bb2:	e07d      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x1f8>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d000      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x10a>
 8002bc0:	e074      	b.n	8002cac <HAL_ADC_ConfigChannel+0x1f4>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d000      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x118>
 8002bce:	e06b      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x1f0>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d000      	beq.n	8002bde <HAL_ADC_ConfigChannel+0x126>
 8002bdc:	e062      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x1ec>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d000      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x134>
 8002bea:	e059      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x1e8>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	015b      	lsls	r3, r3, #5
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d151      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1e4>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	019b      	lsls	r3, r3, #6
 8002c00:	4013      	ands	r3, r2
 8002c02:	d149      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x1e0>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	01db      	lsls	r3, r3, #7
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d141      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1dc>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d139      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1d8>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	025b      	lsls	r3, r3, #9
 8002c24:	4013      	ands	r3, r2
 8002c26:	d131      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x1d4>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	029b      	lsls	r3, r3, #10
 8002c30:	4013      	ands	r3, r2
 8002c32:	d129      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x1d0>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	02db      	lsls	r3, r3, #11
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d121      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1cc>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d119      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1c8>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	035b      	lsls	r3, r3, #13
 8002c54:	4013      	ands	r3, r2
 8002c56:	d111      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1c4>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	039b      	lsls	r3, r3, #14
 8002c60:	4013      	ands	r3, r2
 8002c62:	d109      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x1c0>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	03db      	lsls	r3, r3, #15
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d001      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x1bc>
 8002c70:	2316      	movs	r3, #22
 8002c72:	e02c      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c74:	2300      	movs	r3, #0
 8002c76:	e02a      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c78:	2315      	movs	r3, #21
 8002c7a:	e028      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c7c:	2314      	movs	r3, #20
 8002c7e:	e026      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c80:	2313      	movs	r3, #19
 8002c82:	e024      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c84:	2312      	movs	r3, #18
 8002c86:	e022      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c88:	2311      	movs	r3, #17
 8002c8a:	e020      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c8c:	2310      	movs	r3, #16
 8002c8e:	e01e      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c90:	230f      	movs	r3, #15
 8002c92:	e01c      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c94:	230e      	movs	r3, #14
 8002c96:	e01a      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c98:	230d      	movs	r3, #13
 8002c9a:	e018      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	e016      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002ca0:	230b      	movs	r3, #11
 8002ca2:	e014      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002ca4:	230a      	movs	r3, #10
 8002ca6:	e012      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002ca8:	2309      	movs	r3, #9
 8002caa:	e010      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cac:	2308      	movs	r3, #8
 8002cae:	e00e      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	e00c      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	e00a      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cb8:	2305      	movs	r3, #5
 8002cba:	e008      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	e006      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e004      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_ADC_ConfigChannel+0x216>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	6852      	ldr	r2, [r2, #4]
 8002cd2:	201f      	movs	r0, #31
 8002cd4:	4002      	ands	r2, r0
 8002cd6:	4093      	lsls	r3, r2
 8002cd8:	000a      	movs	r2, r1
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d808      	bhi.n	8002d02 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	f7ff fad5 	bl	80022ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	001a      	movs	r2, r3
 8002d10:	f7ff fb10 	bl	8002334 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db00      	blt.n	8002d1e <HAL_ADC_ConfigChannel+0x266>
 8002d1c:	e096      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_ADC_ConfigChannel+0x364>)
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fa71 	bl	8002208 <LL_ADC_GetCommonPathInternalCh>
 8002d26:	0003      	movs	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3c      	ldr	r2, [pc, #240]	; (8002e20 <HAL_ADC_ConfigChannel+0x368>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d123      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d3c:	d11e      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	0412      	lsls	r2, r2, #16
 8002d44:	4313      	orrs	r3, r2
 8002d46:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <HAL_ADC_ConfigChannel+0x364>)
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f7ff fa48 	bl	80021e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002d50:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_ADC_ConfigChannel+0x36c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4934      	ldr	r1, [pc, #208]	; (8002e28 <HAL_ADC_ConfigChannel+0x370>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fd f9e8 	bl	800012c <__udivsi3>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	001a      	movs	r2, r3
 8002d60:	0013      	movs	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d6c:	e002      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d7a:	e067      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <HAL_ADC_ConfigChannel+0x374>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d162      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	03db      	lsls	r3, r3, #15
 8002d8c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d8e:	d15d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	03d2      	lsls	r2, r2, #15
 8002d96:	4313      	orrs	r3, r2
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_ADC_ConfigChannel+0x364>)
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f7ff fa1f 	bl	80021e0 <LL_ADC_SetCommonPathInternalCh>
 8002da2:	e053      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	061b      	lsls	r3, r3, #24
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d004      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002db4:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_ADC_ConfigChannel+0x360>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d107      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	f7ff faa2 	bl	800230e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da3c      	bge.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_ADC_ConfigChannel+0x364>)
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7ff fa17 	bl	8002208 <LL_ADC_GetCommonPathInternalCh>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <HAL_ADC_ConfigChannel+0x368>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d108      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_ADC_ConfigChannel+0x378>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <HAL_ADC_ConfigChannel+0x364>)
 8002df0:	0019      	movs	r1, r3
 8002df2:	0010      	movs	r0, r2
 8002df4:	f7ff f9f4 	bl	80021e0 <LL_ADC_SetCommonPathInternalCh>
 8002df8:	e028      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <HAL_ADC_ConfigChannel+0x374>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d123      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <HAL_ADC_ConfigChannel+0x37c>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_ADC_ConfigChannel+0x364>)
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f7ff f9e6 	bl	80021e0 <LL_ADC_SetCommonPathInternalCh>
 8002e14:	e01a      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x394>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	80000004 	.word	0x80000004
 8002e1c:	40012708 	.word	0x40012708
 8002e20:	a4000200 	.word	0xa4000200
 8002e24:	20000074 	.word	0x20000074
 8002e28:	00030d40 	.word	0x00030d40
 8002e2c:	a8000400 	.word	0xa8000400
 8002e30:	ff7fffff 	.word	0xff7fffff
 8002e34:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e44:	2317      	movs	r3, #23
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2254      	movs	r2, #84	; 0x54
 8002e50:	2100      	movs	r1, #0
 8002e52:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002e54:	2317      	movs	r3, #23
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b006      	add	sp, #24
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)

08002e64 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff fb0d 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d02b      	beq.n	8002ed2 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff fad1 	bl	8002426 <LL_ADC_IsDisableOngoing>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d104      	bne.n	8002e92 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff faed 	bl	800246c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e92:	f7ff f977 	bl	8002184 <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e9a:	e014      	b.n	8002ec6 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e9c:	f7ff f972 	bl	8002184 <HAL_GetTick>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d90d      	bls.n	8002ec6 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	2210      	movs	r2, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e006      	b.n	8002ed4 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d1e4      	bne.n	8002e9c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd80      	pop	{r7, pc}

08002edc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff fa89 	bl	8002404 <LL_ADC_IsEnabled>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d162      	bne.n	8002fbc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <ADC_Enable+0xec>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	2210      	movs	r2, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2201      	movs	r2, #1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e04f      	b.n	8002fbe <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff fa4a 	bl	80023bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <ADC_Enable+0xf0>)
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff f96c 	bl	8002208 <LL_ADC_GetCommonPathInternalCh>
 8002f30:	0002      	movs	r2, r0
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	4013      	ands	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <ADC_Enable+0xf4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4925      	ldr	r1, [pc, #148]	; (8002fd4 <ADC_Enable+0xf8>)
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7fd f8f3 	bl	800012c <__udivsi3>
 8002f46:	0003      	movs	r3, r0
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f4c:	e002      	b.n	8002f54 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f9      	bne.n	8002f4e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7e5b      	ldrb	r3, [r3, #25]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d02c      	beq.n	8002fbc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f62:	f7ff f90f 	bl	8002184 <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f6a:	e020      	b.n	8002fae <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff fa47 	bl	8002404 <LL_ADC_IsEnabled>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d104      	bne.n	8002f84 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff fa1c 	bl	80023bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f84:	f7ff f8fe 	bl	8002184 <HAL_GetTick>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d90d      	bls.n	8002fae <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	2210      	movs	r2, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1d7      	bne.n	8002f6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	80000017 	.word	0x80000017
 8002fcc:	40012708 	.word	0x40012708
 8002fd0:	20000074 	.word	0x20000074
 8002fd4:	00030d40 	.word	0x00030d40

08002fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff fa1e 	bl	8002426 <LL_ADC_IsDisableOngoing>
 8002fea:	0003      	movs	r3, r0
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fa06 	bl	8002404 <LL_ADC_IsEnabled>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d040      	beq.n	800307e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d13d      	bne.n	800307e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2205      	movs	r2, #5
 800300a:	4013      	ands	r3, r2
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10d      	bne.n	800302c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff f9e3 	bl	80023e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2203      	movs	r2, #3
 8003020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003022:	f7ff f8af 	bl	8002184 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800302a:	e022      	b.n	8003072 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	2210      	movs	r2, #16
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	2201      	movs	r2, #1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e01b      	b.n	8003080 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003048:	f7ff f89c 	bl	8002184 <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d90d      	bls.n	8003072 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	2210      	movs	r2, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2201      	movs	r2, #1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e006      	b.n	8003080 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	d1e4      	bne.n	8003048 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b004      	add	sp, #16
 8003086:	bd80      	pop	{r7, pc}

08003088 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	2250      	movs	r2, #80	; 0x50
 800309c:	4013      	ands	r3, r2
 800309e:	d141      	bne.n	8003124 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff f8e9 	bl	800228a <LL_ADC_REG_IsTriggerSourceSWStart>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d02e      	beq.n	800311a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	7e9b      	ldrb	r3, [r3, #26]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12a      	bne.n	800311a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2208      	movs	r2, #8
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d123      	bne.n	800311a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f7ff f9da 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d110      	bne.n	8003102 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	210c      	movs	r1, #12
 80030ec:	438a      	bics	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	4a15      	ldr	r2, [pc, #84]	; (800314c <ADC_DMAConvCplt+0xc4>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	2201      	movs	r2, #1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003100:	e00b      	b.n	800311a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	2220      	movs	r2, #32
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	2201      	movs	r2, #1
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0018      	movs	r0, r3
 800311e:	f7fe fe8f 	bl	8001e40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003122:	e00f      	b.n	8003144 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	2210      	movs	r2, #16
 800312a:	4013      	ands	r3, r2
 800312c:	d004      	beq.n	8003138 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0018      	movs	r0, r3
 8003132:	f7ff fcb9 	bl	8002aa8 <HAL_ADC_ErrorCallback>
}
 8003136:	e005      	b.n	8003144 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	0010      	movs	r0, r2
 8003142:	4798      	blx	r3
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fffffefe 	.word	0xfffffefe

08003150 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fc99 	bl	8002a98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bd80      	pop	{r7, pc}

0800316e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	2240      	movs	r2, #64	; 0x40
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	2204      	movs	r2, #4
 800318e:	431a      	orrs	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff fc86 	bl	8002aa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b004      	add	sp, #16
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <LL_ADC_GetCommonClock>:
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	23f0      	movs	r3, #240	; 0xf0
 80031b2:	039b      	lsls	r3, r3, #14
 80031b4:	4013      	ands	r3, r2
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}

080031be <LL_ADC_GetClock>:
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	0f9b      	lsrs	r3, r3, #30
 80031cc:	079b      	lsls	r3, r3, #30
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <LL_ADC_SetCalibrationFactor>:
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	22b4      	movs	r2, #180	; 0xb4
 80031e4:	589b      	ldr	r3, [r3, r2]
 80031e6:	227f      	movs	r2, #127	; 0x7f
 80031e8:	4393      	bics	r3, r2
 80031ea:	001a      	movs	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	21b4      	movs	r1, #180	; 0xb4
 80031f4:	505a      	str	r2, [r3, r1]
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b002      	add	sp, #8
 80031fc:	bd80      	pop	{r7, pc}

080031fe <LL_ADC_GetCalibrationFactor>:
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	22b4      	movs	r2, #180	; 0xb4
 800320a:	589b      	ldr	r3, [r3, r2]
 800320c:	227f      	movs	r2, #127	; 0x7f
 800320e:	4013      	ands	r3, r2
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <LL_ADC_Enable>:
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <LL_ADC_Enable+0x20>)
 8003226:	4013      	ands	r3, r2
 8003228:	2201      	movs	r2, #1
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}
 8003238:	7fffffe8 	.word	0x7fffffe8

0800323c <LL_ADC_Disable>:
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <LL_ADC_Disable+0x20>)
 800324a:	4013      	ands	r3, r2
 800324c:	2202      	movs	r2, #2
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	b002      	add	sp, #8
 800325a:	bd80      	pop	{r7, pc}
 800325c:	7fffffe8 	.word	0x7fffffe8

08003260 <LL_ADC_IsEnabled>:
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2201      	movs	r2, #1
 800326e:	4013      	ands	r3, r2
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <LL_ADC_IsEnabled+0x18>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_ADC_IsEnabled+0x1a>
 8003278:	2300      	movs	r3, #0
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b002      	add	sp, #8
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <LL_ADC_StartCalibration>:
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <LL_ADC_StartCalibration+0x24>)
 8003292:	4013      	ands	r3, r2
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	0612      	lsls	r2, r2, #24
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	609a      	str	r2, [r3, #8]
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	7fffffe8 	.word	0x7fffffe8

080032ac <LL_ADC_IsCalibrationOnGoing>:
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	0fdb      	lsrs	r3, r3, #31
 80032ba:	07da      	lsls	r2, r3, #31
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d101      	bne.n	80032c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <LL_ADC_IsCalibrationOnGoing+0x1e>
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b002      	add	sp, #8
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d101      	bne.n	80032ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b08b      	sub	sp, #44	; 0x2c
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2254      	movs	r2, #84	; 0x54
 8003308:	5c9b      	ldrb	r3, [r3, r2]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_ADCEx_Calibration_Start+0x1e>
 800330e:	2302      	movs	r3, #2
 8003310:	e0de      	b.n	80034d0 <HAL_ADCEx_Calibration_Start+0x1dc>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2254      	movs	r2, #84	; 0x54
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800331a:	231f      	movs	r3, #31
 800331c:	18fc      	adds	r4, r7, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fe59 	bl	8002fd8 <ADC_Disable>
 8003326:	0003      	movs	r3, r0
 8003328:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff ff96 	bl	8003260 <LL_ADC_IsEnabled>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d000      	beq.n	800333a <HAL_ADCEx_Calibration_Start+0x46>
 8003338:	e0bd      	b.n	80034b6 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a66      	ldr	r2, [pc, #408]	; (80034d8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8003340:	4013      	ands	r3, r2
 8003342:	2202      	movs	r2, #2
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a62      	ldr	r2, [pc, #392]	; (80034dc <HAL_ADCEx_Calibration_Start+0x1e8>)
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	495f      	ldr	r1, [pc, #380]	; (80034e0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8003362:	400a      	ands	r2, r1
 8003364:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	e02e      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff ff87 	bl	8003284 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003376:	e015      	b.n	80033a4 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	23ae      	movs	r3, #174	; 0xae
 8003382:	029b      	lsls	r3, r3, #10
 8003384:	429a      	cmp	r2, r3
 8003386:	d30d      	bcc.n	80033a4 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	2212      	movs	r2, #18
 800338e:	4393      	bics	r3, r2
 8003390:	2210      	movs	r2, #16
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2254      	movs	r2, #84	; 0x54
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e095      	b.n	80034d0 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff ff7f 	bl	80032ac <LL_ADC_IsCalibrationOnGoing>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d1e2      	bne.n	8003378 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff ff21 	bl	80031fe <LL_ADC_GetCalibrationFactor>
 80033bc:	0002      	movs	r2, r0
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	189b      	adds	r3, r3, r2
 80033c2:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	3301      	adds	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d9cd      	bls.n	800336c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80033d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d2:	6a38      	ldr	r0, [r7, #32]
 80033d4:	f7fc feaa 	bl	800012c <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7ff ff19 	bl	8003218 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7ff fee7 	bl	80031be <LL_ADC_GetClock>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d11b      	bne.n	800342c <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f4:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fed4 	bl	80031a4 <LL_ADC_GetCommonClock>
 80033fc:	0003      	movs	r3, r0
 80033fe:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	23e0      	movs	r3, #224	; 0xe0
 8003404:	035b      	lsls	r3, r3, #13
 8003406:	429a      	cmp	r2, r3
 8003408:	d310      	bcc.n	800342c <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3b03      	subs	r3, #3
 8003410:	2201      	movs	r2, #1
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 800341e:	e002      	b.n	8003426 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3b01      	subs	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f9      	bne.n	8003420 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	0011      	movs	r1, r2
 8003434:	0018      	movs	r0, r3
 8003436:	f7ff fece 	bl	80031d6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0018      	movs	r0, r3
 8003440:	f7ff fefc 	bl	800323c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003444:	f7fe fe9e 	bl	8002184 <HAL_GetTick>
 8003448:	0003      	movs	r3, r0
 800344a:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800344c:	e01b      	b.n	8003486 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800344e:	f7fe fe99 	bl	8002184 <HAL_GetTick>
 8003452:	0002      	movs	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d914      	bls.n	8003486 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fefd 	bl	8003260 <LL_ADC_IsEnabled>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d00d      	beq.n	8003486 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	2210      	movs	r2, #16
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	2201      	movs	r2, #1
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e024      	b.n	80034d0 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0018      	movs	r0, r3
 800348c:	f7ff fee8 	bl	8003260 <LL_ADC_IsEnabled>
 8003490:	1e03      	subs	r3, r0, #0
 8003492:	d1dc      	bne.n	800344e <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68d9      	ldr	r1, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	2203      	movs	r2, #3
 80034aa:	4393      	bics	r3, r2
 80034ac:	2201      	movs	r2, #1
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58
 80034b4:	e005      	b.n	80034c2 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	2210      	movs	r2, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2254      	movs	r2, #84	; 0x54
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80034ca:	231f      	movs	r3, #31
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	781b      	ldrb	r3, [r3, #0]
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b00b      	add	sp, #44	; 0x2c
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	fffffefd 	.word	0xfffffefd
 80034dc:	00008003 	.word	0x00008003
 80034e0:	ffff7ffc 	.word	0xffff7ffc
 80034e4:	40012708 	.word	0x40012708

080034e8 <HAL_ADCEx_Calibration_SetValue>:
  * @param hadc ADC handle
  * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t CalibrationFactor)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f2:	230f      	movs	r3, #15
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2254      	movs	r2, #84	; 0x54
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_ADCEx_Calibration_SetValue+0x20>
 8003504:	2302      	movs	r3, #2
 8003506:	e040      	b.n	800358a <HAL_ADCEx_Calibration_SetValue+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2254      	movs	r2, #84	; 0x54
 800350c:	2101      	movs	r1, #1
 800350e:	5499      	strb	r1, [r3, r2]

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff fedc 	bl	80032d2 <LL_ADC_REG_IsConversionOngoing>
 800351a:	0003      	movs	r3, r0
 800351c:	60bb      	str	r3, [r7, #8]

  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0018      	movs	r0, r3
 8003524:	f7ff fe9c 	bl	8003260 <LL_ADC_IsEnabled>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d017      	beq.n	800355c <HAL_ADCEx_Calibration_SetValue+0x74>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d114      	bne.n	800355c <HAL_ADCEx_Calibration_SetValue+0x74>
     )
  {
    hadc->Instance->CALFACT &= ~ADC_CALFACT_CALFACT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	22b4      	movs	r2, #180	; 0xb4
 8003538:	589a      	ldr	r2, [r3, r2]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	217f      	movs	r1, #127	; 0x7f
 8003540:	438a      	bics	r2, r1
 8003542:	21b4      	movs	r1, #180	; 0xb4
 8003544:	505a      	str	r2, [r3, r1]
    hadc->Instance->CALFACT |= CalibrationFactor;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	22b4      	movs	r2, #180	; 0xb4
 800354c:	5899      	ldr	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	21b4      	movs	r1, #180	; 0xb4
 8003558:	505a      	str	r2, [r3, r1]
 800355a:	e00f      	b.n	800357c <HAL_ADCEx_Calibration_SetValue+0x94>
  }
  else
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	2220      	movs	r2, #32
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58
    /* Update ADC error code */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2201      	movs	r2, #1
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
 8003574:	230f      	movs	r3, #15
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2254      	movs	r2, #84	; 0x54
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003584:	230f      	movs	r3, #15
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	781b      	ldrb	r3, [r3, #0]
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b004      	add	sp, #16
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	0002      	movs	r2, r0
 800359c:	1dfb      	adds	r3, r7, #7
 800359e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b7f      	cmp	r3, #127	; 0x7f
 80035a6:	d809      	bhi.n	80035bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a8:	1dfb      	adds	r3, r7, #7
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	001a      	movs	r2, r3
 80035ae:	231f      	movs	r3, #31
 80035b0:	401a      	ands	r2, r3
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_EnableIRQ+0x30>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	4091      	lsls	r1, r2
 80035b8:	000a      	movs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	0002      	movs	r2, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b7f      	cmp	r3, #127	; 0x7f
 80035dc:	d828      	bhi.n	8003630 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035de:	4a2f      	ldr	r2, [pc, #188]	; (800369c <__NVIC_SetPriority+0xd4>)
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	33c0      	adds	r3, #192	; 0xc0
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	589b      	ldr	r3, [r3, r2]
 80035ee:	1dfa      	adds	r2, r7, #7
 80035f0:	7812      	ldrb	r2, [r2, #0]
 80035f2:	0011      	movs	r1, r2
 80035f4:	2203      	movs	r2, #3
 80035f6:	400a      	ands	r2, r1
 80035f8:	00d2      	lsls	r2, r2, #3
 80035fa:	21ff      	movs	r1, #255	; 0xff
 80035fc:	4091      	lsls	r1, r2
 80035fe:	000a      	movs	r2, r1
 8003600:	43d2      	mvns	r2, r2
 8003602:	401a      	ands	r2, r3
 8003604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	019b      	lsls	r3, r3, #6
 800360a:	22ff      	movs	r2, #255	; 0xff
 800360c:	401a      	ands	r2, r3
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	0018      	movs	r0, r3
 8003614:	2303      	movs	r3, #3
 8003616:	4003      	ands	r3, r0
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800361c:	481f      	ldr	r0, [pc, #124]	; (800369c <__NVIC_SetPriority+0xd4>)
 800361e:	1dfb      	adds	r3, r7, #7
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b25b      	sxtb	r3, r3
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	430a      	orrs	r2, r1
 8003628:	33c0      	adds	r3, #192	; 0xc0
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800362e:	e031      	b.n	8003694 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <__NVIC_SetPriority+0xd8>)
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	0019      	movs	r1, r3
 8003638:	230f      	movs	r3, #15
 800363a:	400b      	ands	r3, r1
 800363c:	3b08      	subs	r3, #8
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	3306      	adds	r3, #6
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	18d3      	adds	r3, r2, r3
 8003646:	3304      	adds	r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	1dfa      	adds	r2, r7, #7
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	0011      	movs	r1, r2
 8003650:	2203      	movs	r2, #3
 8003652:	400a      	ands	r2, r1
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	21ff      	movs	r1, #255	; 0xff
 8003658:	4091      	lsls	r1, r2
 800365a:	000a      	movs	r2, r1
 800365c:	43d2      	mvns	r2, r2
 800365e:	401a      	ands	r2, r3
 8003660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	22ff      	movs	r2, #255	; 0xff
 8003668:	401a      	ands	r2, r3
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	0018      	movs	r0, r3
 8003670:	2303      	movs	r3, #3
 8003672:	4003      	ands	r3, r0
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003678:	4809      	ldr	r0, [pc, #36]	; (80036a0 <__NVIC_SetPriority+0xd8>)
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	001c      	movs	r4, r3
 8003680:	230f      	movs	r3, #15
 8003682:	4023      	ands	r3, r4
 8003684:	3b08      	subs	r3, #8
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	430a      	orrs	r2, r1
 800368a:	3306      	adds	r3, #6
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	18c3      	adds	r3, r0, r3
 8003690:	3304      	adds	r3, #4
 8003692:	601a      	str	r2, [r3, #0]
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b003      	add	sp, #12
 800369a:	bd90      	pop	{r4, r7, pc}
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	045b      	lsls	r3, r3, #17
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d301      	bcc.n	80036bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b8:	2301      	movs	r3, #1
 80036ba:	e010      	b.n	80036de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <SysTick_Config+0x44>)
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	3a01      	subs	r2, #1
 80036c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c4:	2301      	movs	r3, #1
 80036c6:	425b      	negs	r3, r3
 80036c8:	2103      	movs	r1, #3
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff ff7c 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <SysTick_Config+0x44>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <SysTick_Config+0x44>)
 80036d8:	2207      	movs	r2, #7
 80036da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	e000e010 	.word	0xe000e010

080036ec <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	210f      	movs	r1, #15
 80036f8:	187b      	adds	r3, r7, r1
 80036fa:	1c02      	adds	r2, r0, #0
 80036fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	187b      	adds	r3, r7, r1
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b25b      	sxtb	r3, r3
 8003706:	0011      	movs	r1, r2
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	0002      	movs	r2, r0
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003722:	1dfb      	adds	r3, r7, #7
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b25b      	sxtb	r3, r3
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff ff33 	bl	8003594 <__NVIC_EnableIRQ>
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0018      	movs	r0, r3
 8003742:	f7ff ffaf 	bl	80036a4 <SysTick_Config>
 8003746:	0003      	movs	r3, r0
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e077      	b.n	8003852 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a3d      	ldr	r2, [pc, #244]	; (800385c <HAL_DMA_Init+0x10c>)
 8003768:	4694      	mov	ip, r2
 800376a:	4463      	add	r3, ip
 800376c:	2114      	movs	r1, #20
 800376e:	0018      	movs	r0, r3
 8003770:	f7fc fcdc 	bl	800012c <__udivsi3>
 8003774:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8003776:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2225      	movs	r2, #37	; 0x25
 8003780:	2102      	movs	r1, #2
 8003782:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_DMA_Init+0x110>)
 8003790:	400a      	ands	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f9c3 	bl	8003b58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	01db      	lsls	r3, r3, #7
 80037da:	429a      	cmp	r2, r3
 80037dc:	d102      	bne.n	80037e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	21ff      	movs	r1, #255	; 0xff
 80037ee:	400a      	ands	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d011      	beq.n	8003828 <HAL_DMA_Init+0xd8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d80d      	bhi.n	8003828 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f9ce 	bl	8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e008      	b.n	800383a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2225      	movs	r2, #37	; 0x25
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b002      	add	sp, #8
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	bffdfff8 	.word	0xbffdfff8
 8003860:	ffff800f 	.word	0xffff800f

08003864 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2317      	movs	r3, #23
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2224      	movs	r2, #36	; 0x24
 800387e:	5c9b      	ldrb	r3, [r3, r2]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Start_IT+0x24>
 8003884:	2302      	movs	r3, #2
 8003886:	e070      	b.n	800396a <HAL_DMA_Start_IT+0x106>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	2101      	movs	r1, #1
 800388e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2225      	movs	r2, #37	; 0x25
 8003894:	5c9b      	ldrb	r3, [r3, r2]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d157      	bne.n	800394c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2225      	movs	r2, #37	; 0x25
 80038a0:	2102      	movs	r1, #2
 80038a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2101      	movs	r1, #1
 80038b6:	438a      	bics	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f909 	bl	8003ad8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	210e      	movs	r1, #14
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	e00f      	b.n	8003900 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2104      	movs	r1, #4
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	210a      	movs	r1, #10
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	025b      	lsls	r3, r3, #9
 800390a:	4013      	ands	r3, r2
 800390c:	d008      	beq.n	8003920 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	0049      	lsls	r1, r1, #1
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0049      	lsls	r1, r1, #1
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e007      	b.n	800395c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003954:	2317      	movs	r3, #23
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

  return status;
 8003964:	2317      	movs	r3, #23
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b006      	add	sp, #24
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800397c:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	221c      	movs	r2, #28
 8003990:	4013      	ands	r3, r2
 8003992:	2204      	movs	r2, #4
 8003994:	409a      	lsls	r2, r3
 8003996:	0013      	movs	r3, r2
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4013      	ands	r3, r2
 800399c:	d027      	beq.n	80039ee <HAL_DMA_IRQHandler+0x7a>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d023      	beq.n	80039ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2220      	movs	r2, #32
 80039ae:	4013      	ands	r3, r2
 80039b0:	d107      	bne.n	80039c2 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2104      	movs	r1, #4
 80039be:	438a      	bics	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80039c2:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	221c      	movs	r2, #28
 80039cc:	4013      	ands	r3, r2
 80039ce:	2204      	movs	r2, #4
 80039d0:	409a      	lsls	r2, r3
 80039d2:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d100      	bne.n	80039e2 <HAL_DMA_IRQHandler+0x6e>
 80039e0:	e073      	b.n	8003aca <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	0010      	movs	r0, r2
 80039ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039ec:	e06d      	b.n	8003aca <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	221c      	movs	r2, #28
 80039f4:	4013      	ands	r3, r2
 80039f6:	2202      	movs	r2, #2
 80039f8:	409a      	lsls	r2, r3
 80039fa:	0013      	movs	r3, r2
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	d02e      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xec>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2202      	movs	r2, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	d02a      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2220      	movs	r2, #32
 8003a12:	4013      	ands	r3, r2
 8003a14:	d10b      	bne.n	8003a2e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	210a      	movs	r1, #10
 8003a22:	438a      	bics	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2225      	movs	r2, #37	; 0x25
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	221c      	movs	r2, #28
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d03a      	beq.n	8003aca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a5e:	e034      	b.n	8003aca <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	221c      	movs	r2, #28
 8003a66:	4013      	ands	r3, r2
 8003a68:	2208      	movs	r2, #8
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	0013      	movs	r3, r2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	d02b      	beq.n	8003acc <HAL_DMA_IRQHandler+0x158>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2208      	movs	r2, #8
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d027      	beq.n	8003acc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	210e      	movs	r1, #14
 8003a88:	438a      	bics	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	221c      	movs	r2, #28
 8003a96:	4013      	ands	r3, r2
 8003a98:	2201      	movs	r2, #1
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_DMA_IRQHandler+0x160>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2225      	movs	r2, #37	; 0x25
 8003aac:	2101      	movs	r1, #1
 8003aae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46c0      	nop			; (mov r8, r8)
}
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b004      	add	sp, #16
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40020000 	.word	0x40020000

08003ad8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <DMA_SetConfig+0x7c>)
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	221c      	movs	r2, #28
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <DMA_SetConfig+0x7c>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d108      	bne.n	8003b3a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b38:	e007      	b.n	8003b4a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	60da      	str	r2, [r3, #12]
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	40020000 	.word	0x40020000

08003b58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	001a      	movs	r2, r3
 8003b66:	23ff      	movs	r3, #255	; 0xff
 8003b68:	4013      	ands	r3, r2
 8003b6a:	3b08      	subs	r3, #8
 8003b6c:	2114      	movs	r1, #20
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fc fadc 	bl	800012c <__udivsi3>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003b80:	4694      	mov	ip, r2
 8003b82:	4463      	add	r3, ip
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	001a      	movs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b90:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	221c      	movs	r2, #28
 8003b96:	4013      	ands	r3, r2
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b004      	add	sp, #16
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	10008200 	.word	0x10008200
 8003bac:	40020880 	.word	0x40020880

08003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bc6:	4694      	mov	ip, r2
 8003bc8:	4463      	add	r3, ip
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	001a      	movs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4013      	ands	r3, r2
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	1000823f 	.word	0x1000823f
 8003bf4:	40020940 	.word	0x40020940

08003bf8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003c06:	e153      	b.n	8003eb0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4091      	lsls	r1, r2
 8003c12:	000a      	movs	r2, r1
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d100      	bne.n	8003c20 <HAL_GPIO_Init+0x28>
 8003c1e:	e144      	b.n	8003eaa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x38>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b12      	cmp	r3, #18
 8003c2e:	d125      	bne.n	8003c7c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	0092      	lsls	r2, r2, #2
 8003c3a:	58d3      	ldr	r3, [r2, r3]
 8003c3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2207      	movs	r2, #7
 8003c42:	4013      	ands	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4013      	ands	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	220f      	movs	r2, #15
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2107      	movs	r1, #7
 8003c60:	400b      	ands	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	409a      	lsls	r2, r3
 8003c66:	0013      	movs	r3, r2
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	0013      	movs	r3, r2
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2203      	movs	r2, #3
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	0013      	movs	r3, r2
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_GPIO_Init+0xd8>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d007      	beq.n	8003cd0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cc4:	2b11      	cmp	r3, #17
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b12      	cmp	r3, #18
 8003cce:	d130      	bne.n	8003d32 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2203      	movs	r2, #3
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	0013      	movs	r3, r2
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	0013      	movs	r3, r2
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d06:	2201      	movs	r2, #1
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	401a      	ands	r2, r3
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	409a      	lsls	r2, r3
 8003d24:	0013      	movs	r3, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d017      	beq.n	8003d6a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	2203      	movs	r2, #3
 8003d46:	409a      	lsls	r2, r3
 8003d48:	0013      	movs	r3, r2
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	055b      	lsls	r3, r3, #21
 8003d72:	4013      	ands	r3, r2
 8003d74:	d100      	bne.n	8003d78 <HAL_GPIO_Init+0x180>
 8003d76:	e098      	b.n	8003eaa <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003d78:	4a53      	ldr	r2, [pc, #332]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3318      	adds	r3, #24
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	589b      	ldr	r3, [r3, r2]
 8003d84:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	220f      	movs	r2, #15
 8003d90:	409a      	lsls	r2, r3
 8003d92:	0013      	movs	r3, r2
 8003d94:	43da      	mvns	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	23a0      	movs	r3, #160	; 0xa0
 8003da0:	05db      	lsls	r3, r3, #23
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d019      	beq.n	8003dda <HAL_GPIO_Init+0x1e2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a48      	ldr	r2, [pc, #288]	; (8003ecc <HAL_GPIO_Init+0x2d4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_GPIO_Init+0x1de>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <HAL_GPIO_Init+0x2d8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00d      	beq.n	8003dd2 <HAL_GPIO_Init+0x1da>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a46      	ldr	r2, [pc, #280]	; (8003ed4 <HAL_GPIO_Init+0x2dc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <HAL_GPIO_Init+0x1d6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a45      	ldr	r2, [pc, #276]	; (8003ed8 <HAL_GPIO_Init+0x2e0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_GPIO_Init+0x1d2>
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dca:	2306      	movs	r3, #6
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_Init+0x1e4>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	2103      	movs	r1, #3
 8003de0:	400a      	ands	r2, r1
 8003de2:	00d2      	lsls	r2, r2, #3
 8003de4:	4093      	lsls	r3, r2
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003dec:	4936      	ldr	r1, [pc, #216]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	3318      	adds	r3, #24
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003dfa:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	58d3      	ldr	r3, [r2, r3]
 8003e00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43da      	mvns	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	025b      	lsls	r3, r3, #9
 8003e14:	4013      	ands	r3, r2
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003e20:	4929      	ldr	r1, [pc, #164]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003e2a:	2384      	movs	r3, #132	; 0x84
 8003e2c:	58d3      	ldr	r3, [r2, r3]
 8003e2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	43da      	mvns	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4013      	ands	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	4013      	ands	r3, r2
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003e4e:	491e      	ldr	r1, [pc, #120]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003e50:	2284      	movs	r2, #132	; 0x84
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4013      	ands	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	035b      	lsls	r3, r3, #13
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	039b      	lsls	r3, r3, #14
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_GPIO_Init+0x2d0>)
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	3301      	adds	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	40da      	lsrs	r2, r3
 8003eb8:	1e13      	subs	r3, r2, #0
 8003eba:	d000      	beq.n	8003ebe <HAL_GPIO_Init+0x2c6>
 8003ebc:	e6a4      	b.n	8003c08 <HAL_GPIO_Init+0x10>
  }
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b006      	add	sp, #24
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021800 	.word	0x40021800
 8003ecc:	50000400 	.word	0x50000400
 8003ed0:	50000800 	.word	0x50000800
 8003ed4:	50000c00 	.word	0x50000c00
 8003ed8:	50001400 	.word	0x50001400

08003edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	000a      	movs	r2, r1
 8003ee6:	1cbb      	adds	r3, r7, #2
 8003ee8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	1cba      	adds	r2, r7, #2
 8003ef0:	8812      	ldrh	r2, [r2, #0]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ef6:	230f      	movs	r3, #15
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e003      	b.n	8003f08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003f08:	230f      	movs	r3, #15
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	781b      	ldrb	r3, [r3, #0]
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b004      	add	sp, #16
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	0008      	movs	r0, r1
 8003f20:	0011      	movs	r1, r2
 8003f22:	1cbb      	adds	r3, r7, #2
 8003f24:	1c02      	adds	r2, r0, #0
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	1c7b      	adds	r3, r7, #1
 8003f2a:	1c0a      	adds	r2, r1, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f2e:	1c7b      	adds	r3, r7, #1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f36:	1cbb      	adds	r3, r7, #2
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f3e:	e003      	b.n	8003f48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f40:	1cbb      	adds	r3, r7, #2
 8003f42:	881a      	ldrh	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	000a      	movs	r2, r1
 8003f5a:	1cbb      	adds	r3, r7, #2
 8003f5c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f64:	1cbb      	adds	r3, r7, #2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	1cb9      	adds	r1, r7, #2
 8003f74:	8809      	ldrh	r1, [r1, #0]
 8003f76:	400b      	ands	r3, r1
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	619a      	str	r2, [r3, #24]
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b004      	add	sp, #16
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	0002      	movs	r2, r0
 8003f90:	1dbb      	adds	r3, r7, #6
 8003f92:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	1dba      	adds	r2, r7, #6
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d008      	beq.n	8003fb2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003fa2:	1dba      	adds	r2, r7, #6
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003fa8:	1dbb      	adds	r3, r7, #6
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f815 	bl	8003fdc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	1dba      	adds	r2, r7, #6
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d008      	beq.n	8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003fc0:	1dba      	adds	r2, r7, #6
 8003fc2:	8812      	ldrh	r2, [r2, #0]
 8003fc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7fd ffc6 	bl	8001f5c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021800 	.word	0x40021800

08003fdc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	1dbb      	adds	r3, r7, #6
 8003fe6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e1d0      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	4013      	ands	r3, r2
 800400a:	d100      	bne.n	800400e <HAL_RCC_OscConfig+0x1e>
 800400c:	e069      	b.n	80040e2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400e:	4bc8      	ldr	r3, [pc, #800]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2238      	movs	r2, #56	; 0x38
 8004014:	4013      	ands	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b08      	cmp	r3, #8
 800401c:	d105      	bne.n	800402a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d15d      	bne.n	80040e2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1bc      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	429a      	cmp	r2, r3
 8004034:	d107      	bne.n	8004046 <HAL_RCC_OscConfig+0x56>
 8004036:	4bbe      	ldr	r3, [pc, #760]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4bbd      	ldr	r3, [pc, #756]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0249      	lsls	r1, r1, #9
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e020      	b.n	8004088 <HAL_RCC_OscConfig+0x98>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	23a0      	movs	r3, #160	; 0xa0
 800404c:	02db      	lsls	r3, r3, #11
 800404e:	429a      	cmp	r2, r3
 8004050:	d10e      	bne.n	8004070 <HAL_RCC_OscConfig+0x80>
 8004052:	4bb7      	ldr	r3, [pc, #732]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4bb6      	ldr	r3, [pc, #728]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	02c9      	lsls	r1, r1, #11
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	4bb3      	ldr	r3, [pc, #716]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4bb2      	ldr	r3, [pc, #712]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	0249      	lsls	r1, r1, #9
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0x98>
 8004070:	4baf      	ldr	r3, [pc, #700]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4bae      	ldr	r3, [pc, #696]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004076:	49af      	ldr	r1, [pc, #700]	; (8004334 <HAL_RCC_OscConfig+0x344>)
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	4bac      	ldr	r3, [pc, #688]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4bab      	ldr	r3, [pc, #684]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004082:	49ad      	ldr	r1, [pc, #692]	; (8004338 <HAL_RCC_OscConfig+0x348>)
 8004084:	400a      	ands	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d014      	beq.n	80040ba <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe f878 	bl	8002184 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800409a:	f7fe f873 	bl	8002184 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e17b      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ac:	4ba0      	ldr	r3, [pc, #640]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	4013      	ands	r3, r2
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0xaa>
 80040b8:	e013      	b.n	80040e2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fe f863 	bl	8002184 <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80040c4:	f7fe f85e 	bl	8002184 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e166      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d6:	4b96      	ldr	r3, [pc, #600]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	029b      	lsls	r3, r3, #10
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	d100      	bne.n	80040ee <HAL_RCC_OscConfig+0xfe>
 80040ec:	e086      	b.n	80041fc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4b90      	ldr	r3, [pc, #576]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2238      	movs	r2, #56	; 0x38
 80040f4:	4013      	ands	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d12f      	bne.n	800415e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e14c      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b89      	ldr	r3, [pc, #548]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4a8b      	ldr	r2, [pc, #556]	; (800433c <HAL_RCC_OscConfig+0x34c>)
 8004110:	4013      	ands	r3, r2
 8004112:	0019      	movs	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d112      	bne.n	800414c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004126:	4b82      	ldr	r3, [pc, #520]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a85      	ldr	r2, [pc, #532]	; (8004340 <HAL_RCC_OscConfig+0x350>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800413a:	4b7d      	ldr	r3, [pc, #500]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	0adb      	lsrs	r3, r3, #11
 8004140:	2207      	movs	r2, #7
 8004142:	4013      	ands	r3, r2
 8004144:	4a7f      	ldr	r2, [pc, #508]	; (8004344 <HAL_RCC_OscConfig+0x354>)
 8004146:	40da      	lsrs	r2, r3
 8004148:	4b7f      	ldr	r3, [pc, #508]	; (8004348 <HAL_RCC_OscConfig+0x358>)
 800414a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800414c:	4b7f      	ldr	r3, [pc, #508]	; (800434c <HAL_RCC_OscConfig+0x35c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0018      	movs	r0, r3
 8004152:	f7fd ffbb 	bl	80020cc <HAL_InitTick>
 8004156:	1e03      	subs	r3, r0, #0
 8004158:	d050      	beq.n	80041fc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e122      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d030      	beq.n	80041c8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004166:	4b72      	ldr	r3, [pc, #456]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	; (8004340 <HAL_RCC_OscConfig+0x350>)
 800416c:	4013      	ands	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800417a:	4b6d      	ldr	r3, [pc, #436]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	0049      	lsls	r1, r1, #1
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd fffc 	bl	8002184 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004192:	f7fd fff7 	bl	8002184 <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0ff      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a4:	4b62      	ldr	r3, [pc, #392]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4013      	ands	r3, r2
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b5f      	ldr	r3, [pc, #380]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_RCC_OscConfig+0x34c>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	021a      	lsls	r2, r3, #8
 80041c0:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	e019      	b.n	80041fc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b58      	ldr	r3, [pc, #352]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80041ce:	4960      	ldr	r1, [pc, #384]	; (8004350 <HAL_RCC_OscConfig+0x360>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd ffd6 	bl	8002184 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80041de:	f7fd ffd1 	bl	8002184 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0d9      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041f0:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4013      	ands	r3, r2
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2208      	movs	r2, #8
 8004202:	4013      	ands	r3, r2
 8004204:	d042      	beq.n	800428c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004206:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2238      	movs	r2, #56	; 0x38
 800420c:	4013      	ands	r3, r2
 800420e:	2b18      	cmp	r3, #24
 8004210:	d105      	bne.n	800421e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d138      	bne.n	800428c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0c2      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d019      	beq.n	800425a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004226:	4b42      	ldr	r3, [pc, #264]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800422a:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800422c:	2101      	movs	r1, #1
 800422e:	430a      	orrs	r2, r1
 8004230:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd ffa7 	bl	8002184 <HAL_GetTick>
 8004236:	0003      	movs	r3, r0
 8004238:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800423c:	f7fd ffa2 	bl	8002184 <HAL_GetTick>
 8004240:	0002      	movs	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0aa      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800424e:	4b38      	ldr	r3, [pc, #224]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	2202      	movs	r2, #2
 8004254:	4013      	ands	r3, r2
 8004256:	d0f1      	beq.n	800423c <HAL_RCC_OscConfig+0x24c>
 8004258:	e018      	b.n	800428c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800425a:	4b35      	ldr	r3, [pc, #212]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 800425c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800425e:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004260:	2101      	movs	r1, #1
 8004262:	438a      	bics	r2, r1
 8004264:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd ff8d 	bl	8002184 <HAL_GetTick>
 800426a:	0003      	movs	r3, r0
 800426c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004270:	f7fd ff88 	bl	8002184 <HAL_GetTick>
 8004274:	0002      	movs	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e090      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	2202      	movs	r2, #2
 8004288:	4013      	ands	r3, r2
 800428a:	d1f1      	bne.n	8004270 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d100      	bne.n	8004298 <HAL_RCC_OscConfig+0x2a8>
 8004296:	e084      	b.n	80043a2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004298:	230f      	movs	r3, #15
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2238      	movs	r2, #56	; 0x38
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d000      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2c6>
 80042b4:	e075      	b.n	80043a2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e074      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d106      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2e0>
 80042c2:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042c8:	2101      	movs	r1, #1
 80042ca:	430a      	orrs	r2, r1
 80042cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80042ce:	e01c      	b.n	800430a <HAL_RCC_OscConfig+0x31a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x302>
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042de:	2104      	movs	r1, #4
 80042e0:	430a      	orrs	r2, r1
 80042e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80042e4:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	430a      	orrs	r2, r1
 80042ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80042f0:	e00b      	b.n	800430a <HAL_RCC_OscConfig+0x31a>
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 80042f8:	2101      	movs	r1, #1
 80042fa:	438a      	bics	r2, r1
 80042fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_OscConfig+0x340>)
 8004304:	2104      	movs	r1, #4
 8004306:	438a      	bics	r2, r1
 8004308:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d028      	beq.n	8004364 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd ff37 	bl	8002184 <HAL_GetTick>
 8004316:	0003      	movs	r3, r0
 8004318:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd ff32 	bl	8002184 <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	4a0b      	ldr	r2, [pc, #44]	; (8004354 <HAL_RCC_OscConfig+0x364>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d915      	bls.n	8004358 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e039      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
 8004330:	40021000 	.word	0x40021000
 8004334:	fffeffff 	.word	0xfffeffff
 8004338:	fffbffff 	.word	0xfffbffff
 800433c:	ffff80ff 	.word	0xffff80ff
 8004340:	ffffc7ff 	.word	0xffffc7ff
 8004344:	02dc6c00 	.word	0x02dc6c00
 8004348:	20000074 	.word	0x20000074
 800434c:	20000078 	.word	0x20000078
 8004350:	fffffeff 	.word	0xfffffeff
 8004354:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004358:	4b14      	ldr	r3, [pc, #80]	; (80043ac <HAL_RCC_OscConfig+0x3bc>)
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	2202      	movs	r2, #2
 800435e:	4013      	ands	r3, r2
 8004360:	d0dc      	beq.n	800431c <HAL_RCC_OscConfig+0x32c>
 8004362:	e013      	b.n	800438c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fd ff0e 	bl	8002184 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800436c:	e009      	b.n	8004382 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd ff09 	bl	8002184 <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_RCC_OscConfig+0x3c0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e010      	b.n	80043a4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_RCC_OscConfig+0x3bc>)
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	2202      	movs	r2, #2
 8004388:	4013      	ands	r3, r2
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_OscConfig+0x3bc>)
 8004398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439a:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_RCC_OscConfig+0x3bc>)
 800439c:	4905      	ldr	r1, [pc, #20]	; (80043b4 <HAL_RCC_OscConfig+0x3c4>)
 800439e:	400a      	ands	r2, r1
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	00001388 	.word	0x00001388
 80043b4:	efffffff 	.word	0xefffffff

080043b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0e9      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2207      	movs	r2, #7
 80043d2:	4013      	ands	r3, r2
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d91e      	bls.n	8004418 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2207      	movs	r2, #7
 80043e0:	4393      	bics	r3, r2
 80043e2:	0019      	movs	r1, r3
 80043e4:	4b70      	ldr	r3, [pc, #448]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043ec:	f7fd feca 	bl	8002184 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043f4:	e009      	b.n	800440a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80043f6:	f7fd fec5 	bl	8002184 <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	4a6a      	ldr	r2, [pc, #424]	; (80045ac <HAL_RCC_ClockConfig+0x1f4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0ca      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800440a:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2207      	movs	r2, #7
 8004410:	4013      	ands	r3, r2
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d1ee      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2202      	movs	r2, #2
 800441e:	4013      	ands	r3, r2
 8004420:	d017      	beq.n	8004452 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2204      	movs	r2, #4
 8004428:	4013      	ands	r3, r2
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800442c:	4b60      	ldr	r3, [pc, #384]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a60      	ldr	r2, [pc, #384]	; (80045b4 <HAL_RCC_ClockConfig+0x1fc>)
 8004432:	401a      	ands	r2, r3
 8004434:	4b5e      	ldr	r3, [pc, #376]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004436:	21b0      	movs	r1, #176	; 0xb0
 8004438:	0109      	lsls	r1, r1, #4
 800443a:	430a      	orrs	r2, r1
 800443c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443e:	4b5c      	ldr	r3, [pc, #368]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	4a5d      	ldr	r2, [pc, #372]	; (80045b8 <HAL_RCC_ClockConfig+0x200>)
 8004444:	4013      	ands	r3, r2
 8004446:	0019      	movs	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	4b58      	ldr	r3, [pc, #352]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	4013      	ands	r3, r2
 800445a:	d055      	beq.n	8004508 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800445c:	4b54      	ldr	r3, [pc, #336]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	221c      	movs	r2, #28
 8004462:	4393      	bics	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	4b51      	ldr	r3, [pc, #324]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004478:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	4013      	ands	r3, r2
 8004482:	d11f      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e08b      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004490:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4013      	ands	r3, r2
 800449a:	d113      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e07f      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80044a8:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 80044aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ac:	2202      	movs	r2, #2
 80044ae:	4013      	ands	r3, r2
 80044b0:	d108      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e074      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80044b6:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e06d      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044c4:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2207      	movs	r2, #7
 80044ca:	4393      	bics	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fd fe54 	bl	8002184 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e0:	e009      	b.n	80044f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044e2:	f7fd fe4f 	bl	8002184 <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <HAL_RCC_ClockConfig+0x1f4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e054      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2238      	movs	r2, #56	; 0x38
 80044fc:	401a      	ands	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	429a      	cmp	r2, r3
 8004506:	d1ec      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2207      	movs	r2, #7
 800450e:	4013      	ands	r3, r2
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d21e      	bcs.n	8004554 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2207      	movs	r2, #7
 800451c:	4393      	bics	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004528:	f7fd fe2c 	bl	8002184 <HAL_GetTick>
 800452c:	0003      	movs	r3, r0
 800452e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004530:	e009      	b.n	8004546 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004532:	f7fd fe27 	bl	8002184 <HAL_GetTick>
 8004536:	0002      	movs	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_RCC_ClockConfig+0x1f4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e02c      	b.n	80045a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004546:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2207      	movs	r2, #7
 800454c:	4013      	ands	r3, r2
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d1ee      	bne.n	8004532 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2204      	movs	r2, #4
 800455a:	4013      	ands	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_RCC_ClockConfig+0x204>)
 8004564:	4013      	ands	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004572:	f000 f82b 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8004576:	0001      	movs	r1, r0
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <HAL_RCC_ClockConfig+0x1f8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	220f      	movs	r2, #15
 8004580:	401a      	ands	r2, r3
 8004582:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <HAL_RCC_ClockConfig+0x208>)
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	58d3      	ldr	r3, [r2, r3]
 8004588:	221f      	movs	r2, #31
 800458a:	4013      	ands	r3, r2
 800458c:	000a      	movs	r2, r1
 800458e:	40da      	lsrs	r2, r3
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCC_ClockConfig+0x20c>)
 8004592:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_RCC_ClockConfig+0x210>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0018      	movs	r0, r3
 800459a:	f7fd fd97 	bl	80020cc <HAL_InitTick>
 800459e:	0003      	movs	r3, r0
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b004      	add	sp, #16
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40022000 	.word	0x40022000
 80045ac:	00001388 	.word	0x00001388
 80045b0:	40021000 	.word	0x40021000
 80045b4:	ffff84ff 	.word	0xffff84ff
 80045b8:	fffff0ff 	.word	0xfffff0ff
 80045bc:	ffff8fff 	.word	0xffff8fff
 80045c0:	0800647c 	.word	0x0800647c
 80045c4:	20000074 	.word	0x20000074
 80045c8:	20000078 	.word	0x20000078

080045cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_RCC_GetSysClockFreq+0x78>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2238      	movs	r2, #56	; 0x38
 80045d8:	4013      	ands	r3, r2
 80045da:	d10f      	bne.n	80045fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_GetSysClockFreq+0x78>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0adb      	lsrs	r3, r3, #11
 80045e2:	2207      	movs	r2, #7
 80045e4:	4013      	ands	r3, r2
 80045e6:	2201      	movs	r2, #1
 80045e8:	409a      	lsls	r2, r3
 80045ea:	0013      	movs	r3, r2
 80045ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	4815      	ldr	r0, [pc, #84]	; (8004648 <HAL_RCC_GetSysClockFreq+0x7c>)
 80045f2:	f7fb fd9b 	bl	800012c <__udivsi3>
 80045f6:	0003      	movs	r3, r0
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	e01e      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_GetSysClockFreq+0x78>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2238      	movs	r2, #56	; 0x38
 8004602:	4013      	ands	r3, r2
 8004604:	2b08      	cmp	r3, #8
 8004606:	d102      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004608:	4b10      	ldr	r3, [pc, #64]	; (800464c <HAL_RCC_GetSysClockFreq+0x80>)
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	e015      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <HAL_RCC_GetSysClockFreq+0x78>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2238      	movs	r2, #56	; 0x38
 8004614:	4013      	ands	r3, r2
 8004616:	2b20      	cmp	r3, #32
 8004618:	d103      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	e00b      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RCC_GetSysClockFreq+0x78>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2238      	movs	r2, #56	; 0x38
 8004628:	4013      	ands	r3, r2
 800462a:	2b18      	cmp	r3, #24
 800462c:	d103      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800462e:	23fa      	movs	r3, #250	; 0xfa
 8004630:	01db      	lsls	r3, r3, #7
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	e001      	b.n	800463a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800463a:	687b      	ldr	r3, [r7, #4]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	02dc6c00 	.word	0x02dc6c00
 800464c:	007a1200 	.word	0x007a1200

08004650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004654:	4b02      	ldr	r3, [pc, #8]	; (8004660 <HAL_RCC_GetHCLKFreq+0x10>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	20000074 	.word	0x20000074

08004664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004668:	f7ff fff2 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800466c:	0001      	movs	r1, r0
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	0b1b      	lsrs	r3, r3, #12
 8004674:	2207      	movs	r2, #7
 8004676:	401a      	ands	r2, r3
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	58d3      	ldr	r3, [r2, r3]
 800467e:	221f      	movs	r2, #31
 8004680:	4013      	ands	r3, r2
 8004682:	40d9      	lsrs	r1, r3
 8004684:	000b      	movs	r3, r1
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	080064bc 	.word	0x080064bc

08004694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800469c:	2313      	movs	r3, #19
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046a4:	2312      	movs	r3, #18
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	4013      	ands	r3, r2
 80046b6:	d100      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80046b8:	e079      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ba:	2011      	movs	r0, #17
 80046bc:	183b      	adds	r3, r7, r0
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c2:	4b64      	ldr	r3, [pc, #400]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	055b      	lsls	r3, r3, #21
 80046ca:	4013      	ands	r3, r2
 80046cc:	d110      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ce:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d2:	4b60      	ldr	r3, [pc, #384]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	0549      	lsls	r1, r1, #21
 80046d8:	430a      	orrs	r2, r1
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
 80046dc:	4b5d      	ldr	r3, [pc, #372]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	055b      	lsls	r3, r3, #21
 80046e4:	4013      	ands	r3, r2
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	183b      	adds	r3, r7, r0
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046f4:	23c0      	movs	r3, #192	; 0xc0
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d019      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	d014      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800470c:	4b51      	ldr	r3, [pc, #324]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	4a51      	ldr	r2, [pc, #324]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004712:	4013      	ands	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004716:	4b4f      	ldr	r3, [pc, #316]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800471a:	4b4e      	ldr	r3, [pc, #312]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	0249      	lsls	r1, r1, #9
 8004720:	430a      	orrs	r2, r1
 8004722:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004728:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800472a:	494c      	ldr	r1, [pc, #304]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800472c:	400a      	ands	r2, r1
 800472e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004730:	4b48      	ldr	r3, [pc, #288]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2201      	movs	r2, #1
 800473a:	4013      	ands	r3, r2
 800473c:	d016      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473e:	f7fd fd21 	bl	8002184 <HAL_GetTick>
 8004742:	0003      	movs	r3, r0
 8004744:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004746:	e00c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd fd1c 	bl	8002184 <HAL_GetTick>
 800474c:	0002      	movs	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a43      	ldr	r2, [pc, #268]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d904      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8004758:	2313      	movs	r3, #19
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	2203      	movs	r2, #3
 800475e:	701a      	strb	r2, [r3, #0]
          break;
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	2202      	movs	r2, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d0ed      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800476c:	2313      	movs	r3, #19
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	4a37      	ldr	r2, [pc, #220]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	4b33      	ldr	r3, [pc, #204]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004786:	430a      	orrs	r2, r1
 8004788:	65da      	str	r2, [r3, #92]	; 0x5c
 800478a:	e005      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	2312      	movs	r3, #18
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2213      	movs	r2, #19
 8004792:	18ba      	adds	r2, r7, r2
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004798:	2311      	movs	r3, #17
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047a8:	492e      	ldr	r1, [pc, #184]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b8:	4b26      	ldr	r3, [pc, #152]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	2203      	movs	r2, #3
 80047be:	4393      	bics	r3, r2
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	4b23      	ldr	r3, [pc, #140]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047c8:	430a      	orrs	r2, r1
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	4013      	ands	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d6:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	4a23      	ldr	r2, [pc, #140]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047dc:	4013      	ands	r3, r2
 80047de:	0019      	movs	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e6:	430a      	orrs	r2, r1
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	01db      	lsls	r3, r3, #7
 80047f2:	4013      	ands	r3, r2
 80047f4:	d008      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	0899      	lsrs	r1, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004804:	430a      	orrs	r2, r1
 8004806:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	4013      	ands	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	4a14      	ldr	r2, [pc, #80]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004824:	430a      	orrs	r2, r1
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	da09      	bge.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	22e0      	movs	r2, #224	; 0xe0
 8004836:	4393      	bics	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004844:	2312      	movs	r3, #18
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	781b      	ldrb	r3, [r3, #0]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b006      	add	sp, #24
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	40021000 	.word	0x40021000
 8004858:	fffffcff 	.word	0xfffffcff
 800485c:	fffeffff 	.word	0xfffeffff
 8004860:	00001388 	.word	0x00001388
 8004864:	efffffff 	.word	0xefffffff
 8004868:	ffffcfff 	.word	0xffffcfff
 800486c:	ffff3fff 	.word	0xffff3fff

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e04a      	b.n	8004918 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223d      	movs	r2, #61	; 0x3d
 8004886:	5c9b      	ldrb	r3, [r3, r2]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	223c      	movs	r2, #60	; 0x3c
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f7fd f91f 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	223d      	movs	r2, #61	; 0x3d
 80048a2:	2102      	movs	r1, #2
 80048a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	0019      	movs	r1, r3
 80048b0:	0010      	movs	r0, r2
 80048b2:	f000 fa83 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2248      	movs	r2, #72	; 0x48
 80048ba:	2101      	movs	r1, #1
 80048bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223e      	movs	r2, #62	; 0x3e
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	223f      	movs	r2, #63	; 0x3f
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2240      	movs	r2, #64	; 0x40
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2241      	movs	r2, #65	; 0x41
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2242      	movs	r2, #66	; 0x42
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2243      	movs	r2, #67	; 0x43
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2244      	movs	r2, #68	; 0x44
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2245      	movs	r2, #69	; 0x45
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2246      	movs	r2, #70	; 0x46
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2247      	movs	r2, #71	; 0x47
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223d      	movs	r2, #61	; 0x3d
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	223d      	movs	r2, #61	; 0x3d
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e037      	b.n	80049a8 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	223d      	movs	r2, #61	; 0x3d
 800493c:	2102      	movs	r1, #2
 800493e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_TIM_Base_Start_IT+0x90>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x44>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <HAL_TIM_Base_Start_IT+0x94>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d116      	bne.n	8004992 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <HAL_TIM_Base_Start_IT+0x98>)
 800496c:	4013      	ands	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d016      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x84>
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	025b      	lsls	r3, r3, #9
 800497c:	429a      	cmp	r2, r3
 800497e:	d011      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	e008      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e000      	b.n	80049a6 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	00010007 	.word	0x00010007

080049bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2202      	movs	r2, #2
 80049d8:	4013      	ands	r3, r2
 80049da:	d021      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2202      	movs	r2, #2
 80049e0:	4013      	ands	r3, r2
 80049e2:	d01d      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2203      	movs	r2, #3
 80049ea:	4252      	negs	r2, r2
 80049ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2203      	movs	r2, #3
 80049fc:	4013      	ands	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 f9c2 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004a08:	e007      	b.n	8004a1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 f9b5 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 f9c1 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2204      	movs	r2, #4
 8004a24:	4013      	ands	r3, r2
 8004a26:	d022      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d01e      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2205      	movs	r2, #5
 8004a36:	4252      	negs	r2, r2
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	23c0      	movs	r3, #192	; 0xc0
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 f99b 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004a56:	e007      	b.n	8004a68 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f98e 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 f99a 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2208      	movs	r2, #8
 8004a72:	4013      	ands	r3, r2
 8004a74:	d021      	beq.n	8004aba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2208      	movs	r2, #8
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d01d      	beq.n	8004aba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2209      	movs	r2, #9
 8004a84:	4252      	negs	r2, r2
 8004a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2203      	movs	r2, #3
 8004a96:	4013      	ands	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f000 f975 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004aa2:	e007      	b.n	8004ab4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 f968 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 f974 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2210      	movs	r2, #16
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2210      	movs	r2, #16
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d01e      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2211      	movs	r2, #17
 8004ad0:	4252      	negs	r2, r2
 8004ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	23c0      	movs	r3, #192	; 0xc0
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 f94e 	bl	8004d8c <HAL_TIM_IC_CaptureCallback>
 8004af0:	e007      	b.n	8004b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 f941 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 f94d 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d00c      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	4013      	ands	r3, r2
 8004b16:	d008      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	4252      	negs	r2, r2
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f921 	bl	8004d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d00c      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	4013      	ands	r3, r2
 8004b38:	d008      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2281      	movs	r2, #129	; 0x81
 8004b40:	4252      	negs	r2, r2
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 faaa 	bl	80050a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4013      	ands	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <HAL_TIM_IRQHandler+0x200>)
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 faa1 	bl	80050b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2240      	movs	r2, #64	; 0x40
 8004b72:	4013      	ands	r3, r2
 8004b74:	d00c      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2240      	movs	r2, #64	; 0x40
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d008      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2241      	movs	r2, #65	; 0x41
 8004b84:	4252      	negs	r2, r2
 8004b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 f90e 	bl	8004dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2220      	movs	r2, #32
 8004b94:	4013      	ands	r3, r2
 8004b96:	d00c      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d008      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2221      	movs	r2, #33	; 0x21
 8004ba6:	4252      	negs	r2, r2
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 fa6f 	bl	8005090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	fffffeff 	.word	0xfffffeff

08004bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	230f      	movs	r3, #15
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	223c      	movs	r2, #60	; 0x3c
 8004bd6:	5c9b      	ldrb	r3, [r3, r2]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIM_ConfigClockSource+0x20>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e0bc      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x19a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	223c      	movs	r2, #60	; 0x3c
 8004be4:	2101      	movs	r1, #1
 8004be6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	223d      	movs	r2, #61	; 0x3d
 8004bec:	2102      	movs	r1, #2
 8004bee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4a5a      	ldr	r2, [pc, #360]	; (8004d64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4a59      	ldr	r2, [pc, #356]	; (8004d68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2280      	movs	r2, #128	; 0x80
 8004c16:	0192      	lsls	r2, r2, #6
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d040      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xde>
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	0192      	lsls	r2, r2, #6
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d900      	bls.n	8004c26 <HAL_TIM_ConfigClockSource+0x66>
 8004c24:	e088      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	0152      	lsls	r2, r2, #5
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d100      	bne.n	8004c30 <HAL_TIM_ConfigClockSource+0x70>
 8004c2e:	e088      	b.n	8004d42 <HAL_TIM_ConfigClockSource+0x182>
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	0152      	lsls	r2, r2, #5
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d900      	bls.n	8004c3a <HAL_TIM_ConfigClockSource+0x7a>
 8004c38:	e07e      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c3a:	2b70      	cmp	r3, #112	; 0x70
 8004c3c:	d018      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0xb0>
 8004c3e:	d900      	bls.n	8004c42 <HAL_TIM_ConfigClockSource+0x82>
 8004c40:	e07a      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c42:	2b60      	cmp	r3, #96	; 0x60
 8004c44:	d04f      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x126>
 8004c46:	d900      	bls.n	8004c4a <HAL_TIM_ConfigClockSource+0x8a>
 8004c48:	e076      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c4a:	2b50      	cmp	r3, #80	; 0x50
 8004c4c:	d03b      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x106>
 8004c4e:	d900      	bls.n	8004c52 <HAL_TIM_ConfigClockSource+0x92>
 8004c50:	e072      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d057      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x146>
 8004c56:	d900      	bls.n	8004c5a <HAL_TIM_ConfigClockSource+0x9a>
 8004c58:	e06e      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c5a:	2b30      	cmp	r3, #48	; 0x30
 8004c5c:	d063      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x166>
 8004c5e:	d86b      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d060      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x166>
 8004c64:	d868      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d05d      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x166>
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d05b      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x166>
 8004c6e:	e063      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	f000 f984 	bl	8004f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2277      	movs	r2, #119	; 0x77
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
      break;
 8004c9c:	e052      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	f000 f96d 	bl	8004f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	01c9      	lsls	r1, r1, #7
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
      break;
 8004cc4:	e03e      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	f000 f8de 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2150      	movs	r1, #80	; 0x50
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f000 f938 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e02e      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	f000 f8fc 	bl	8004ef0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2160      	movs	r1, #96	; 0x60
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f928 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004d04:	e01e      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d12:	001a      	movs	r2, r3
 8004d14:	f000 f8be 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2140      	movs	r1, #64	; 0x40
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f000 f918 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004d24:	e00e      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	0019      	movs	r1, r3
 8004d30:	0010      	movs	r0, r2
 8004d32:	f000 f90f 	bl	8004f54 <TIM_ITRx_SetConfig>
      break;
 8004d36:	e005      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
      break;
 8004d40:	e000      	b.n	8004d44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004d42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	223d      	movs	r2, #61	; 0x3d
 8004d48:	2101      	movs	r1, #1
 8004d4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	223c      	movs	r2, #60	; 0x3c
 8004d50:	2100      	movs	r1, #0
 8004d52:	5499      	strb	r1, [r3, r2]

  return status;
 8004d54:	230f      	movs	r3, #15
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	781b      	ldrb	r3, [r3, #0]
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b004      	add	sp, #16
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	ffceff88 	.word	0xffceff88
 8004d68:	ffff00ff 	.word	0xffff00ff

08004d6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b002      	add	sp, #8
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <TIM_Base_SetConfig+0xc0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0x20>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <TIM_Base_SetConfig+0xc4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d108      	bne.n	8004dee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2270      	movs	r2, #112	; 0x70
 8004de0:	4393      	bics	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <TIM_Base_SetConfig+0xc0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <TIM_Base_SetConfig+0x5a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <TIM_Base_SetConfig+0xc4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_Base_SetConfig+0x5a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <TIM_Base_SetConfig+0xc8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_Base_SetConfig+0x5a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <TIM_Base_SetConfig+0xcc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_Base_SetConfig+0x5a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <TIM_Base_SetConfig+0xd0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d108      	bne.n	8004e28 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <TIM_Base_SetConfig+0xd4>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2280      	movs	r2, #128	; 0x80
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	001a      	movs	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <TIM_Base_SetConfig+0xc0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a0b      	ldr	r2, [pc, #44]	; (8004e88 <TIM_Base_SetConfig+0xcc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_Base_SetConfig+0xaa>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <TIM_Base_SetConfig+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d103      	bne.n	8004e6e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	615a      	str	r2, [r3, #20]
}
 8004e74:	46c0      	nop			; (mov r8, r8)
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40002000 	.word	0x40002000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800
 8004e90:	fffffcff 	.word	0xfffffcff

08004e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4393      	bics	r3, r2
 8004eae:	001a      	movs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	22f0      	movs	r2, #240	; 0xf0
 8004ebe:	4393      	bics	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	220a      	movs	r2, #10
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	621a      	str	r2, [r3, #32]
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b006      	add	sp, #24
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	2210      	movs	r2, #16
 8004f08:	4393      	bics	r3, r2
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <TIM_TI2_ConfigInputStage+0x60>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	22a0      	movs	r2, #160	; 0xa0
 8004f2c:	4393      	bics	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b006      	add	sp, #24
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	ffff0fff 	.word	0xffff0fff

08004f54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <TIM_ITRx_SetConfig+0x34>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	2207      	movs	r2, #7
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b004      	add	sp, #16
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	ffcfff8f 	.word	0xffcfff8f

08004f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4a09      	ldr	r2, [pc, #36]	; (8004fc8 <TIM_ETR_SetConfig+0x3c>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b006      	add	sp, #24
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	ffff00ff 	.word	0xffff00ff

08004fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	223c      	movs	r2, #60	; 0x3c
 8004fda:	5c9b      	ldrb	r3, [r3, r2]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e04a      	b.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	223c      	movs	r2, #60	; 0x3c
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	223d      	movs	r2, #61	; 0x3d
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2270      	movs	r2, #112	; 0x70
 8005024:	4393      	bics	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a11      	ldr	r2, [pc, #68]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a10      	ldr	r2, [pc, #64]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10c      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	4393      	bics	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	4313      	orrs	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	223d      	movs	r2, #61	; 0x3d
 800506c:	2101      	movs	r1, #1
 800506e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	223c      	movs	r2, #60	; 0x3c
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b004      	add	sp, #16
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	40012c00 	.word	0x40012c00
 8005088:	ff0fffff 	.word	0xff0fffff
 800508c:	40000400 	.word	0x40000400

08005090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005098:	46c0      	nop			; (mov r8, r8)
 800509a:	46bd      	mov	sp, r7
 800509c:	b002      	add	sp, #8
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b002      	add	sp, #8
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e046      	b.n	8005160 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2288      	movs	r2, #136	; 0x88
 80050d6:	589b      	ldr	r3, [r3, r2]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2284      	movs	r2, #132	; 0x84
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7fc fd20 	bl	8001b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2288      	movs	r2, #136	; 0x88
 80050f0:	2124      	movs	r1, #36	; 0x24
 80050f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2101      	movs	r1, #1
 8005100:	438a      	bics	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	0018      	movs	r0, r3
 8005110:	f000 fa4e 	bl	80055b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	0018      	movs	r0, r3
 8005118:	f000 f8cc 	bl	80052b4 <UART_SetConfig>
 800511c:	0003      	movs	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e01c      	b.n	8005160 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	490d      	ldr	r1, [pc, #52]	; (8005168 <HAL_UART_Init+0xa8>)
 8005132:	400a      	ands	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	212a      	movs	r1, #42	; 0x2a
 8005142:	438a      	bics	r2, r1
 8005144:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2101      	movs	r1, #1
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f000 fadd 	bl	8005718 <UART_CheckIdleState>
 800515e:	0003      	movs	r3, r0
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}
 8005168:	ffffb7ff 	.word	0xffffb7ff

0800516c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	1dbb      	adds	r3, r7, #6
 800517a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2288      	movs	r2, #136	; 0x88
 8005180:	589b      	ldr	r3, [r3, r2]
 8005182:	2b20      	cmp	r3, #32
 8005184:	d000      	beq.n	8005188 <HAL_UART_Transmit+0x1c>
 8005186:	e090      	b.n	80052aa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_UART_Transmit+0x2a>
 800518e:	1dbb      	adds	r3, r7, #6
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e088      	b.n	80052ac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	015b      	lsls	r3, r3, #5
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d109      	bne.n	80051ba <HAL_UART_Transmit+0x4e>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d105      	bne.n	80051ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2201      	movs	r2, #1
 80051b2:	4013      	ands	r3, r2
 80051b4:	d001      	beq.n	80051ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e078      	b.n	80052ac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2290      	movs	r2, #144	; 0x90
 80051be:	2100      	movs	r1, #0
 80051c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2288      	movs	r2, #136	; 0x88
 80051c6:	2121      	movs	r1, #33	; 0x21
 80051c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ca:	f7fc ffdb 	bl	8002184 <HAL_GetTick>
 80051ce:	0003      	movs	r3, r0
 80051d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1dba      	adds	r2, r7, #6
 80051d6:	2154      	movs	r1, #84	; 0x54
 80051d8:	8812      	ldrh	r2, [r2, #0]
 80051da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1dba      	adds	r2, r7, #6
 80051e0:	2156      	movs	r1, #86	; 0x56
 80051e2:	8812      	ldrh	r2, [r2, #0]
 80051e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	015b      	lsls	r3, r3, #5
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d108      	bne.n	8005204 <HAL_UART_Transmit+0x98>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e003      	b.n	800520c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800520c:	e030      	b.n	8005270 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	0013      	movs	r3, r2
 8005218:	2200      	movs	r2, #0
 800521a:	2180      	movs	r1, #128	; 0x80
 800521c:	f000 fb26 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 8005220:	1e03      	subs	r3, r0, #0
 8005222:	d005      	beq.n	8005230 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2288      	movs	r2, #136	; 0x88
 8005228:	2120      	movs	r1, #32
 800522a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e03d      	b.n	80052ac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	001a      	movs	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	05d2      	lsls	r2, r2, #23
 8005242:	0dd2      	lsrs	r2, r2, #23
 8005244:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	3302      	adds	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e007      	b.n	800525e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	3301      	adds	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2256      	movs	r2, #86	; 0x56
 8005262:	5a9b      	ldrh	r3, [r3, r2]
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b299      	uxth	r1, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2256      	movs	r2, #86	; 0x56
 800526e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2256      	movs	r2, #86	; 0x56
 8005274:	5a9b      	ldrh	r3, [r3, r2]
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1c8      	bne.n	800520e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	0013      	movs	r3, r2
 8005286:	2200      	movs	r2, #0
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	f000 faef 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 800528e:	1e03      	subs	r3, r0, #0
 8005290:	d005      	beq.n	800529e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2288      	movs	r2, #136	; 0x88
 8005296:	2120      	movs	r1, #32
 8005298:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e006      	b.n	80052ac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2288      	movs	r2, #136	; 0x88
 80052a2:	2120      	movs	r1, #32
 80052a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
  }
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b008      	add	sp, #32
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052bc:	231e      	movs	r3, #30
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4aab      	ldr	r2, [pc, #684]	; (8005590 <UART_SetConfig+0x2dc>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	0019      	movs	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	4aa6      	ldr	r2, [pc, #664]	; (8005594 <UART_SetConfig+0x2e0>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4a9d      	ldr	r2, [pc, #628]	; (8005598 <UART_SetConfig+0x2e4>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	430a      	orrs	r2, r1
 800532e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	220f      	movs	r2, #15
 8005338:	4393      	bics	r3, r2
 800533a:	0019      	movs	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a93      	ldr	r2, [pc, #588]	; (800559c <UART_SetConfig+0x2e8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d127      	bne.n	80053a2 <UART_SetConfig+0xee>
 8005352:	4b93      	ldr	r3, [pc, #588]	; (80055a0 <UART_SetConfig+0x2ec>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	2203      	movs	r2, #3
 8005358:	4013      	ands	r3, r2
 800535a:	2b03      	cmp	r3, #3
 800535c:	d017      	beq.n	800538e <UART_SetConfig+0xda>
 800535e:	d81b      	bhi.n	8005398 <UART_SetConfig+0xe4>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d00a      	beq.n	800537a <UART_SetConfig+0xc6>
 8005364:	d818      	bhi.n	8005398 <UART_SetConfig+0xe4>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <UART_SetConfig+0xbc>
 800536a:	2b01      	cmp	r3, #1
 800536c:	d00a      	beq.n	8005384 <UART_SetConfig+0xd0>
 800536e:	e013      	b.n	8005398 <UART_SetConfig+0xe4>
 8005370:	231f      	movs	r3, #31
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e021      	b.n	80053be <UART_SetConfig+0x10a>
 800537a:	231f      	movs	r3, #31
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	2202      	movs	r2, #2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e01c      	b.n	80053be <UART_SetConfig+0x10a>
 8005384:	231f      	movs	r3, #31
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2204      	movs	r2, #4
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e017      	b.n	80053be <UART_SetConfig+0x10a>
 800538e:	231f      	movs	r3, #31
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2208      	movs	r2, #8
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e012      	b.n	80053be <UART_SetConfig+0x10a>
 8005398:	231f      	movs	r3, #31
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2210      	movs	r2, #16
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e00d      	b.n	80053be <UART_SetConfig+0x10a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a7f      	ldr	r2, [pc, #508]	; (80055a4 <UART_SetConfig+0x2f0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d104      	bne.n	80053b6 <UART_SetConfig+0x102>
 80053ac:	231f      	movs	r3, #31
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e003      	b.n	80053be <UART_SetConfig+0x10a>
 80053b6:	231f      	movs	r3, #31
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	2210      	movs	r2, #16
 80053bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d000      	beq.n	80053cc <UART_SetConfig+0x118>
 80053ca:	e06f      	b.n	80054ac <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80053cc:	231f      	movs	r3, #31
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d01f      	beq.n	8005416 <UART_SetConfig+0x162>
 80053d6:	dc22      	bgt.n	800541e <UART_SetConfig+0x16a>
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d017      	beq.n	800540c <UART_SetConfig+0x158>
 80053dc:	dc1f      	bgt.n	800541e <UART_SetConfig+0x16a>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <UART_SetConfig+0x134>
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d005      	beq.n	80053f2 <UART_SetConfig+0x13e>
 80053e6:	e01a      	b.n	800541e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e8:	f7ff f93c 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 80053ec:	0003      	movs	r3, r0
 80053ee:	61bb      	str	r3, [r7, #24]
        break;
 80053f0:	e01c      	b.n	800542c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80053f2:	4b6b      	ldr	r3, [pc, #428]	; (80055a0 <UART_SetConfig+0x2ec>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2207      	movs	r2, #7
 80053fa:	4013      	ands	r3, r2
 80053fc:	3301      	adds	r3, #1
 80053fe:	0019      	movs	r1, r3
 8005400:	4869      	ldr	r0, [pc, #420]	; (80055a8 <UART_SetConfig+0x2f4>)
 8005402:	f7fa fe93 	bl	800012c <__udivsi3>
 8005406:	0003      	movs	r3, r0
 8005408:	61bb      	str	r3, [r7, #24]
        break;
 800540a:	e00f      	b.n	800542c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540c:	f7ff f8de 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8005410:	0003      	movs	r3, r0
 8005412:	61bb      	str	r3, [r7, #24]
        break;
 8005414:	e00a      	b.n	800542c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	61bb      	str	r3, [r7, #24]
        break;
 800541c:	e006      	b.n	800542c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005422:	231e      	movs	r3, #30
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
        break;
 800542a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d100      	bne.n	8005434 <UART_SetConfig+0x180>
 8005432:	e097      	b.n	8005564 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005438:	4b5c      	ldr	r3, [pc, #368]	; (80055ac <UART_SetConfig+0x2f8>)
 800543a:	0052      	lsls	r2, r2, #1
 800543c:	5ad3      	ldrh	r3, [r2, r3]
 800543e:	0019      	movs	r1, r3
 8005440:	69b8      	ldr	r0, [r7, #24]
 8005442:	f7fa fe73 	bl	800012c <__udivsi3>
 8005446:	0003      	movs	r3, r0
 8005448:	005a      	lsls	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	18d2      	adds	r2, r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	0019      	movs	r1, r3
 8005458:	0010      	movs	r0, r2
 800545a:	f7fa fe67 	bl	800012c <__udivsi3>
 800545e:	0003      	movs	r3, r0
 8005460:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	2b0f      	cmp	r3, #15
 8005466:	d91c      	bls.n	80054a2 <UART_SetConfig+0x1ee>
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	025b      	lsls	r3, r3, #9
 800546e:	429a      	cmp	r2, r3
 8005470:	d217      	bcs.n	80054a2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	b29a      	uxth	r2, r3
 8005476:	200e      	movs	r0, #14
 8005478:	183b      	adds	r3, r7, r0
 800547a:	210f      	movs	r1, #15
 800547c:	438a      	bics	r2, r1
 800547e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	b29b      	uxth	r3, r3
 8005486:	2207      	movs	r2, #7
 8005488:	4013      	ands	r3, r2
 800548a:	b299      	uxth	r1, r3
 800548c:	183b      	adds	r3, r7, r0
 800548e:	183a      	adds	r2, r7, r0
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	183a      	adds	r2, r7, r0
 800549c:	8812      	ldrh	r2, [r2, #0]
 800549e:	60da      	str	r2, [r3, #12]
 80054a0:	e060      	b.n	8005564 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80054a2:	231e      	movs	r3, #30
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e05b      	b.n	8005564 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ac:	231f      	movs	r3, #31
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d01f      	beq.n	80054f6 <UART_SetConfig+0x242>
 80054b6:	dc22      	bgt.n	80054fe <UART_SetConfig+0x24a>
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d017      	beq.n	80054ec <UART_SetConfig+0x238>
 80054bc:	dc1f      	bgt.n	80054fe <UART_SetConfig+0x24a>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <UART_SetConfig+0x214>
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d005      	beq.n	80054d2 <UART_SetConfig+0x21e>
 80054c6:	e01a      	b.n	80054fe <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7ff f8cc 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 80054cc:	0003      	movs	r3, r0
 80054ce:	61bb      	str	r3, [r7, #24]
        break;
 80054d0:	e01c      	b.n	800550c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80054d2:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <UART_SetConfig+0x2ec>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2207      	movs	r2, #7
 80054da:	4013      	ands	r3, r2
 80054dc:	3301      	adds	r3, #1
 80054de:	0019      	movs	r1, r3
 80054e0:	4831      	ldr	r0, [pc, #196]	; (80055a8 <UART_SetConfig+0x2f4>)
 80054e2:	f7fa fe23 	bl	800012c <__udivsi3>
 80054e6:	0003      	movs	r3, r0
 80054e8:	61bb      	str	r3, [r7, #24]
        break;
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ec:	f7ff f86e 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 80054f0:	0003      	movs	r3, r0
 80054f2:	61bb      	str	r3, [r7, #24]
        break;
 80054f4:	e00a      	b.n	800550c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	61bb      	str	r3, [r7, #24]
        break;
 80054fc:	e006      	b.n	800550c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005502:	231e      	movs	r3, #30
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
        break;
 800550a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d028      	beq.n	8005564 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005516:	4b25      	ldr	r3, [pc, #148]	; (80055ac <UART_SetConfig+0x2f8>)
 8005518:	0052      	lsls	r2, r2, #1
 800551a:	5ad3      	ldrh	r3, [r2, r3]
 800551c:	0019      	movs	r1, r3
 800551e:	69b8      	ldr	r0, [r7, #24]
 8005520:	f7fa fe04 	bl	800012c <__udivsi3>
 8005524:	0003      	movs	r3, r0
 8005526:	001a      	movs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	18d2      	adds	r2, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0019      	movs	r1, r3
 8005536:	0010      	movs	r0, r2
 8005538:	f7fa fdf8 	bl	800012c <__udivsi3>
 800553c:	0003      	movs	r3, r0
 800553e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	d90a      	bls.n	800555c <UART_SetConfig+0x2a8>
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	025b      	lsls	r3, r3, #9
 800554c:	429a      	cmp	r2, r3
 800554e:	d205      	bcs.n	800555c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	e003      	b.n	8005564 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800555c:	231e      	movs	r3, #30
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	2201      	movs	r2, #1
 8005562:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	226a      	movs	r2, #106	; 0x6a
 8005568:	2101      	movs	r1, #1
 800556a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2268      	movs	r2, #104	; 0x68
 8005570:	2101      	movs	r1, #1
 8005572:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005580:	231e      	movs	r3, #30
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	781b      	ldrb	r3, [r3, #0]
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b008      	add	sp, #32
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	cfff69f3 	.word	0xcfff69f3
 8005594:	ffffcfff 	.word	0xffffcfff
 8005598:	11fff4ff 	.word	0x11fff4ff
 800559c:	40013800 	.word	0x40013800
 80055a0:	40021000 	.word	0x40021000
 80055a4:	40004400 	.word	0x40004400
 80055a8:	02dc6c00 	.word	0x02dc6c00
 80055ac:	080064dc 	.word	0x080064dc

080055b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	2208      	movs	r2, #8
 80055be:	4013      	ands	r3, r2
 80055c0:	d00b      	beq.n	80055da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a4a      	ldr	r2, [pc, #296]	; (80056f4 <UART_AdvFeatureConfig+0x144>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	0019      	movs	r1, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	2201      	movs	r2, #1
 80055e0:	4013      	ands	r3, r2
 80055e2:	d00b      	beq.n	80055fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4a43      	ldr	r2, [pc, #268]	; (80056f8 <UART_AdvFeatureConfig+0x148>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	0019      	movs	r1, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	2202      	movs	r2, #2
 8005602:	4013      	ands	r3, r2
 8005604:	d00b      	beq.n	800561e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <UART_AdvFeatureConfig+0x14c>)
 800560e:	4013      	ands	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	d00b      	beq.n	8005640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4a34      	ldr	r2, [pc, #208]	; (8005700 <UART_AdvFeatureConfig+0x150>)
 8005630:	4013      	ands	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	2210      	movs	r2, #16
 8005646:	4013      	ands	r3, r2
 8005648:	d00b      	beq.n	8005662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	4a2c      	ldr	r2, [pc, #176]	; (8005704 <UART_AdvFeatureConfig+0x154>)
 8005652:	4013      	ands	r3, r2
 8005654:	0019      	movs	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	2220      	movs	r2, #32
 8005668:	4013      	ands	r3, r2
 800566a:	d00b      	beq.n	8005684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4a25      	ldr	r2, [pc, #148]	; (8005708 <UART_AdvFeatureConfig+0x158>)
 8005674:	4013      	ands	r3, r2
 8005676:	0019      	movs	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	2240      	movs	r2, #64	; 0x40
 800568a:	4013      	ands	r3, r2
 800568c:	d01d      	beq.n	80056ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a1d      	ldr	r2, [pc, #116]	; (800570c <UART_AdvFeatureConfig+0x15c>)
 8005696:	4013      	ands	r3, r2
 8005698:	0019      	movs	r1, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	035b      	lsls	r3, r3, #13
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d10b      	bne.n	80056ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <UART_AdvFeatureConfig+0x160>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	2280      	movs	r2, #128	; 0x80
 80056d0:	4013      	ands	r3, r2
 80056d2:	d00b      	beq.n	80056ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <UART_AdvFeatureConfig+0x164>)
 80056dc:	4013      	ands	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	ffff7fff 	.word	0xffff7fff
 80056f8:	fffdffff 	.word	0xfffdffff
 80056fc:	fffeffff 	.word	0xfffeffff
 8005700:	fffbffff 	.word	0xfffbffff
 8005704:	ffffefff 	.word	0xffffefff
 8005708:	ffffdfff 	.word	0xffffdfff
 800570c:	ffefffff 	.word	0xffefffff
 8005710:	ff9fffff 	.word	0xff9fffff
 8005714:	fff7ffff 	.word	0xfff7ffff

08005718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b092      	sub	sp, #72	; 0x48
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2290      	movs	r2, #144	; 0x90
 8005724:	2100      	movs	r1, #0
 8005726:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005728:	f7fc fd2c 	bl	8002184 <HAL_GetTick>
 800572c:	0003      	movs	r3, r0
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2208      	movs	r2, #8
 8005738:	4013      	ands	r3, r2
 800573a:	2b08      	cmp	r3, #8
 800573c:	d12d      	bne.n	800579a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	0391      	lsls	r1, r2, #14
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4a47      	ldr	r2, [pc, #284]	; (8005864 <UART_CheckIdleState+0x14c>)
 8005748:	9200      	str	r2, [sp, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	f000 f88e 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 8005750:	1e03      	subs	r3, r0, #0
 8005752:	d022      	beq.n	800579a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005754:	f3ef 8310 	mrs	r3, PRIMASK
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
 800575e:	2301      	movs	r3, #1
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	438a      	bics	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	f383 8810 	msr	PRIMASK, r3
}
 8005784:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2288      	movs	r2, #136	; 0x88
 800578a:	2120      	movs	r1, #32
 800578c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2284      	movs	r2, #132	; 0x84
 8005792:	2100      	movs	r1, #0
 8005794:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e060      	b.n	800585c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2204      	movs	r2, #4
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d146      	bne.n	8005836 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	03d1      	lsls	r1, r2, #15
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <UART_CheckIdleState+0x14c>)
 80057b2:	9200      	str	r2, [sp, #0]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f000 f859 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 80057ba:	1e03      	subs	r3, r0, #0
 80057bc:	d03b      	beq.n	8005836 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057be:	f3ef 8310 	mrs	r3, PRIMASK
 80057c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
 80057c8:	2301      	movs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4922      	ldr	r1, [pc, #136]	; (8005868 <UART_CheckIdleState+0x150>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80057f6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	633b      	str	r3, [r7, #48]	; 0x30
 80057fa:	2301      	movs	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	438a      	bics	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	228c      	movs	r2, #140	; 0x8c
 8005826:	2120      	movs	r1, #32
 8005828:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2284      	movs	r2, #132	; 0x84
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e012      	b.n	800585c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2288      	movs	r2, #136	; 0x88
 800583a:	2120      	movs	r1, #32
 800583c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	228c      	movs	r2, #140	; 0x8c
 8005842:	2120      	movs	r1, #32
 8005844:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2284      	movs	r2, #132	; 0x84
 8005856:	2100      	movs	r1, #0
 8005858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b010      	add	sp, #64	; 0x40
 8005862:	bd80      	pop	{r7, pc}
 8005864:	01ffffff 	.word	0x01ffffff
 8005868:	fffffedf 	.word	0xfffffedf

0800586c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	1dfb      	adds	r3, r7, #7
 800587a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587c:	e04b      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3301      	adds	r3, #1
 8005882:	d048      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005884:	f7fc fc7e 	bl	8002184 <HAL_GetTick>
 8005888:	0002      	movs	r2, r0
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e04b      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2204      	movs	r2, #4
 80058a6:	4013      	ands	r3, r2
 80058a8:	d035      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2208      	movs	r2, #8
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d111      	bne.n	80058dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2208      	movs	r2, #8
 80058be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 f83c 	bl	8005940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2290      	movs	r2, #144	; 0x90
 80058cc:	2108      	movs	r1, #8
 80058ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2284      	movs	r2, #132	; 0x84
 80058d4:	2100      	movs	r1, #0
 80058d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e02c      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	401a      	ands	r2, r3
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d112      	bne.n	8005916 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	0112      	lsls	r2, r2, #4
 80058f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f000 f81f 	bl	8005940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2290      	movs	r2, #144	; 0x90
 8005906:	2120      	movs	r1, #32
 8005908:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2284      	movs	r2, #132	; 0x84
 800590e:	2100      	movs	r1, #0
 8005910:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	425a      	negs	r2, r3
 8005926:	4153      	adcs	r3, r2
 8005928:	b2db      	uxtb	r3, r3
 800592a:	001a      	movs	r2, r3
 800592c:	1dfb      	adds	r3, r7, #7
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d0a4      	beq.n	800587e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	0018      	movs	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	b004      	add	sp, #16
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	; 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005948:	f3ef 8310 	mrs	r3, PRIMASK
 800594c:	617b      	str	r3, [r7, #20]
  return(result);
 800594e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	2301      	movs	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4926      	ldr	r1, [pc, #152]	; (8005a04 <UART_EndRxTransfer+0xc4>)
 800596a:	400a      	ands	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800597a:	f3ef 8310 	mrs	r3, PRIMASK
 800597e:	623b      	str	r3, [r7, #32]
  return(result);
 8005980:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
 8005984:	2301      	movs	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f383 8810 	msr	PRIMASK, r3
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	491b      	ldr	r1, [pc, #108]	; (8005a08 <UART_EndRxTransfer+0xc8>)
 800599c:	400a      	ands	r2, r1
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f383 8810 	msr	PRIMASK, r3
}
 80059aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d118      	bne.n	80059e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059b4:	f3ef 8310 	mrs	r3, PRIMASK
 80059b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059be:	2301      	movs	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f383 8810 	msr	PRIMASK, r3
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2110      	movs	r1, #16
 80059d6:	438a      	bics	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f383 8810 	msr	PRIMASK, r3
}
 80059e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	228c      	movs	r2, #140	; 0x8c
 80059ea:	2120      	movs	r1, #32
 80059ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b00e      	add	sp, #56	; 0x38
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	fffffedf 	.word	0xfffffedf
 8005a08:	effffffe 	.word	0xeffffffe

08005a0c <sniprintf>:
 8005a0c:	b40c      	push	{r2, r3}
 8005a0e:	b530      	push	{r4, r5, lr}
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <sniprintf+0x64>)
 8005a12:	000c      	movs	r4, r1
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	b09d      	sub	sp, #116	; 0x74
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	da08      	bge.n	8005a2e <sniprintf+0x22>
 8005a1c:	238b      	movs	r3, #139	; 0x8b
 8005a1e:	2001      	movs	r0, #1
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	4240      	negs	r0, r0
 8005a24:	b01d      	add	sp, #116	; 0x74
 8005a26:	bc30      	pop	{r4, r5}
 8005a28:	bc08      	pop	{r3}
 8005a2a:	b002      	add	sp, #8
 8005a2c:	4718      	bx	r3
 8005a2e:	2382      	movs	r3, #130	; 0x82
 8005a30:	466a      	mov	r2, sp
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	8293      	strh	r3, [r2, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9002      	str	r0, [sp, #8]
 8005a3a:	9006      	str	r0, [sp, #24]
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d000      	beq.n	8005a42 <sniprintf+0x36>
 8005a40:	1e4b      	subs	r3, r1, #1
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	9307      	str	r3, [sp, #28]
 8005a46:	2301      	movs	r3, #1
 8005a48:	466a      	mov	r2, sp
 8005a4a:	425b      	negs	r3, r3
 8005a4c:	82d3      	strh	r3, [r2, #22]
 8005a4e:	0028      	movs	r0, r5
 8005a50:	ab21      	add	r3, sp, #132	; 0x84
 8005a52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a54:	a902      	add	r1, sp, #8
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	f000 f9a0 	bl	8005d9c <_svfiprintf_r>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	da01      	bge.n	8005a64 <sniprintf+0x58>
 8005a60:	238b      	movs	r3, #139	; 0x8b
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	d0dd      	beq.n	8005a24 <sniprintf+0x18>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	9b02      	ldr	r3, [sp, #8]
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	e7d9      	b.n	8005a24 <sniprintf+0x18>
 8005a70:	200000cc 	.word	0x200000cc

08005a74 <memset>:
 8005a74:	0003      	movs	r3, r0
 8005a76:	1882      	adds	r2, r0, r2
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d100      	bne.n	8005a7e <memset+0xa>
 8005a7c:	4770      	bx	lr
 8005a7e:	7019      	strb	r1, [r3, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	e7f9      	b.n	8005a78 <memset+0x4>

08005a84 <__errno>:
 8005a84:	4b01      	ldr	r3, [pc, #4]	; (8005a8c <__errno+0x8>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	200000cc 	.word	0x200000cc

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	2600      	movs	r6, #0
 8005a94:	4c0c      	ldr	r4, [pc, #48]	; (8005ac8 <__libc_init_array+0x38>)
 8005a96:	4d0d      	ldr	r5, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a98:	1b64      	subs	r4, r4, r5
 8005a9a:	10a4      	asrs	r4, r4, #2
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	f000 fc6d 	bl	8006380 <_init>
 8005aa6:	4c0a      	ldr	r4, [pc, #40]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa8:	4d0a      	ldr	r5, [pc, #40]	; (8005ad4 <__libc_init_array+0x44>)
 8005aaa:	1b64      	subs	r4, r4, r5
 8005aac:	10a4      	asrs	r4, r4, #2
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	00b3      	lsls	r3, r6, #2
 8005ab6:	58eb      	ldr	r3, [r5, r3]
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	00b3      	lsls	r3, r6, #2
 8005ac0:	58eb      	ldr	r3, [r5, r3]
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08006528 	.word	0x08006528
 8005acc:	08006528 	.word	0x08006528
 8005ad0:	0800652c 	.word	0x0800652c
 8005ad4:	08006528 	.word	0x08006528

08005ad8 <__retarget_lock_acquire_recursive>:
 8005ad8:	4770      	bx	lr

08005ada <__retarget_lock_release_recursive>:
 8005ada:	4770      	bx	lr

08005adc <_free_r>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	0005      	movs	r5, r0
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d010      	beq.n	8005b06 <_free_r+0x2a>
 8005ae4:	1f0c      	subs	r4, r1, #4
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da00      	bge.n	8005aee <_free_r+0x12>
 8005aec:	18e4      	adds	r4, r4, r3
 8005aee:	0028      	movs	r0, r5
 8005af0:	f000 f8e2 	bl	8005cb8 <__malloc_lock>
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <_free_r+0x90>)
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <_free_r+0x2c>
 8005afc:	6063      	str	r3, [r4, #4]
 8005afe:	6014      	str	r4, [r2, #0]
 8005b00:	0028      	movs	r0, r5
 8005b02:	f000 f8e1 	bl	8005cc8 <__malloc_unlock>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x42>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	1821      	adds	r1, r4, r0
 8005b10:	428b      	cmp	r3, r1
 8005b12:	d1f3      	bne.n	8005afc <_free_r+0x20>
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	1809      	adds	r1, r1, r0
 8005b1a:	6021      	str	r1, [r4, #0]
 8005b1c:	e7ee      	b.n	8005afc <_free_r+0x20>
 8005b1e:	001a      	movs	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <_free_r+0x4e>
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	d9f9      	bls.n	8005b1e <_free_r+0x42>
 8005b2a:	6811      	ldr	r1, [r2, #0]
 8005b2c:	1850      	adds	r0, r2, r1
 8005b2e:	42a0      	cmp	r0, r4
 8005b30:	d10b      	bne.n	8005b4a <_free_r+0x6e>
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	1809      	adds	r1, r1, r0
 8005b36:	1850      	adds	r0, r2, r1
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	4283      	cmp	r3, r0
 8005b3c:	d1e0      	bne.n	8005b00 <_free_r+0x24>
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	1841      	adds	r1, r0, r1
 8005b44:	6011      	str	r1, [r2, #0]
 8005b46:	6053      	str	r3, [r2, #4]
 8005b48:	e7da      	b.n	8005b00 <_free_r+0x24>
 8005b4a:	42a0      	cmp	r0, r4
 8005b4c:	d902      	bls.n	8005b54 <_free_r+0x78>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	e7d5      	b.n	8005b00 <_free_r+0x24>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	1821      	adds	r1, r4, r0
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d103      	bne.n	8005b64 <_free_r+0x88>
 8005b5c:	6819      	ldr	r1, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	1809      	adds	r1, r1, r0
 8005b62:	6021      	str	r1, [r4, #0]
 8005b64:	6063      	str	r3, [r4, #4]
 8005b66:	6054      	str	r4, [r2, #4]
 8005b68:	e7ca      	b.n	8005b00 <_free_r+0x24>
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	20000428 	.word	0x20000428

08005b70 <sbrk_aligned>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4e0f      	ldr	r6, [pc, #60]	; (8005bb0 <sbrk_aligned+0x40>)
 8005b74:	000d      	movs	r5, r1
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	0004      	movs	r4, r0
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	d102      	bne.n	8005b84 <sbrk_aligned+0x14>
 8005b7e:	f000 fba1 	bl	80062c4 <_sbrk_r>
 8005b82:	6030      	str	r0, [r6, #0]
 8005b84:	0029      	movs	r1, r5
 8005b86:	0020      	movs	r0, r4
 8005b88:	f000 fb9c 	bl	80062c4 <_sbrk_r>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d00a      	beq.n	8005ba6 <sbrk_aligned+0x36>
 8005b90:	2303      	movs	r3, #3
 8005b92:	1cc5      	adds	r5, r0, #3
 8005b94:	439d      	bics	r5, r3
 8005b96:	42a8      	cmp	r0, r5
 8005b98:	d007      	beq.n	8005baa <sbrk_aligned+0x3a>
 8005b9a:	1a29      	subs	r1, r5, r0
 8005b9c:	0020      	movs	r0, r4
 8005b9e:	f000 fb91 	bl	80062c4 <_sbrk_r>
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d101      	bne.n	8005baa <sbrk_aligned+0x3a>
 8005ba6:	2501      	movs	r5, #1
 8005ba8:	426d      	negs	r5, r5
 8005baa:	0028      	movs	r0, r5
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	2000042c 	.word	0x2000042c

08005bb4 <_malloc_r>:
 8005bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	1ccb      	adds	r3, r1, #3
 8005bba:	4393      	bics	r3, r2
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	0006      	movs	r6, r0
 8005bc0:	001f      	movs	r7, r3
 8005bc2:	2b0c      	cmp	r3, #12
 8005bc4:	d238      	bcs.n	8005c38 <_malloc_r+0x84>
 8005bc6:	270c      	movs	r7, #12
 8005bc8:	42b9      	cmp	r1, r7
 8005bca:	d837      	bhi.n	8005c3c <_malloc_r+0x88>
 8005bcc:	0030      	movs	r0, r6
 8005bce:	f000 f873 	bl	8005cb8 <__malloc_lock>
 8005bd2:	4b38      	ldr	r3, [pc, #224]	; (8005cb4 <_malloc_r+0x100>)
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	001c      	movs	r4, r3
 8005bda:	2c00      	cmp	r4, #0
 8005bdc:	d133      	bne.n	8005c46 <_malloc_r+0x92>
 8005bde:	0039      	movs	r1, r7
 8005be0:	0030      	movs	r0, r6
 8005be2:	f7ff ffc5 	bl	8005b70 <sbrk_aligned>
 8005be6:	0004      	movs	r4, r0
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d15e      	bne.n	8005caa <_malloc_r+0xf6>
 8005bec:	9b00      	ldr	r3, [sp, #0]
 8005bee:	681c      	ldr	r4, [r3, #0]
 8005bf0:	0025      	movs	r5, r4
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	d14e      	bne.n	8005c94 <_malloc_r+0xe0>
 8005bf6:	2c00      	cmp	r4, #0
 8005bf8:	d051      	beq.n	8005c9e <_malloc_r+0xea>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	0029      	movs	r1, r5
 8005bfe:	18e3      	adds	r3, r4, r3
 8005c00:	0030      	movs	r0, r6
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	f000 fb5e 	bl	80062c4 <_sbrk_r>
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	4283      	cmp	r3, r0
 8005c0c:	d147      	bne.n	8005c9e <_malloc_r+0xea>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	0030      	movs	r0, r6
 8005c12:	1aff      	subs	r7, r7, r3
 8005c14:	0039      	movs	r1, r7
 8005c16:	f7ff ffab 	bl	8005b70 <sbrk_aligned>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d03f      	beq.n	8005c9e <_malloc_r+0xea>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	19db      	adds	r3, r3, r7
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d040      	beq.n	8005cae <_malloc_r+0xfa>
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	42a2      	cmp	r2, r4
 8005c30:	d133      	bne.n	8005c9a <_malloc_r+0xe6>
 8005c32:	2200      	movs	r2, #0
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	e014      	b.n	8005c62 <_malloc_r+0xae>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dac5      	bge.n	8005bc8 <_malloc_r+0x14>
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	2500      	movs	r5, #0
 8005c40:	6033      	str	r3, [r6, #0]
 8005c42:	0028      	movs	r0, r5
 8005c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	1bc9      	subs	r1, r1, r7
 8005c4a:	d420      	bmi.n	8005c8e <_malloc_r+0xda>
 8005c4c:	290b      	cmp	r1, #11
 8005c4e:	d918      	bls.n	8005c82 <_malloc_r+0xce>
 8005c50:	19e2      	adds	r2, r4, r7
 8005c52:	6027      	str	r7, [r4, #0]
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d112      	bne.n	8005c7e <_malloc_r+0xca>
 8005c58:	9b00      	ldr	r3, [sp, #0]
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	6011      	str	r1, [r2, #0]
 8005c60:	6053      	str	r3, [r2, #4]
 8005c62:	0030      	movs	r0, r6
 8005c64:	0025      	movs	r5, r4
 8005c66:	f000 f82f 	bl	8005cc8 <__malloc_unlock>
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	350b      	adds	r5, #11
 8005c6e:	1d23      	adds	r3, r4, #4
 8005c70:	4395      	bics	r5, r2
 8005c72:	1aea      	subs	r2, r5, r3
 8005c74:	429d      	cmp	r5, r3
 8005c76:	d0e4      	beq.n	8005c42 <_malloc_r+0x8e>
 8005c78:	1b5b      	subs	r3, r3, r5
 8005c7a:	50a3      	str	r3, [r4, r2]
 8005c7c:	e7e1      	b.n	8005c42 <_malloc_r+0x8e>
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	e7ec      	b.n	8005c5c <_malloc_r+0xa8>
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	d1d5      	bne.n	8005c34 <_malloc_r+0x80>
 8005c88:	9b00      	ldr	r3, [sp, #0]
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e7e9      	b.n	8005c62 <_malloc_r+0xae>
 8005c8e:	0023      	movs	r3, r4
 8005c90:	6864      	ldr	r4, [r4, #4]
 8005c92:	e7a2      	b.n	8005bda <_malloc_r+0x26>
 8005c94:	002c      	movs	r4, r5
 8005c96:	686d      	ldr	r5, [r5, #4]
 8005c98:	e7ab      	b.n	8005bf2 <_malloc_r+0x3e>
 8005c9a:	0013      	movs	r3, r2
 8005c9c:	e7c4      	b.n	8005c28 <_malloc_r+0x74>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	0030      	movs	r0, r6
 8005ca2:	6033      	str	r3, [r6, #0]
 8005ca4:	f000 f810 	bl	8005cc8 <__malloc_unlock>
 8005ca8:	e7cb      	b.n	8005c42 <_malloc_r+0x8e>
 8005caa:	6027      	str	r7, [r4, #0]
 8005cac:	e7d9      	b.n	8005c62 <_malloc_r+0xae>
 8005cae:	605b      	str	r3, [r3, #4]
 8005cb0:	deff      	udf	#255	; 0xff
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	20000428 	.word	0x20000428

08005cb8 <__malloc_lock>:
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	4802      	ldr	r0, [pc, #8]	; (8005cc4 <__malloc_lock+0xc>)
 8005cbc:	f7ff ff0c 	bl	8005ad8 <__retarget_lock_acquire_recursive>
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	20000424 	.word	0x20000424

08005cc8 <__malloc_unlock>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	4802      	ldr	r0, [pc, #8]	; (8005cd4 <__malloc_unlock+0xc>)
 8005ccc:	f7ff ff05 	bl	8005ada <__retarget_lock_release_recursive>
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	20000424 	.word	0x20000424

08005cd8 <__ssputs_r>:
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	9203      	str	r2, [sp, #12]
 8005ce0:	688e      	ldr	r6, [r1, #8]
 8005ce2:	9a01      	ldr	r2, [sp, #4]
 8005ce4:	0007      	movs	r7, r0
 8005ce6:	000c      	movs	r4, r1
 8005ce8:	680b      	ldr	r3, [r1, #0]
 8005cea:	4296      	cmp	r6, r2
 8005cec:	d831      	bhi.n	8005d52 <__ssputs_r+0x7a>
 8005cee:	898a      	ldrh	r2, [r1, #12]
 8005cf0:	2190      	movs	r1, #144	; 0x90
 8005cf2:	00c9      	lsls	r1, r1, #3
 8005cf4:	420a      	tst	r2, r1
 8005cf6:	d029      	beq.n	8005d4c <__ssputs_r+0x74>
 8005cf8:	2003      	movs	r0, #3
 8005cfa:	6921      	ldr	r1, [r4, #16]
 8005cfc:	1a5b      	subs	r3, r3, r1
 8005cfe:	9302      	str	r3, [sp, #8]
 8005d00:	6963      	ldr	r3, [r4, #20]
 8005d02:	4343      	muls	r3, r0
 8005d04:	0fdd      	lsrs	r5, r3, #31
 8005d06:	18ed      	adds	r5, r5, r3
 8005d08:	9b01      	ldr	r3, [sp, #4]
 8005d0a:	9802      	ldr	r0, [sp, #8]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	181b      	adds	r3, r3, r0
 8005d10:	106d      	asrs	r5, r5, #1
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	d900      	bls.n	8005d18 <__ssputs_r+0x40>
 8005d16:	001d      	movs	r5, r3
 8005d18:	0552      	lsls	r2, r2, #21
 8005d1a:	d529      	bpl.n	8005d70 <__ssputs_r+0x98>
 8005d1c:	0029      	movs	r1, r5
 8005d1e:	0038      	movs	r0, r7
 8005d20:	f7ff ff48 	bl	8005bb4 <_malloc_r>
 8005d24:	1e06      	subs	r6, r0, #0
 8005d26:	d02d      	beq.n	8005d84 <__ssputs_r+0xac>
 8005d28:	9a02      	ldr	r2, [sp, #8]
 8005d2a:	6921      	ldr	r1, [r4, #16]
 8005d2c:	f000 fae7 	bl	80062fe <memcpy>
 8005d30:	89a2      	ldrh	r2, [r4, #12]
 8005d32:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <__ssputs_r+0xc0>)
 8005d34:	401a      	ands	r2, r3
 8005d36:	2380      	movs	r3, #128	; 0x80
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	9b02      	ldr	r3, [sp, #8]
 8005d3e:	6126      	str	r6, [r4, #16]
 8005d40:	18f6      	adds	r6, r6, r3
 8005d42:	6026      	str	r6, [r4, #0]
 8005d44:	6165      	str	r5, [r4, #20]
 8005d46:	9e01      	ldr	r6, [sp, #4]
 8005d48:	1aed      	subs	r5, r5, r3
 8005d4a:	60a5      	str	r5, [r4, #8]
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	d900      	bls.n	8005d54 <__ssputs_r+0x7c>
 8005d52:	9e01      	ldr	r6, [sp, #4]
 8005d54:	0032      	movs	r2, r6
 8005d56:	9903      	ldr	r1, [sp, #12]
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	f000 fa9f 	bl	800629c <memmove>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	1b9b      	subs	r3, r3, r6
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	199b      	adds	r3, r3, r6
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	b005      	add	sp, #20
 8005d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d70:	002a      	movs	r2, r5
 8005d72:	0038      	movs	r0, r7
 8005d74:	f000 facc 	bl	8006310 <_realloc_r>
 8005d78:	1e06      	subs	r6, r0, #0
 8005d7a:	d1df      	bne.n	8005d3c <__ssputs_r+0x64>
 8005d7c:	0038      	movs	r0, r7
 8005d7e:	6921      	ldr	r1, [r4, #16]
 8005d80:	f7ff feac 	bl	8005adc <_free_r>
 8005d84:	230c      	movs	r3, #12
 8005d86:	2001      	movs	r0, #1
 8005d88:	603b      	str	r3, [r7, #0]
 8005d8a:	89a2      	ldrh	r2, [r4, #12]
 8005d8c:	3334      	adds	r3, #52	; 0x34
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	4240      	negs	r0, r0
 8005d94:	e7ea      	b.n	8005d6c <__ssputs_r+0x94>
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	fffffb7f 	.word	0xfffffb7f

08005d9c <_svfiprintf_r>:
 8005d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9e:	b0a1      	sub	sp, #132	; 0x84
 8005da0:	9003      	str	r0, [sp, #12]
 8005da2:	001d      	movs	r5, r3
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	000f      	movs	r7, r1
 8005da8:	0016      	movs	r6, r2
 8005daa:	061b      	lsls	r3, r3, #24
 8005dac:	d511      	bpl.n	8005dd2 <_svfiprintf_r+0x36>
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10e      	bne.n	8005dd2 <_svfiprintf_r+0x36>
 8005db4:	2140      	movs	r1, #64	; 0x40
 8005db6:	f7ff fefd 	bl	8005bb4 <_malloc_r>
 8005dba:	6038      	str	r0, [r7, #0]
 8005dbc:	6138      	str	r0, [r7, #16]
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d105      	bne.n	8005dce <_svfiprintf_r+0x32>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	9a03      	ldr	r2, [sp, #12]
 8005dc6:	3801      	subs	r0, #1
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	b021      	add	sp, #132	; 0x84
 8005dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dce:	2340      	movs	r3, #64	; 0x40
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	ac08      	add	r4, sp, #32
 8005dd6:	6163      	str	r3, [r4, #20]
 8005dd8:	3320      	adds	r3, #32
 8005dda:	7663      	strb	r3, [r4, #25]
 8005ddc:	3310      	adds	r3, #16
 8005dde:	76a3      	strb	r3, [r4, #26]
 8005de0:	9507      	str	r5, [sp, #28]
 8005de2:	0035      	movs	r5, r6
 8005de4:	782b      	ldrb	r3, [r5, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <_svfiprintf_r+0x52>
 8005dea:	2b25      	cmp	r3, #37	; 0x25
 8005dec:	d148      	bne.n	8005e80 <_svfiprintf_r+0xe4>
 8005dee:	1bab      	subs	r3, r5, r6
 8005df0:	9305      	str	r3, [sp, #20]
 8005df2:	42b5      	cmp	r5, r6
 8005df4:	d00b      	beq.n	8005e0e <_svfiprintf_r+0x72>
 8005df6:	0032      	movs	r2, r6
 8005df8:	0039      	movs	r1, r7
 8005dfa:	9803      	ldr	r0, [sp, #12]
 8005dfc:	f7ff ff6c 	bl	8005cd8 <__ssputs_r>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d100      	bne.n	8005e06 <_svfiprintf_r+0x6a>
 8005e04:	e0af      	b.n	8005f66 <_svfiprintf_r+0x1ca>
 8005e06:	6963      	ldr	r3, [r4, #20]
 8005e08:	9a05      	ldr	r2, [sp, #20]
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	6163      	str	r3, [r4, #20]
 8005e0e:	782b      	ldrb	r3, [r5, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d100      	bne.n	8005e16 <_svfiprintf_r+0x7a>
 8005e14:	e0a7      	b.n	8005f66 <_svfiprintf_r+0x1ca>
 8005e16:	2201      	movs	r2, #1
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4252      	negs	r2, r2
 8005e1c:	6062      	str	r2, [r4, #4]
 8005e1e:	a904      	add	r1, sp, #16
 8005e20:	3254      	adds	r2, #84	; 0x54
 8005e22:	1852      	adds	r2, r2, r1
 8005e24:	1c6e      	adds	r6, r5, #1
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	60e3      	str	r3, [r4, #12]
 8005e2a:	60a3      	str	r3, [r4, #8]
 8005e2c:	7013      	strb	r3, [r2, #0]
 8005e2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e30:	4b55      	ldr	r3, [pc, #340]	; (8005f88 <_svfiprintf_r+0x1ec>)
 8005e32:	2205      	movs	r2, #5
 8005e34:	0018      	movs	r0, r3
 8005e36:	7831      	ldrb	r1, [r6, #0]
 8005e38:	9305      	str	r3, [sp, #20]
 8005e3a:	f000 fa55 	bl	80062e8 <memchr>
 8005e3e:	1c75      	adds	r5, r6, #1
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d11f      	bne.n	8005e84 <_svfiprintf_r+0xe8>
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	06d3      	lsls	r3, r2, #27
 8005e48:	d504      	bpl.n	8005e54 <_svfiprintf_r+0xb8>
 8005e4a:	2353      	movs	r3, #83	; 0x53
 8005e4c:	a904      	add	r1, sp, #16
 8005e4e:	185b      	adds	r3, r3, r1
 8005e50:	2120      	movs	r1, #32
 8005e52:	7019      	strb	r1, [r3, #0]
 8005e54:	0713      	lsls	r3, r2, #28
 8005e56:	d504      	bpl.n	8005e62 <_svfiprintf_r+0xc6>
 8005e58:	2353      	movs	r3, #83	; 0x53
 8005e5a:	a904      	add	r1, sp, #16
 8005e5c:	185b      	adds	r3, r3, r1
 8005e5e:	212b      	movs	r1, #43	; 0x2b
 8005e60:	7019      	strb	r1, [r3, #0]
 8005e62:	7833      	ldrb	r3, [r6, #0]
 8005e64:	2b2a      	cmp	r3, #42	; 0x2a
 8005e66:	d016      	beq.n	8005e96 <_svfiprintf_r+0xfa>
 8005e68:	0035      	movs	r5, r6
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	200a      	movs	r0, #10
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	782a      	ldrb	r2, [r5, #0]
 8005e72:	1c6e      	adds	r6, r5, #1
 8005e74:	3a30      	subs	r2, #48	; 0x30
 8005e76:	2a09      	cmp	r2, #9
 8005e78:	d94e      	bls.n	8005f18 <_svfiprintf_r+0x17c>
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	d111      	bne.n	8005ea2 <_svfiprintf_r+0x106>
 8005e7e:	e017      	b.n	8005eb0 <_svfiprintf_r+0x114>
 8005e80:	3501      	adds	r5, #1
 8005e82:	e7af      	b.n	8005de4 <_svfiprintf_r+0x48>
 8005e84:	9b05      	ldr	r3, [sp, #20]
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	1ac0      	subs	r0, r0, r3
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4083      	lsls	r3, r0
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	002e      	movs	r6, r5
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	e7cc      	b.n	8005e30 <_svfiprintf_r+0x94>
 8005e96:	9b07      	ldr	r3, [sp, #28]
 8005e98:	1d19      	adds	r1, r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	9107      	str	r1, [sp, #28]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db01      	blt.n	8005ea6 <_svfiprintf_r+0x10a>
 8005ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ea4:	e004      	b.n	8005eb0 <_svfiprintf_r+0x114>
 8005ea6:	425b      	negs	r3, r3
 8005ea8:	60e3      	str	r3, [r4, #12]
 8005eaa:	2302      	movs	r3, #2
 8005eac:	4313      	orrs	r3, r2
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	782b      	ldrb	r3, [r5, #0]
 8005eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb4:	d10a      	bne.n	8005ecc <_svfiprintf_r+0x130>
 8005eb6:	786b      	ldrb	r3, [r5, #1]
 8005eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eba:	d135      	bne.n	8005f28 <_svfiprintf_r+0x18c>
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	3502      	adds	r5, #2
 8005ec0:	1d1a      	adds	r2, r3, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	9207      	str	r2, [sp, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	db2b      	blt.n	8005f22 <_svfiprintf_r+0x186>
 8005eca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ecc:	4e2f      	ldr	r6, [pc, #188]	; (8005f8c <_svfiprintf_r+0x1f0>)
 8005ece:	2203      	movs	r2, #3
 8005ed0:	0030      	movs	r0, r6
 8005ed2:	7829      	ldrb	r1, [r5, #0]
 8005ed4:	f000 fa08 	bl	80062e8 <memchr>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d006      	beq.n	8005eea <_svfiprintf_r+0x14e>
 8005edc:	2340      	movs	r3, #64	; 0x40
 8005ede:	1b80      	subs	r0, r0, r6
 8005ee0:	4083      	lsls	r3, r0
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	7829      	ldrb	r1, [r5, #0]
 8005eec:	2206      	movs	r2, #6
 8005eee:	4828      	ldr	r0, [pc, #160]	; (8005f90 <_svfiprintf_r+0x1f4>)
 8005ef0:	1c6e      	adds	r6, r5, #1
 8005ef2:	7621      	strb	r1, [r4, #24]
 8005ef4:	f000 f9f8 	bl	80062e8 <memchr>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d03c      	beq.n	8005f76 <_svfiprintf_r+0x1da>
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <_svfiprintf_r+0x1f8>)
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d125      	bne.n	8005f4e <_svfiprintf_r+0x1b2>
 8005f02:	2207      	movs	r2, #7
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	3307      	adds	r3, #7
 8005f08:	4393      	bics	r3, r2
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	9307      	str	r3, [sp, #28]
 8005f0e:	6963      	ldr	r3, [r4, #20]
 8005f10:	9a04      	ldr	r2, [sp, #16]
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	6163      	str	r3, [r4, #20]
 8005f16:	e764      	b.n	8005de2 <_svfiprintf_r+0x46>
 8005f18:	4343      	muls	r3, r0
 8005f1a:	0035      	movs	r5, r6
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	189b      	adds	r3, r3, r2
 8005f20:	e7a6      	b.n	8005e70 <_svfiprintf_r+0xd4>
 8005f22:	2301      	movs	r3, #1
 8005f24:	425b      	negs	r3, r3
 8005f26:	e7d0      	b.n	8005eca <_svfiprintf_r+0x12e>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	200a      	movs	r0, #10
 8005f2c:	001a      	movs	r2, r3
 8005f2e:	3501      	adds	r5, #1
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	7829      	ldrb	r1, [r5, #0]
 8005f34:	1c6e      	adds	r6, r5, #1
 8005f36:	3930      	subs	r1, #48	; 0x30
 8005f38:	2909      	cmp	r1, #9
 8005f3a:	d903      	bls.n	8005f44 <_svfiprintf_r+0x1a8>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0c5      	beq.n	8005ecc <_svfiprintf_r+0x130>
 8005f40:	9209      	str	r2, [sp, #36]	; 0x24
 8005f42:	e7c3      	b.n	8005ecc <_svfiprintf_r+0x130>
 8005f44:	4342      	muls	r2, r0
 8005f46:	0035      	movs	r5, r6
 8005f48:	2301      	movs	r3, #1
 8005f4a:	1852      	adds	r2, r2, r1
 8005f4c:	e7f1      	b.n	8005f32 <_svfiprintf_r+0x196>
 8005f4e:	aa07      	add	r2, sp, #28
 8005f50:	9200      	str	r2, [sp, #0]
 8005f52:	0021      	movs	r1, r4
 8005f54:	003a      	movs	r2, r7
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <_svfiprintf_r+0x1fc>)
 8005f58:	9803      	ldr	r0, [sp, #12]
 8005f5a:	e000      	b.n	8005f5e <_svfiprintf_r+0x1c2>
 8005f5c:	bf00      	nop
 8005f5e:	9004      	str	r0, [sp, #16]
 8005f60:	9b04      	ldr	r3, [sp, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	d1d3      	bne.n	8005f0e <_svfiprintf_r+0x172>
 8005f66:	89bb      	ldrh	r3, [r7, #12]
 8005f68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f6a:	065b      	lsls	r3, r3, #25
 8005f6c:	d400      	bmi.n	8005f70 <_svfiprintf_r+0x1d4>
 8005f6e:	e72c      	b.n	8005dca <_svfiprintf_r+0x2e>
 8005f70:	2001      	movs	r0, #1
 8005f72:	4240      	negs	r0, r0
 8005f74:	e729      	b.n	8005dca <_svfiprintf_r+0x2e>
 8005f76:	aa07      	add	r2, sp, #28
 8005f78:	9200      	str	r2, [sp, #0]
 8005f7a:	0021      	movs	r1, r4
 8005f7c:	003a      	movs	r2, r7
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <_svfiprintf_r+0x1fc>)
 8005f80:	9803      	ldr	r0, [sp, #12]
 8005f82:	f000 f87b 	bl	800607c <_printf_i>
 8005f86:	e7ea      	b.n	8005f5e <_svfiprintf_r+0x1c2>
 8005f88:	080064f4 	.word	0x080064f4
 8005f8c:	080064fa 	.word	0x080064fa
 8005f90:	080064fe 	.word	0x080064fe
 8005f94:	00000000 	.word	0x00000000
 8005f98:	08005cd9 	.word	0x08005cd9

08005f9c <_printf_common>:
 8005f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f9e:	0016      	movs	r6, r2
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	688a      	ldr	r2, [r1, #8]
 8005fa4:	690b      	ldr	r3, [r1, #16]
 8005fa6:	000c      	movs	r4, r1
 8005fa8:	9000      	str	r0, [sp, #0]
 8005faa:	4293      	cmp	r3, r2
 8005fac:	da00      	bge.n	8005fb0 <_printf_common+0x14>
 8005fae:	0013      	movs	r3, r2
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	6033      	str	r3, [r6, #0]
 8005fb4:	3243      	adds	r2, #67	; 0x43
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	d001      	beq.n	8005fc0 <_printf_common+0x24>
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	069b      	lsls	r3, r3, #26
 8005fc4:	d502      	bpl.n	8005fcc <_printf_common+0x30>
 8005fc6:	6833      	ldr	r3, [r6, #0]
 8005fc8:	3302      	adds	r3, #2
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	2306      	movs	r3, #6
 8005fd0:	0015      	movs	r5, r2
 8005fd2:	401d      	ands	r5, r3
 8005fd4:	421a      	tst	r2, r3
 8005fd6:	d027      	beq.n	8006028 <_printf_common+0x8c>
 8005fd8:	0023      	movs	r3, r4
 8005fda:	3343      	adds	r3, #67	; 0x43
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	1e5a      	subs	r2, r3, #1
 8005fe0:	4193      	sbcs	r3, r2
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	0692      	lsls	r2, r2, #26
 8005fe6:	d430      	bmi.n	800604a <_printf_common+0xae>
 8005fe8:	0022      	movs	r2, r4
 8005fea:	9901      	ldr	r1, [sp, #4]
 8005fec:	9800      	ldr	r0, [sp, #0]
 8005fee:	9d08      	ldr	r5, [sp, #32]
 8005ff0:	3243      	adds	r2, #67	; 0x43
 8005ff2:	47a8      	blx	r5
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d025      	beq.n	8006044 <_printf_common+0xa8>
 8005ff8:	2206      	movs	r2, #6
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	2500      	movs	r5, #0
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b04      	cmp	r3, #4
 8006002:	d105      	bne.n	8006010 <_printf_common+0x74>
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	68e5      	ldr	r5, [r4, #12]
 8006008:	1aed      	subs	r5, r5, r3
 800600a:	43eb      	mvns	r3, r5
 800600c:	17db      	asrs	r3, r3, #31
 800600e:	401d      	ands	r5, r3
 8006010:	68a3      	ldr	r3, [r4, #8]
 8006012:	6922      	ldr	r2, [r4, #16]
 8006014:	4293      	cmp	r3, r2
 8006016:	dd01      	ble.n	800601c <_printf_common+0x80>
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	18ed      	adds	r5, r5, r3
 800601c:	2600      	movs	r6, #0
 800601e:	42b5      	cmp	r5, r6
 8006020:	d120      	bne.n	8006064 <_printf_common+0xc8>
 8006022:	2000      	movs	r0, #0
 8006024:	e010      	b.n	8006048 <_printf_common+0xac>
 8006026:	3501      	adds	r5, #1
 8006028:	68e3      	ldr	r3, [r4, #12]
 800602a:	6832      	ldr	r2, [r6, #0]
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	42ab      	cmp	r3, r5
 8006030:	ddd2      	ble.n	8005fd8 <_printf_common+0x3c>
 8006032:	0022      	movs	r2, r4
 8006034:	2301      	movs	r3, #1
 8006036:	9901      	ldr	r1, [sp, #4]
 8006038:	9800      	ldr	r0, [sp, #0]
 800603a:	9f08      	ldr	r7, [sp, #32]
 800603c:	3219      	adds	r2, #25
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	d1f0      	bne.n	8006026 <_printf_common+0x8a>
 8006044:	2001      	movs	r0, #1
 8006046:	4240      	negs	r0, r0
 8006048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800604a:	2030      	movs	r0, #48	; 0x30
 800604c:	18e1      	adds	r1, r4, r3
 800604e:	3143      	adds	r1, #67	; 0x43
 8006050:	7008      	strb	r0, [r1, #0]
 8006052:	0021      	movs	r1, r4
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	3145      	adds	r1, #69	; 0x45
 8006058:	7809      	ldrb	r1, [r1, #0]
 800605a:	18a2      	adds	r2, r4, r2
 800605c:	3243      	adds	r2, #67	; 0x43
 800605e:	3302      	adds	r3, #2
 8006060:	7011      	strb	r1, [r2, #0]
 8006062:	e7c1      	b.n	8005fe8 <_printf_common+0x4c>
 8006064:	0022      	movs	r2, r4
 8006066:	2301      	movs	r3, #1
 8006068:	9901      	ldr	r1, [sp, #4]
 800606a:	9800      	ldr	r0, [sp, #0]
 800606c:	9f08      	ldr	r7, [sp, #32]
 800606e:	321a      	adds	r2, #26
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	d0e6      	beq.n	8006044 <_printf_common+0xa8>
 8006076:	3601      	adds	r6, #1
 8006078:	e7d1      	b.n	800601e <_printf_common+0x82>
	...

0800607c <_printf_i>:
 800607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607e:	b08b      	sub	sp, #44	; 0x2c
 8006080:	9206      	str	r2, [sp, #24]
 8006082:	000a      	movs	r2, r1
 8006084:	3243      	adds	r2, #67	; 0x43
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	9005      	str	r0, [sp, #20]
 800608a:	9204      	str	r2, [sp, #16]
 800608c:	7e0a      	ldrb	r2, [r1, #24]
 800608e:	000c      	movs	r4, r1
 8006090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006092:	2a78      	cmp	r2, #120	; 0x78
 8006094:	d809      	bhi.n	80060aa <_printf_i+0x2e>
 8006096:	2a62      	cmp	r2, #98	; 0x62
 8006098:	d80b      	bhi.n	80060b2 <_printf_i+0x36>
 800609a:	2a00      	cmp	r2, #0
 800609c:	d100      	bne.n	80060a0 <_printf_i+0x24>
 800609e:	e0be      	b.n	800621e <_printf_i+0x1a2>
 80060a0:	497c      	ldr	r1, [pc, #496]	; (8006294 <_printf_i+0x218>)
 80060a2:	9103      	str	r1, [sp, #12]
 80060a4:	2a58      	cmp	r2, #88	; 0x58
 80060a6:	d100      	bne.n	80060aa <_printf_i+0x2e>
 80060a8:	e093      	b.n	80061d2 <_printf_i+0x156>
 80060aa:	0026      	movs	r6, r4
 80060ac:	3642      	adds	r6, #66	; 0x42
 80060ae:	7032      	strb	r2, [r6, #0]
 80060b0:	e022      	b.n	80060f8 <_printf_i+0x7c>
 80060b2:	0010      	movs	r0, r2
 80060b4:	3863      	subs	r0, #99	; 0x63
 80060b6:	2815      	cmp	r0, #21
 80060b8:	d8f7      	bhi.n	80060aa <_printf_i+0x2e>
 80060ba:	f7fa f82d 	bl	8000118 <__gnu_thumb1_case_shi>
 80060be:	0016      	.short	0x0016
 80060c0:	fff6001f 	.word	0xfff6001f
 80060c4:	fff6fff6 	.word	0xfff6fff6
 80060c8:	001ffff6 	.word	0x001ffff6
 80060cc:	fff6fff6 	.word	0xfff6fff6
 80060d0:	fff6fff6 	.word	0xfff6fff6
 80060d4:	003600a3 	.word	0x003600a3
 80060d8:	fff60083 	.word	0xfff60083
 80060dc:	00b4fff6 	.word	0x00b4fff6
 80060e0:	0036fff6 	.word	0x0036fff6
 80060e4:	fff6fff6 	.word	0xfff6fff6
 80060e8:	0087      	.short	0x0087
 80060ea:	0026      	movs	r6, r4
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	3642      	adds	r6, #66	; 0x42
 80060f0:	1d11      	adds	r1, r2, #4
 80060f2:	6019      	str	r1, [r3, #0]
 80060f4:	6813      	ldr	r3, [r2, #0]
 80060f6:	7033      	strb	r3, [r6, #0]
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0a2      	b.n	8006242 <_printf_i+0x1c6>
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	6809      	ldr	r1, [r1, #0]
 8006100:	1d02      	adds	r2, r0, #4
 8006102:	060d      	lsls	r5, r1, #24
 8006104:	d50b      	bpl.n	800611e <_printf_i+0xa2>
 8006106:	6805      	ldr	r5, [r0, #0]
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	2d00      	cmp	r5, #0
 800610c:	da03      	bge.n	8006116 <_printf_i+0x9a>
 800610e:	232d      	movs	r3, #45	; 0x2d
 8006110:	9a04      	ldr	r2, [sp, #16]
 8006112:	426d      	negs	r5, r5
 8006114:	7013      	strb	r3, [r2, #0]
 8006116:	4b5f      	ldr	r3, [pc, #380]	; (8006294 <_printf_i+0x218>)
 8006118:	270a      	movs	r7, #10
 800611a:	9303      	str	r3, [sp, #12]
 800611c:	e01b      	b.n	8006156 <_printf_i+0xda>
 800611e:	6805      	ldr	r5, [r0, #0]
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	0649      	lsls	r1, r1, #25
 8006124:	d5f1      	bpl.n	800610a <_printf_i+0x8e>
 8006126:	b22d      	sxth	r5, r5
 8006128:	e7ef      	b.n	800610a <_printf_i+0x8e>
 800612a:	680d      	ldr	r5, [r1, #0]
 800612c:	6819      	ldr	r1, [r3, #0]
 800612e:	1d08      	adds	r0, r1, #4
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	062e      	lsls	r6, r5, #24
 8006134:	d501      	bpl.n	800613a <_printf_i+0xbe>
 8006136:	680d      	ldr	r5, [r1, #0]
 8006138:	e003      	b.n	8006142 <_printf_i+0xc6>
 800613a:	066d      	lsls	r5, r5, #25
 800613c:	d5fb      	bpl.n	8006136 <_printf_i+0xba>
 800613e:	680d      	ldr	r5, [r1, #0]
 8006140:	b2ad      	uxth	r5, r5
 8006142:	4b54      	ldr	r3, [pc, #336]	; (8006294 <_printf_i+0x218>)
 8006144:	2708      	movs	r7, #8
 8006146:	9303      	str	r3, [sp, #12]
 8006148:	2a6f      	cmp	r2, #111	; 0x6f
 800614a:	d000      	beq.n	800614e <_printf_i+0xd2>
 800614c:	3702      	adds	r7, #2
 800614e:	0023      	movs	r3, r4
 8006150:	2200      	movs	r2, #0
 8006152:	3343      	adds	r3, #67	; 0x43
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	db03      	blt.n	8006166 <_printf_i+0xea>
 800615e:	2104      	movs	r1, #4
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	438a      	bics	r2, r1
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	2d00      	cmp	r5, #0
 8006168:	d102      	bne.n	8006170 <_printf_i+0xf4>
 800616a:	9e04      	ldr	r6, [sp, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <_printf_i+0x10e>
 8006170:	9e04      	ldr	r6, [sp, #16]
 8006172:	0028      	movs	r0, r5
 8006174:	0039      	movs	r1, r7
 8006176:	f7fa f85f 	bl	8000238 <__aeabi_uidivmod>
 800617a:	9b03      	ldr	r3, [sp, #12]
 800617c:	3e01      	subs	r6, #1
 800617e:	5c5b      	ldrb	r3, [r3, r1]
 8006180:	7033      	strb	r3, [r6, #0]
 8006182:	002b      	movs	r3, r5
 8006184:	0005      	movs	r5, r0
 8006186:	429f      	cmp	r7, r3
 8006188:	d9f3      	bls.n	8006172 <_printf_i+0xf6>
 800618a:	2f08      	cmp	r7, #8
 800618c:	d109      	bne.n	80061a2 <_printf_i+0x126>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	07db      	lsls	r3, r3, #31
 8006192:	d506      	bpl.n	80061a2 <_printf_i+0x126>
 8006194:	6862      	ldr	r2, [r4, #4]
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	429a      	cmp	r2, r3
 800619a:	dc02      	bgt.n	80061a2 <_printf_i+0x126>
 800619c:	2330      	movs	r3, #48	; 0x30
 800619e:	3e01      	subs	r6, #1
 80061a0:	7033      	strb	r3, [r6, #0]
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	1b9b      	subs	r3, r3, r6
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	0021      	movs	r1, r4
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	9805      	ldr	r0, [sp, #20]
 80061b0:	9b06      	ldr	r3, [sp, #24]
 80061b2:	aa09      	add	r2, sp, #36	; 0x24
 80061b4:	f7ff fef2 	bl	8005f9c <_printf_common>
 80061b8:	3001      	adds	r0, #1
 80061ba:	d147      	bne.n	800624c <_printf_i+0x1d0>
 80061bc:	2001      	movs	r0, #1
 80061be:	4240      	negs	r0, r0
 80061c0:	b00b      	add	sp, #44	; 0x2c
 80061c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c4:	2220      	movs	r2, #32
 80061c6:	6809      	ldr	r1, [r1, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	2278      	movs	r2, #120	; 0x78
 80061ce:	4932      	ldr	r1, [pc, #200]	; (8006298 <_printf_i+0x21c>)
 80061d0:	9103      	str	r1, [sp, #12]
 80061d2:	0021      	movs	r1, r4
 80061d4:	3145      	adds	r1, #69	; 0x45
 80061d6:	700a      	strb	r2, [r1, #0]
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	c920      	ldmia	r1!, {r5}
 80061de:	0610      	lsls	r0, r2, #24
 80061e0:	d402      	bmi.n	80061e8 <_printf_i+0x16c>
 80061e2:	0650      	lsls	r0, r2, #25
 80061e4:	d500      	bpl.n	80061e8 <_printf_i+0x16c>
 80061e6:	b2ad      	uxth	r5, r5
 80061e8:	6019      	str	r1, [r3, #0]
 80061ea:	07d3      	lsls	r3, r2, #31
 80061ec:	d502      	bpl.n	80061f4 <_printf_i+0x178>
 80061ee:	2320      	movs	r3, #32
 80061f0:	4313      	orrs	r3, r2
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	2710      	movs	r7, #16
 80061f6:	2d00      	cmp	r5, #0
 80061f8:	d1a9      	bne.n	800614e <_printf_i+0xd2>
 80061fa:	2220      	movs	r2, #32
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	4393      	bics	r3, r2
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	e7a4      	b.n	800614e <_printf_i+0xd2>
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	680d      	ldr	r5, [r1, #0]
 8006208:	1d10      	adds	r0, r2, #4
 800620a:	6949      	ldr	r1, [r1, #20]
 800620c:	6018      	str	r0, [r3, #0]
 800620e:	6813      	ldr	r3, [r2, #0]
 8006210:	062e      	lsls	r6, r5, #24
 8006212:	d501      	bpl.n	8006218 <_printf_i+0x19c>
 8006214:	6019      	str	r1, [r3, #0]
 8006216:	e002      	b.n	800621e <_printf_i+0x1a2>
 8006218:	066d      	lsls	r5, r5, #25
 800621a:	d5fb      	bpl.n	8006214 <_printf_i+0x198>
 800621c:	8019      	strh	r1, [r3, #0]
 800621e:	2300      	movs	r3, #0
 8006220:	9e04      	ldr	r6, [sp, #16]
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	e7c0      	b.n	80061a8 <_printf_i+0x12c>
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	1d11      	adds	r1, r2, #4
 800622a:	6019      	str	r1, [r3, #0]
 800622c:	6816      	ldr	r6, [r2, #0]
 800622e:	2100      	movs	r1, #0
 8006230:	0030      	movs	r0, r6
 8006232:	6862      	ldr	r2, [r4, #4]
 8006234:	f000 f858 	bl	80062e8 <memchr>
 8006238:	2800      	cmp	r0, #0
 800623a:	d001      	beq.n	8006240 <_printf_i+0x1c4>
 800623c:	1b80      	subs	r0, r0, r6
 800623e:	6060      	str	r0, [r4, #4]
 8006240:	6863      	ldr	r3, [r4, #4]
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	2300      	movs	r3, #0
 8006246:	9a04      	ldr	r2, [sp, #16]
 8006248:	7013      	strb	r3, [r2, #0]
 800624a:	e7ad      	b.n	80061a8 <_printf_i+0x12c>
 800624c:	0032      	movs	r2, r6
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	9906      	ldr	r1, [sp, #24]
 8006252:	9805      	ldr	r0, [sp, #20]
 8006254:	9d07      	ldr	r5, [sp, #28]
 8006256:	47a8      	blx	r5
 8006258:	3001      	adds	r0, #1
 800625a:	d0af      	beq.n	80061bc <_printf_i+0x140>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	079b      	lsls	r3, r3, #30
 8006260:	d415      	bmi.n	800628e <_printf_i+0x212>
 8006262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006264:	68e0      	ldr	r0, [r4, #12]
 8006266:	4298      	cmp	r0, r3
 8006268:	daaa      	bge.n	80061c0 <_printf_i+0x144>
 800626a:	0018      	movs	r0, r3
 800626c:	e7a8      	b.n	80061c0 <_printf_i+0x144>
 800626e:	0022      	movs	r2, r4
 8006270:	2301      	movs	r3, #1
 8006272:	9906      	ldr	r1, [sp, #24]
 8006274:	9805      	ldr	r0, [sp, #20]
 8006276:	9e07      	ldr	r6, [sp, #28]
 8006278:	3219      	adds	r2, #25
 800627a:	47b0      	blx	r6
 800627c:	3001      	adds	r0, #1
 800627e:	d09d      	beq.n	80061bc <_printf_i+0x140>
 8006280:	3501      	adds	r5, #1
 8006282:	68e3      	ldr	r3, [r4, #12]
 8006284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	42ab      	cmp	r3, r5
 800628a:	dcf0      	bgt.n	800626e <_printf_i+0x1f2>
 800628c:	e7e9      	b.n	8006262 <_printf_i+0x1e6>
 800628e:	2500      	movs	r5, #0
 8006290:	e7f7      	b.n	8006282 <_printf_i+0x206>
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	08006505 	.word	0x08006505
 8006298:	08006516 	.word	0x08006516

0800629c <memmove>:
 800629c:	b510      	push	{r4, lr}
 800629e:	4288      	cmp	r0, r1
 80062a0:	d902      	bls.n	80062a8 <memmove+0xc>
 80062a2:	188b      	adds	r3, r1, r2
 80062a4:	4298      	cmp	r0, r3
 80062a6:	d303      	bcc.n	80062b0 <memmove+0x14>
 80062a8:	2300      	movs	r3, #0
 80062aa:	e007      	b.n	80062bc <memmove+0x20>
 80062ac:	5c8b      	ldrb	r3, [r1, r2]
 80062ae:	5483      	strb	r3, [r0, r2]
 80062b0:	3a01      	subs	r2, #1
 80062b2:	d2fb      	bcs.n	80062ac <memmove+0x10>
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	5ccc      	ldrb	r4, [r1, r3]
 80062b8:	54c4      	strb	r4, [r0, r3]
 80062ba:	3301      	adds	r3, #1
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1fa      	bne.n	80062b6 <memmove+0x1a>
 80062c0:	e7f8      	b.n	80062b4 <memmove+0x18>
	...

080062c4 <_sbrk_r>:
 80062c4:	2300      	movs	r3, #0
 80062c6:	b570      	push	{r4, r5, r6, lr}
 80062c8:	4d06      	ldr	r5, [pc, #24]	; (80062e4 <_sbrk_r+0x20>)
 80062ca:	0004      	movs	r4, r0
 80062cc:	0008      	movs	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fb fe7a 	bl	8001fc8 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d103      	bne.n	80062e0 <_sbrk_r+0x1c>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d000      	beq.n	80062e0 <_sbrk_r+0x1c>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	20000420 	.word	0x20000420

080062e8 <memchr>:
 80062e8:	b2c9      	uxtb	r1, r1
 80062ea:	1882      	adds	r2, r0, r2
 80062ec:	4290      	cmp	r0, r2
 80062ee:	d101      	bne.n	80062f4 <memchr+0xc>
 80062f0:	2000      	movs	r0, #0
 80062f2:	4770      	bx	lr
 80062f4:	7803      	ldrb	r3, [r0, #0]
 80062f6:	428b      	cmp	r3, r1
 80062f8:	d0fb      	beq.n	80062f2 <memchr+0xa>
 80062fa:	3001      	adds	r0, #1
 80062fc:	e7f6      	b.n	80062ec <memchr+0x4>

080062fe <memcpy>:
 80062fe:	2300      	movs	r3, #0
 8006300:	b510      	push	{r4, lr}
 8006302:	429a      	cmp	r2, r3
 8006304:	d100      	bne.n	8006308 <memcpy+0xa>
 8006306:	bd10      	pop	{r4, pc}
 8006308:	5ccc      	ldrb	r4, [r1, r3]
 800630a:	54c4      	strb	r4, [r0, r3]
 800630c:	3301      	adds	r3, #1
 800630e:	e7f8      	b.n	8006302 <memcpy+0x4>

08006310 <_realloc_r>:
 8006310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006312:	0007      	movs	r7, r0
 8006314:	000e      	movs	r6, r1
 8006316:	0014      	movs	r4, r2
 8006318:	2900      	cmp	r1, #0
 800631a:	d105      	bne.n	8006328 <_realloc_r+0x18>
 800631c:	0011      	movs	r1, r2
 800631e:	f7ff fc49 	bl	8005bb4 <_malloc_r>
 8006322:	0005      	movs	r5, r0
 8006324:	0028      	movs	r0, r5
 8006326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006328:	2a00      	cmp	r2, #0
 800632a:	d103      	bne.n	8006334 <_realloc_r+0x24>
 800632c:	f7ff fbd6 	bl	8005adc <_free_r>
 8006330:	0025      	movs	r5, r4
 8006332:	e7f7      	b.n	8006324 <_realloc_r+0x14>
 8006334:	f000 f81b 	bl	800636e <_malloc_usable_size_r>
 8006338:	9001      	str	r0, [sp, #4]
 800633a:	4284      	cmp	r4, r0
 800633c:	d803      	bhi.n	8006346 <_realloc_r+0x36>
 800633e:	0035      	movs	r5, r6
 8006340:	0843      	lsrs	r3, r0, #1
 8006342:	42a3      	cmp	r3, r4
 8006344:	d3ee      	bcc.n	8006324 <_realloc_r+0x14>
 8006346:	0021      	movs	r1, r4
 8006348:	0038      	movs	r0, r7
 800634a:	f7ff fc33 	bl	8005bb4 <_malloc_r>
 800634e:	1e05      	subs	r5, r0, #0
 8006350:	d0e8      	beq.n	8006324 <_realloc_r+0x14>
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	0022      	movs	r2, r4
 8006356:	429c      	cmp	r4, r3
 8006358:	d900      	bls.n	800635c <_realloc_r+0x4c>
 800635a:	001a      	movs	r2, r3
 800635c:	0031      	movs	r1, r6
 800635e:	0028      	movs	r0, r5
 8006360:	f7ff ffcd 	bl	80062fe <memcpy>
 8006364:	0031      	movs	r1, r6
 8006366:	0038      	movs	r0, r7
 8006368:	f7ff fbb8 	bl	8005adc <_free_r>
 800636c:	e7da      	b.n	8006324 <_realloc_r+0x14>

0800636e <_malloc_usable_size_r>:
 800636e:	1f0b      	subs	r3, r1, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1f18      	subs	r0, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	da01      	bge.n	800637c <_malloc_usable_size_r+0xe>
 8006378:	580b      	ldr	r3, [r1, r0]
 800637a:	18c0      	adds	r0, r0, r3
 800637c:	4770      	bx	lr
	...

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
